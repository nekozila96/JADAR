{
    "version": "1.109.0",
    "results": [
        {
            "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
            "path": "docker-compose.yml",
            "start": {
                "line": 3,
                "col": 5,
                "offset": 28
            },
            "end": {
                "line": 3,
                "col": 8,
                "offset": 31
            },
            "extra": {
                "metavars": {
                    "$SERVICE": {
                        "start": {
                            "line": 3,
                            "col": 5,
                            "offset": 28
                        },
                        "end": {
                            "line": 3,
                            "col": 8,
                            "offset": 31
                        },
                        "abstract_content": "jsc"
                    }
                },
                "message": "Service 'jsc' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
                "metadata": {
                    "cwe": [
                        "CWE-732: Incorrect Permission Assignment for Critical Resource"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration",
                        "A06:2017 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
                        "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
                        "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
                    ],
                    "category": "security",
                    "technology": [
                        "docker-compose"
                    ],
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Improper Authorization"
                    ],
                    "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
                    "shortlink": "https://sg.run/0n8q",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 10054,
                            "rule_id": "qNUoWr",
                            "rule_name": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
                            "rv_id": 947034,
                            "url": "https://semgrep.dev/playground/r/o5TZz4P/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
                            "version_id": "o5TZz4P"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "e6e1f1f482d0970420f524fb187ceb2f5213066efdf4f83ca0ca897ff8b35efc3e8f2593b7f85b372a86b260a0bba815cca23203daaa2b4503b2969688405124_0",
                "lines": "    jsc:",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
            "path": "docker-compose.yml",
            "start": {
                "line": 3,
                "col": 5,
                "offset": 28
            },
            "end": {
                "line": 3,
                "col": 8,
                "offset": 31
            },
            "extra": {
                "metavars": {
                    "$SERVICE": {
                        "start": {
                            "line": 3,
                            "col": 5,
                            "offset": 28
                        },
                        "end": {
                            "line": 3,
                            "col": 8,
                            "offset": 31
                        },
                        "abstract_content": "jsc"
                    }
                },
                "message": "Service 'jsc' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
                "metadata": {
                    "cwe": [
                        "CWE-732: Incorrect Permission Assignment for Critical Resource"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration",
                        "A06:2017 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
                        "https://blog.atomist.com/security-of-docker-kubernetes/",
                        "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
                    ],
                    "category": "security",
                    "technology": [
                        "docker-compose"
                    ],
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Improper Authorization"
                    ],
                    "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
                    "shortlink": "https://sg.run/e4JE",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 10132,
                            "rule_id": "v8U5vN",
                            "rule_name": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
                            "rv_id": 947038,
                            "url": "https://semgrep.dev/playground/r/X0TLZd0/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
                            "version_id": "X0TLZd0"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "e13cc3f80f85d07741597340a46cd807e704e2dc4df90888d60fa779e6149bfe59b81f6da6e59b769a6d33eb96771cf461e3e2a466f124d8bf190ef0fc53a5c8_0",
                "lines": "    jsc:",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
            "path": "docker-compose.yml",
            "start": {
                "line": 12,
                "col": 5,
                "offset": 305
            },
            "end": {
                "line": 12,
                "col": 12,
                "offset": 312
            },
            "extra": {
                "metavars": {
                    "$SERVICE": {
                        "start": {
                            "line": 12,
                            "col": 5,
                            "offset": 305
                        },
                        "end": {
                            "line": 12,
                            "col": 12,
                            "offset": 312
                        },
                        "abstract_content": "j_mysql"
                    }
                },
                "message": "Service 'j_mysql' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
                "metadata": {
                    "cwe": [
                        "CWE-732: Incorrect Permission Assignment for Critical Resource"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration",
                        "A06:2017 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
                        "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
                        "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
                    ],
                    "category": "security",
                    "technology": [
                        "docker-compose"
                    ],
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Improper Authorization"
                    ],
                    "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
                    "shortlink": "https://sg.run/0n8q",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 10054,
                            "rule_id": "qNUoWr",
                            "rule_name": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
                            "rv_id": 947034,
                            "url": "https://semgrep.dev/playground/r/o5TZz4P/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
                            "version_id": "o5TZz4P"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "eeeda2b06e7ef03d3fdea319652b5a6ca3cc51e23a61ac76b1e8a9ef8edd7212219641790b306e439272d376938f85ada353d1869d6971033a4b9b44ffcf9cd2_0",
                "lines": "    j_mysql:",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
            "path": "docker-compose.yml",
            "start": {
                "line": 12,
                "col": 5,
                "offset": 305
            },
            "end": {
                "line": 12,
                "col": 12,
                "offset": 312
            },
            "extra": {
                "metavars": {
                    "$SERVICE": {
                        "start": {
                            "line": 12,
                            "col": 5,
                            "offset": 305
                        },
                        "end": {
                            "line": 12,
                            "col": 12,
                            "offset": 312
                        },
                        "abstract_content": "j_mysql"
                    }
                },
                "message": "Service 'j_mysql' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
                "metadata": {
                    "cwe": [
                        "CWE-732: Incorrect Permission Assignment for Critical Resource"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration",
                        "A06:2017 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
                        "https://blog.atomist.com/security-of-docker-kubernetes/",
                        "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
                    ],
                    "category": "security",
                    "technology": [
                        "docker-compose"
                    ],
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Improper Authorization"
                    ],
                    "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
                    "shortlink": "https://sg.run/e4JE",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 10132,
                            "rule_id": "v8U5vN",
                            "rule_name": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
                            "rv_id": 947038,
                            "url": "https://semgrep.dev/playground/r/X0TLZd0/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
                            "version_id": "X0TLZd0"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "c2966a6344f3faed6d3e9e4855f11ab82a46bcc94af1fcf3636356fea2953607b9541f7b224fcc0ca5fc4f817ac1a6631f2b40004b65aab41f0cccd484b418c2_0",
                "lines": "    j_mysql:",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "path": "src/main/java/org/joychou/RMI/Client.java",
            "start": {
                "line": 18,
                "col": 13,
                "offset": 559
            },
            "end": {
                "line": 18,
                "col": 32,
                "offset": 578
            },
            "extra": {
                "metavars": {
                    "$EXCEPTION": {
                        "start": {
                            "line": 18,
                            "col": 13,
                            "offset": 559
                        },
                        "end": {
                            "line": 18,
                            "col": 14,
                            "offset": 560
                        },
                        "abstract_content": "e"
                    }
                },
                "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "cwe": [
                        "CWE-489: Active Debug Code"
                    ],
                    "functional-categories": [
                        "debug::search::active-debug-code::java.lang"
                    ],
                    "owasp": [
                        "A10:2004 - Insecure Configuration Management",
                        "A06:2017 - Security Misconfiguration",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/489.html",
                        "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/",
                        "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces",
                        "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Active Debug Code"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "shortlink": "https://sg.run/4K8z",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27144,
                            "rule_id": "v8U0rZ",
                            "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "rv_id": 947426,
                            "url": "https://semgrep.dev/playground/r/GxTP0lB/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "version_id": "GxTP0lB"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "2699c335ec95339ad02696d8e055c03ec93473f329ae54000eeb6603f6dfab13283174e81c8974e987188392920406f8ba7439827cc3f1e2c4b111cd57c58073_0",
                "lines": "            e.printStackTrace();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "path": "src/main/java/org/joychou/RMI/Server.java",
            "start": {
                "line": 26,
                "col": 13,
                "offset": 755
            },
            "end": {
                "line": 26,
                "col": 32,
                "offset": 774
            },
            "extra": {
                "metavars": {
                    "$EXCEPTION": {
                        "start": {
                            "line": 26,
                            "col": 13,
                            "offset": 755
                        },
                        "end": {
                            "line": 26,
                            "col": 14,
                            "offset": 756
                        },
                        "abstract_content": "e"
                    }
                },
                "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "cwe": [
                        "CWE-489: Active Debug Code"
                    ],
                    "functional-categories": [
                        "debug::search::active-debug-code::java.lang"
                    ],
                    "owasp": [
                        "A10:2004 - Insecure Configuration Management",
                        "A06:2017 - Security Misconfiguration",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/489.html",
                        "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/",
                        "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces",
                        "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Active Debug Code"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "shortlink": "https://sg.run/4K8z",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27144,
                            "rule_id": "v8U0rZ",
                            "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "rv_id": 947426,
                            "url": "https://semgrep.dev/playground/r/GxTP0lB/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "version_id": "GxTP0lB"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "2d3b6f0ad1e7e08b01086855bf3ab6e14e88ee3a48a33d51e9389e734a96cca91298388a2c14b4d9bc937003bc40c388a1af4b79b475338515142a70c98d5e42_0",
                "lines": "            e.printStackTrace();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
            "path": "src/main/java/org/joychou/config/Object2Jsonp.java",
            "start": {
                "line": 87,
                "col": 13,
                "offset": 3301
            },
            "end": {
                "line": 87,
                "col": 88,
                "offset": 3376
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 6,
                            "offset": 5
                        },
                        "abstract_content": "error"
                    },
                    "$REQ": {
                        "start": {
                            "line": 76,
                            "col": 24,
                            "offset": 2890
                        },
                        "end": {
                            "line": 76,
                            "col": 31,
                            "offset": 2897
                        },
                        "abstract_content": "request"
                    },
                    "$REQFUNC": {
                        "start": {
                            "line": 76,
                            "col": 32,
                            "offset": 2898
                        },
                        "end": {
                            "line": 76,
                            "col": 41,
                            "offset": 2907
                        },
                        "abstract_content": "getHeader"
                    },
                    "$LOG": {
                        "start": {
                            "line": 87,
                            "col": 13,
                            "offset": 3301
                        },
                        "end": {
                            "line": 87,
                            "col": 19,
                            "offset": 3307
                        },
                        "abstract_content": "logger",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 31,
                                "col": 34,
                                "offset": 1254
                            },
                            "svalue_end": {
                                "line": 31,
                                "col": 74,
                                "offset": 1294
                            },
                            "svalue_abstract_content": "LoggerFactory.getLogger(this.getClass())"
                        }
                    },
                    "$LEVEL": {
                        "start": {
                            "line": 87,
                            "col": 20,
                            "offset": 3308
                        },
                        "end": {
                            "line": 87,
                            "col": 25,
                            "offset": 3313
                        },
                        "abstract_content": "error"
                    }
                },
                "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "interfile": true,
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
                    ],
                    "functional-categories": [
                        "web::source::cookie::Servlet",
                        "web::source::http-params::Servlet",
                        "web::source::http-body::Servlet",
                        "web::source::header::Servlet",
                        "log::sink::log::log4j",
                        "log::sink::log::java.util"
                    ],
                    "owasp": [
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/117.html",
                        "https://cwe.mitre.org/data/definitions/93.html",
                        "https://owasp.org/www-community/attacks/Log_Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Improper Validation"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                    "shortlink": "https://sg.run/xGwy",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 40130,
                            "rule_id": "d8UbJq",
                            "rule_name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                            "rv_id": 947512,
                            "url": "https://semgrep.dev/playground/r/vdTG5dL/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                            "version_id": "vdTG5dL"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "03f7c27985667eb395bebfdfb851b283a1d017430e361f90511637b13414674407a6e4b55b3e3f96ca796c345b9a00e4798c18a6f9886878abe355dce6ffa94c_0",
                "lines": "            logger.error(\"[-] URL: \" + url + \"?\" + query + \"\\t\" + \"Referer: \" + refer);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/config/Object2Jsonp.java",
                                "start": {
                                    "line": 76,
                                    "col": 24,
                                    "offset": 2890
                                },
                                "end": {
                                    "line": 76,
                                    "col": 52,
                                    "offset": 2918
                                }
                            },
                            "request.getHeader(\"referer\")"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/config/Object2Jsonp.java",
                                "start": {
                                    "line": 76,
                                    "col": 16,
                                    "offset": 2882
                                },
                                "end": {
                                    "line": 76,
                                    "col": 21,
                                    "offset": 2887
                                }
                            },
                            "content": "refer"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/config/Object2Jsonp.java",
                                "start": {
                                    "line": 87,
                                    "col": 13,
                                    "offset": 3301
                                },
                                "end": {
                                    "line": 87,
                                    "col": 88,
                                    "offset": 3376
                                }
                            },
                            "logger.error(\"[-] URL: \" + url + \"?\" + query + \"\\t\" + \"Referer: \" + refer);"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
            "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
            "start": {
                "line": 32,
                "col": 36,
                "offset": 1070
            },
            "end": {
                "line": 32,
                "col": 78,
                "offset": 1112
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 32,
                            "col": 36,
                            "offset": 1070
                        },
                        "end": {
                            "line": 32,
                            "col": 39,
                            "offset": 1073
                        },
                        "abstract_content": "dbf"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 33,
                            "col": 29,
                            "offset": 1142
                        },
                        "end": {
                            "line": 33,
                            "col": 31,
                            "offset": 1144
                        },
                        "abstract_content": "db"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. The current configuration allows for XXE attacks through parameter entities. It is our recommendation to secure this parser against XXE attacks by configuring dbf with `dbf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks with parameter entities. `dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false)` Beware, using a custom EntityResolver will render these settings useless and you will be responsible for handeling security in the implementation of you EntityResolver. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                    "shortlink": "https://sg.run/5qYX",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27147,
                            "rule_id": "nJU2Wq",
                            "rule_name": "java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                            "rv_id": 947438,
                            "url": "https://semgrep.dev/playground/r/o5TZzLq/java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                            "version_id": "o5TZzLq"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "0e05a66fdf396ba2facb0aef8a94a9179558674af0ba9f9affcd78bccb23bef2a23a661820aad78a2c54e1265ab7bdac215039f9b7ec4c10c9e460cdbd3ecb42_0",
                "lines": "            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
            "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
            "start": {
                "line": 32,
                "col": 36,
                "offset": 1070
            },
            "end": {
                "line": 32,
                "col": 78,
                "offset": 1112
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 32,
                            "col": 36,
                            "offset": 1070
                        },
                        "end": {
                            "line": 32,
                            "col": 39,
                            "offset": 1073
                        },
                        "abstract_content": "dbf"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 33,
                            "col": 29,
                            "offset": 1142
                        },
                        "end": {
                            "line": 33,
                            "col": 31,
                            "offset": 1144
                        },
                        "abstract_content": "db"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) or XIncludes which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. It is our recommendation to secure this parser against XXE attacks by configuring dbf with `dbf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `dbf.setExpandEntityReferences(false)` `dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "XML External Entity (XXE) in DocumentBuilderFactory",
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://cwe.mitre.org/data/definitions/611.html",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755"
                    ],
                    "supersedes": [
                        "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false",
                        "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                        "java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true",
                        "java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true",
                        "java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe"
                    ],
                    "technology": [
                        "xml"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                    "shortlink": "https://sg.run/Kxqxn",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 141399,
                            "rule_id": "lBU4b4K",
                            "rule_name": "java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                            "rv_id": 947439,
                            "url": "https://semgrep.dev/playground/r/zyTlyBz/java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                            "version_id": "zyTlyBz"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "745d24fe6a77e48d4334e19013b52ac4fb6a510fca4eeca483b354a6cf78f39b80069b09b854e6bda573c9db826e076157c50203ed14f787fe51119a5043f8f6_0",
                "lines": "            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
                                "start": {
                                    "line": 32,
                                    "col": 36,
                                    "offset": 1070
                                },
                                "end": {
                                    "line": 32,
                                    "col": 78,
                                    "offset": 1112
                                }
                            },
                            "dbf = DocumentBuilderFactory.newInstance()"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
                                "start": {
                                    "line": 32,
                                    "col": 36,
                                    "offset": 1070
                                },
                                "end": {
                                    "line": 32,
                                    "col": 39,
                                    "offset": 1073
                                }
                            },
                            "content": "dbf"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
                                "start": {
                                    "line": 33,
                                    "col": 29,
                                    "offset": 1142
                                },
                                "end": {
                                    "line": 33,
                                    "col": 31,
                                    "offset": 1144
                                }
                            },
                            "content": "db"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
                                "start": {
                                    "line": 34,
                                    "col": 28,
                                    "offset": 1200
                                },
                                "end": {
                                    "line": 34,
                                    "col": 63,
                                    "offset": 1235
                                }
                            },
                            "db.parse(resource.getInputStream())"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
            "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
            "start": {
                "line": 32,
                "col": 36,
                "offset": 1070
            },
            "end": {
                "line": 32,
                "col": 78,
                "offset": 1112
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 32,
                            "col": 36,
                            "offset": 1070
                        },
                        "end": {
                            "line": 32,
                            "col": 39,
                            "offset": 1073
                        },
                        "abstract_content": "dbf"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 33,
                            "col": 29,
                            "offset": 1142
                        },
                        "end": {
                            "line": 33,
                            "col": 31,
                            "offset": 1144
                        },
                        "abstract_content": "db"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. It is our recommendation to secure this parser against XXE attacks by configuring dbf with `dbf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `dbf.setExpandEntityReferences(false)` `dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                    "shortlink": "https://sg.run/GJd2",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27148,
                            "rule_id": "EwUEj8",
                            "rule_name": "java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                            "rv_id": 947440,
                            "url": "https://semgrep.dev/playground/r/pZTNG25/java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                            "version_id": "pZTNG25"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "7a64385f565c374b1df7ec2ad399ded59f081ef936aa3343fe885dadb341a0f40e35a0caccd4cb838b32eb590179938959a2b76b67f1efc48d3d50701bd4c315_0",
                "lines": "            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
            "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
            "start": {
                "line": 33,
                "col": 13,
                "offset": 1126
            },
            "end": {
                "line": 33,
                "col": 59,
                "offset": 1172
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 32,
                            "col": 36,
                            "offset": 1070
                        },
                        "end": {
                            "line": 32,
                            "col": 39,
                            "offset": 1073
                        },
                        "abstract_content": "dbf"
                    }
                },
                "message": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.",
                "fix": "dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            dbf.newDocumentBuilder();",
                "metadata": {
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "asvs": {
                        "control_id": "5.5.2 Insecue XML Deserialization",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention",
                        "section": "V5 Validation, Sanitization and Encoding",
                        "version": "4"
                    },
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://blog.sonarsource.com/secure-xml-processor",
                        "https://xerces.apache.org/xerces2-j/features.html"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "xml"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                    "shortlink": "https://sg.run/PYBz",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 18245,
                            "rule_id": "10UPQB",
                            "rule_name": "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                            "rv_id": 945716,
                            "url": "https://semgrep.dev/playground/r/K3TJbP9/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                            "version_id": "K3TJbP9"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "0b3c320721aa7d0fbd039bfb162af2acc37fea8d052eb2c8f796b880efc812d531efe17b2b84e68a0dcfe9c88adf7e0fc83c6042988c245a6217f48b0a336830_0",
                "lines": "            DocumentBuilder db = dbf.newDocumentBuilder();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
                                "start": {
                                    "line": 32,
                                    "col": 13,
                                    "offset": 1047
                                },
                                "end": {
                                    "line": 32,
                                    "col": 79,
                                    "offset": 1113
                                }
                            },
                            "DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
                                "start": {
                                    "line": 32,
                                    "col": 36,
                                    "offset": 1070
                                },
                                "end": {
                                    "line": 32,
                                    "col": 39,
                                    "offset": 1073
                                }
                            },
                            "content": "dbf"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
                                "start": {
                                    "line": 33,
                                    "col": 13,
                                    "offset": 1126
                                },
                                "end": {
                                    "line": 33,
                                    "col": 59,
                                    "offset": 1172
                                }
                            },
                            "DocumentBuilder db = dbf.newDocumentBuilder();"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
            "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
            "start": {
                "line": 88,
                "col": 36,
                "offset": 3704
            },
            "end": {
                "line": 88,
                "col": 78,
                "offset": 3746
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 88,
                            "col": 36,
                            "offset": 3704
                        },
                        "end": {
                            "line": 88,
                            "col": 39,
                            "offset": 3707
                        },
                        "abstract_content": "dbf"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 89,
                            "col": 29,
                            "offset": 3776
                        },
                        "end": {
                            "line": 89,
                            "col": 31,
                            "offset": 3778
                        },
                        "abstract_content": "db"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. The current configuration allows for XXE attacks through parameter entities. It is our recommendation to secure this parser against XXE attacks by configuring dbf with `dbf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks with parameter entities. `dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false)` Beware, using a custom EntityResolver will render these settings useless and you will be responsible for handeling security in the implementation of you EntityResolver. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                    "shortlink": "https://sg.run/5qYX",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27147,
                            "rule_id": "nJU2Wq",
                            "rule_name": "java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                            "rv_id": 947438,
                            "url": "https://semgrep.dev/playground/r/o5TZzLq/java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                            "version_id": "o5TZzLq"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "0e05a66fdf396ba2facb0aef8a94a9179558674af0ba9f9affcd78bccb23bef2a23a661820aad78a2c54e1265ab7bdac215039f9b7ec4c10c9e460cdbd3ecb42_1",
                "lines": "            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
            "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
            "start": {
                "line": 88,
                "col": 36,
                "offset": 3704
            },
            "end": {
                "line": 88,
                "col": 78,
                "offset": 3746
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 88,
                            "col": 36,
                            "offset": 3704
                        },
                        "end": {
                            "line": 88,
                            "col": 39,
                            "offset": 3707
                        },
                        "abstract_content": "dbf"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 89,
                            "col": 29,
                            "offset": 3776
                        },
                        "end": {
                            "line": 89,
                            "col": 31,
                            "offset": 3778
                        },
                        "abstract_content": "db"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) or XIncludes which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. It is our recommendation to secure this parser against XXE attacks by configuring dbf with `dbf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `dbf.setExpandEntityReferences(false)` `dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "XML External Entity (XXE) in DocumentBuilderFactory",
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://cwe.mitre.org/data/definitions/611.html",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755"
                    ],
                    "supersedes": [
                        "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false",
                        "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                        "java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true",
                        "java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true",
                        "java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe"
                    ],
                    "technology": [
                        "xml"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                    "shortlink": "https://sg.run/Kxqxn",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 141399,
                            "rule_id": "lBU4b4K",
                            "rule_name": "java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                            "rv_id": 947439,
                            "url": "https://semgrep.dev/playground/r/zyTlyBz/java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                            "version_id": "zyTlyBz"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "745d24fe6a77e48d4334e19013b52ac4fb6a510fca4eeca483b354a6cf78f39b80069b09b854e6bda573c9db826e076157c50203ed14f787fe51119a5043f8f6_1",
                "lines": "            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
                                "start": {
                                    "line": 88,
                                    "col": 36,
                                    "offset": 3704
                                },
                                "end": {
                                    "line": 88,
                                    "col": 78,
                                    "offset": 3746
                                }
                            },
                            "dbf = DocumentBuilderFactory.newInstance()"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
                                "start": {
                                    "line": 88,
                                    "col": 36,
                                    "offset": 3704
                                },
                                "end": {
                                    "line": 88,
                                    "col": 39,
                                    "offset": 3707
                                }
                            },
                            "content": "dbf"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
                                "start": {
                                    "line": 89,
                                    "col": 29,
                                    "offset": 3776
                                },
                                "end": {
                                    "line": 89,
                                    "col": 31,
                                    "offset": 3778
                                }
                            },
                            "content": "db"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
                                "start": {
                                    "line": 91,
                                    "col": 28,
                                    "offset": 3904
                                },
                                "end": {
                                    "line": 91,
                                    "col": 63,
                                    "offset": 3939
                                }
                            },
                            "db.parse(resource.getInputStream())"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
            "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
            "start": {
                "line": 88,
                "col": 36,
                "offset": 3704
            },
            "end": {
                "line": 88,
                "col": 78,
                "offset": 3746
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 88,
                            "col": 36,
                            "offset": 3704
                        },
                        "end": {
                            "line": 88,
                            "col": 39,
                            "offset": 3707
                        },
                        "abstract_content": "dbf"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 89,
                            "col": 29,
                            "offset": 3776
                        },
                        "end": {
                            "line": 89,
                            "col": 31,
                            "offset": 3778
                        },
                        "abstract_content": "db"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. It is our recommendation to secure this parser against XXE attacks by configuring dbf with `dbf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `dbf.setExpandEntityReferences(false)` `dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                    "shortlink": "https://sg.run/GJd2",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27148,
                            "rule_id": "EwUEj8",
                            "rule_name": "java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                            "rv_id": 947440,
                            "url": "https://semgrep.dev/playground/r/pZTNG25/java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                            "version_id": "pZTNG25"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "7a64385f565c374b1df7ec2ad399ded59f081ef936aa3343fe885dadb341a0f40e35a0caccd4cb838b32eb590179938959a2b76b67f1efc48d3d50701bd4c315_1",
                "lines": "            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
            "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
            "start": {
                "line": 89,
                "col": 13,
                "offset": 3760
            },
            "end": {
                "line": 89,
                "col": 59,
                "offset": 3806
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 88,
                            "col": 36,
                            "offset": 3704
                        },
                        "end": {
                            "line": 88,
                            "col": 39,
                            "offset": 3707
                        },
                        "abstract_content": "dbf"
                    }
                },
                "message": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.",
                "fix": "dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            dbf.newDocumentBuilder();",
                "metadata": {
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "asvs": {
                        "control_id": "5.5.2 Insecue XML Deserialization",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention",
                        "section": "V5 Validation, Sanitization and Encoding",
                        "version": "4"
                    },
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://blog.sonarsource.com/secure-xml-processor",
                        "https://xerces.apache.org/xerces2-j/features.html"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "xml"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                    "shortlink": "https://sg.run/PYBz",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 18245,
                            "rule_id": "10UPQB",
                            "rule_name": "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                            "rv_id": 945716,
                            "url": "https://semgrep.dev/playground/r/K3TJbP9/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                            "version_id": "K3TJbP9"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "0b3c320721aa7d0fbd039bfb162af2acc37fea8d052eb2c8f796b880efc812d531efe17b2b84e68a0dcfe9c88adf7e0fc83c6042988c245a6217f48b0a336830_1",
                "lines": "            DocumentBuilder db = dbf.newDocumentBuilder();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
                                "start": {
                                    "line": 88,
                                    "col": 13,
                                    "offset": 3681
                                },
                                "end": {
                                    "line": 88,
                                    "col": 79,
                                    "offset": 3747
                                }
                            },
                            "DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
                                "start": {
                                    "line": 88,
                                    "col": 36,
                                    "offset": 3704
                                },
                                "end": {
                                    "line": 88,
                                    "col": 39,
                                    "offset": 3707
                                }
                            },
                            "content": "dbf"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/config/SafeDomainParser.java",
                                "start": {
                                    "line": 89,
                                    "col": 13,
                                    "offset": 3760
                                },
                                "end": {
                                    "line": 89,
                                    "col": 59,
                                    "offset": 3806
                                }
                            },
                            "DocumentBuilder db = dbf.newDocumentBuilder();"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
            "path": "src/main/java/org/joychou/config/TomcatFilterMemShell.java",
            "start": {
                "line": 82,
                "col": 13,
                "offset": 3863
            },
            "end": {
                "line": 82,
                "col": 62,
                "offset": 3912
            },
            "extra": {
                "metavars": {
                    "$REQ": {
                        "start": {
                            "line": 81,
                            "col": 20,
                            "offset": 3803
                        },
                        "end": {
                            "line": 81,
                            "col": 34,
                            "offset": 3817
                        },
                        "abstract_content": "servletRequest"
                    },
                    "$REQFUNC": {
                        "start": {
                            "line": 81,
                            "col": 35,
                            "offset": 3818
                        },
                        "end": {
                            "line": 81,
                            "col": 47,
                            "offset": 3830
                        },
                        "abstract_content": "getParameter"
                    },
                    "$P": {
                        "start": {
                            "line": 82,
                            "col": 21,
                            "offset": 3871
                        },
                        "end": {
                            "line": 82,
                            "col": 28,
                            "offset": 3878
                        },
                        "abstract_content": "process"
                    }
                },
                "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent command injection, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. For more information, see [JavaScript command injection prevention](https://semgrep.dev/docs/cheat-sheets/java-command-injection/)",
                "metadata": {
                    "likelihood": "HIGH",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
                    ],
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "functional-categories": [
                        "web::source::cookie::Servlet",
                        "web::source::http-params::Servlet",
                        "web::source::http-body::Servlet",
                        "web::source::header::Servlet",
                        "web::source::session-properties::Servlet",
                        "web::source::url-path-params::Servlet",
                        "web::source::form-data::Servlet",
                        "os::sink::os-command-or-thread::lang"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/Command_Injection",
                        "https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html",
                        "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection",
                        "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-os-command-injection",
                        "https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fdata_handling~2Finjection~2Foscmd"
                    ],
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Command Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                    "shortlink": "https://sg.run/eGqy",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27176,
                            "rule_id": "DbUR6g",
                            "rule_name": "java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                            "rv_id": 1014871,
                            "url": "https://semgrep.dev/playground/r/rxT65D6/java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                            "version_id": "rxT65D6"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "CRITICAL",
                "fingerprint": "a3887ff4825ab4a3248b858d4474eedcea9db1a16a783f5393def13bf104918fefbcf060534ba19912c28cb8d79473073b3d57c93b92462d8d685d9b61701f82_0",
                "lines": "            Process process = Runtime.getRuntime().exec(cmd);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/config/TomcatFilterMemShell.java",
                                "start": {
                                    "line": 81,
                                    "col": 20,
                                    "offset": 3803
                                },
                                "end": {
                                    "line": 81,
                                    "col": 55,
                                    "offset": 3838
                                }
                            },
                            "servletRequest.getParameter(\"cmd_\")"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/config/TomcatFilterMemShell.java",
                                "start": {
                                    "line": 81,
                                    "col": 14,
                                    "offset": 3797
                                },
                                "end": {
                                    "line": 81,
                                    "col": 17,
                                    "offset": 3800
                                }
                            },
                            "content": "cmd"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/config/TomcatFilterMemShell.java",
                                "start": {
                                    "line": 82,
                                    "col": 13,
                                    "offset": 3863
                                },
                                "end": {
                                    "line": 82,
                                    "col": 62,
                                    "offset": 3912
                                }
                            },
                            "Process process = Runtime.getRuntime().exec(cmd);"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.tainted-cmd-from-http-request-deepsemgrep.tainted-cmd-from-http-request-deepsemgrep",
            "path": "src/main/java/org/joychou/config/TomcatFilterMemShell.java",
            "start": {
                "line": 82,
                "col": 57,
                "offset": 3907
            },
            "end": {
                "line": 82,
                "col": 60,
                "offset": 3910
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 5,
                            "offset": 4
                        },
                        "abstract_content": "exec"
                    },
                    "$REQ": {
                        "start": {
                            "line": 81,
                            "col": 20,
                            "offset": 3803
                        },
                        "end": {
                            "line": 81,
                            "col": 34,
                            "offset": 3817
                        },
                        "abstract_content": "servletRequest"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 81,
                            "col": 35,
                            "offset": 3818
                        },
                        "end": {
                            "line": 81,
                            "col": 47,
                            "offset": 3830
                        },
                        "abstract_content": "getParameter"
                    },
                    "$EXEC": {
                        "start": {
                            "line": 82,
                            "col": 52,
                            "offset": 3902
                        },
                        "end": {
                            "line": 82,
                            "col": 56,
                            "offset": 3906
                        },
                        "abstract_content": "exec"
                    },
                    "$CMD": {
                        "start": {
                            "line": 82,
                            "col": 57,
                            "offset": 3907
                        },
                        "end": {
                            "line": 82,
                            "col": 60,
                            "offset": 3910
                        },
                        "abstract_content": "cmd",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 81,
                                "col": 20,
                                "offset": 3803
                            },
                            "svalue_end": {
                                "line": 81,
                                "col": 55,
                                "offset": 3838
                            },
                            "svalue_abstract_content": "servletRequest.getParameter(\"cmd_\")"
                        }
                    }
                },
                "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands. For more information, see: [Java command injection prevention](https://semgrep.dev/docs/cheat-sheets/java-command-injection/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "OS Command Injection with Servlets",
                    "functional-categories": [
                        "os::sink::os-command-or-thread",
                        "web::source::cookie::Servlet",
                        "web::source::header::Servlet",
                        "web::source::http-body::Servlet",
                        "web::source::http-params::Servlet",
                        "web::source::url-path-params::Servlet"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Command Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.tainted-cmd-from-http-request-deepsemgrep.tainted-cmd-from-http-request-deepsemgrep",
                    "shortlink": "https://sg.run/dGW0",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 40134,
                            "rule_id": "7KUYkp",
                            "rule_name": "java.servlets.security.tainted-cmd-from-http-request-deepsemgrep.tainted-cmd-from-http-request-deepsemgrep",
                            "rv_id": 947523,
                            "url": "https://semgrep.dev/playground/r/44TZz8L/java.servlets.security.tainted-cmd-from-http-request-deepsemgrep.tainted-cmd-from-http-request-deepsemgrep",
                            "version_id": "44TZz8L"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.tainted-cmd-from-http-request-deepsemgrep.tainted-cmd-from-http-request-deepsemgrep",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "8d42c2da627198a29c26b02e50b65cba314f5bc87fbdce82edbf8c82b37924bae490785775b99fc32b442253aaa2894e1ab97e8b44b7e68d3f1e650dbe7fcea0_0",
                "lines": "            Process process = Runtime.getRuntime().exec(cmd);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/config/TomcatFilterMemShell.java",
                                "start": {
                                    "line": 81,
                                    "col": 20,
                                    "offset": 3803
                                },
                                "end": {
                                    "line": 81,
                                    "col": 55,
                                    "offset": 3838
                                }
                            },
                            "servletRequest.getParameter(\"cmd_\")"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/config/TomcatFilterMemShell.java",
                                "start": {
                                    "line": 81,
                                    "col": 14,
                                    "offset": 3797
                                },
                                "end": {
                                    "line": 81,
                                    "col": 17,
                                    "offset": 3800
                                }
                            },
                            "content": "cmd"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/config/TomcatFilterMemShell.java",
                                "start": {
                                    "line": 82,
                                    "col": 57,
                                    "offset": 3907
                                },
                                "end": {
                                    "line": 82,
                                    "col": 60,
                                    "offset": 3910
                                }
                            },
                            "cmd"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "path": "src/main/java/org/joychou/config/WebSocketsCmdEndpoint.java",
            "start": {
                "line": 43,
                "col": 13,
                "offset": 1479
            },
            "end": {
                "line": 43,
                "col": 40,
                "offset": 1506
            },
            "extra": {
                "metavars": {
                    "$EXCEPTION": {
                        "start": {
                            "line": 43,
                            "col": 13,
                            "offset": 1479
                        },
                        "end": {
                            "line": 43,
                            "col": 22,
                            "offset": 1488
                        },
                        "abstract_content": "exception"
                    }
                },
                "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "cwe": [
                        "CWE-489: Active Debug Code"
                    ],
                    "functional-categories": [
                        "debug::search::active-debug-code::java.lang"
                    ],
                    "owasp": [
                        "A10:2004 - Insecure Configuration Management",
                        "A06:2017 - Security Misconfiguration",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/489.html",
                        "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/",
                        "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces",
                        "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Active Debug Code"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "shortlink": "https://sg.run/4K8z",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27144,
                            "rule_id": "v8U0rZ",
                            "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "rv_id": 947426,
                            "url": "https://semgrep.dev/playground/r/GxTP0lB/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "version_id": "GxTP0lB"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "ef934a0ed1559950dfaffdd905941eff99b8545eccae0a9e8720a3f2ee96eba02e959565de2e107c1fc9c75a0e82666e5d6d00e6b8511d84aba43659ddc9d467_0",
                "lines": "            exception.printStackTrace();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "path": "src/main/java/org/joychou/config/WebSocketsProxyEndpoint.java",
            "start": {
                "line": 60,
                "col": 17,
                "offset": 2500
            },
            "end": {
                "line": 60,
                "col": 36,
                "offset": 2519
            },
            "extra": {
                "metavars": {
                    "$EXCEPTION": {
                        "start": {
                            "line": 60,
                            "col": 17,
                            "offset": 2500
                        },
                        "end": {
                            "line": 60,
                            "col": 18,
                            "offset": 2501
                        },
                        "abstract_content": "t"
                    }
                },
                "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "cwe": [
                        "CWE-489: Active Debug Code"
                    ],
                    "functional-categories": [
                        "debug::search::active-debug-code::java.lang"
                    ],
                    "owasp": [
                        "A10:2004 - Insecure Configuration Management",
                        "A06:2017 - Security Misconfiguration",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/489.html",
                        "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/",
                        "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces",
                        "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Active Debug Code"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "shortlink": "https://sg.run/4K8z",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27144,
                            "rule_id": "v8U0rZ",
                            "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "rv_id": 947426,
                            "url": "https://semgrep.dev/playground/r/GxTP0lB/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "version_id": "GxTP0lB"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "b0e9bcdcb2a91ce3df63be373e22c513a4480430bf359beb7fb491e09f5e9cc23c3220c81413bfd865c416eaf16470cd38994f9460157a67021cada4f395fa68_0",
                "lines": "                t.printStackTrace();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/CRLFInjection.java",
            "start": {
                "line": 20,
                "col": 6,
                "offset": 525
            },
            "end": {
                "line": 20,
                "col": 20,
                "offset": 539
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 22,
                            "col": 12,
                            "offset": 582
                        },
                        "end": {
                            "line": 22,
                            "col": 16,
                            "offset": 586
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 22,
                            "col": 17,
                            "offset": 587
                        },
                        "end": {
                            "line": 22,
                            "col": 21,
                            "offset": 591
                        },
                        "abstract_content": "crlf"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "ccf3c05c769852a1c2105bba7fa213121d73168ee496e5b5a22adb060701fc30c602be672ab727d4030b79993763b8fb7c3036a0407d2bbf2cb611e3013ad2f8_0",
                "lines": "    @RequestMapping(\"/safecode\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.http-response-splitting.http-response-splitting",
            "path": "src/main/java/org/joychou/controller/CRLFInjection.java",
            "start": {
                "line": 25,
                "col": 9,
                "offset": 796
            },
            "end": {
                "line": 27,
                "col": 36,
                "offset": 931
            },
            "extra": {
                "metavars": {
                    "$VAR": {
                        "start": {
                            "line": 25,
                            "col": 16,
                            "offset": 803
                        },
                        "end": {
                            "line": 25,
                            "col": 22,
                            "offset": 809
                        },
                        "abstract_content": "author"
                    },
                    "$REQ": {
                        "start": {
                            "line": 25,
                            "col": 25,
                            "offset": 812
                        },
                        "end": {
                            "line": 25,
                            "col": 32,
                            "offset": 819
                        },
                        "abstract_content": "request"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 26,
                            "col": 16,
                            "offset": 858
                        },
                        "end": {
                            "line": 26,
                            "col": 22,
                            "offset": 864
                        },
                        "abstract_content": "cookie"
                    },
                    "$RESP": {
                        "start": {
                            "line": 27,
                            "col": 9,
                            "offset": 904
                        },
                        "end": {
                            "line": 27,
                            "col": 17,
                            "offset": 912
                        },
                        "abstract_content": "response"
                    }
                },
                "message": "Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself.",
                "metadata": {
                    "cwe": [
                        "CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"
                    ],
                    "owasp": [
                        "A03:2021 - Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#HTTP_RESPONSE_SPLITTING",
                    "references": [
                        "https://www.owasp.org/index.php/HTTP_Response_Splitting"
                    ],
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Improper Validation"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.http-response-splitting.http-response-splitting",
                    "shortlink": "https://sg.run/eL0l",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9176,
                            "rule_id": "3qUPyK",
                            "rule_name": "java.lang.security.audit.http-response-splitting.http-response-splitting",
                            "rv_id": 945680,
                            "url": "https://semgrep.dev/playground/r/2KTYb69/java.lang.security.audit.http-response-splitting.http-response-splitting",
                            "version_id": "2KTYb69"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.http-response-splitting.http-response-splitting",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "INFO",
                "fingerprint": "36e7995ed1587db1e56a5ea6fdb023ff9c516b37f16af0d2d87e5a51b83a7a0956dc36af9277df6f8677a54bc3f7694c88453aab31b064505169ec5baac44fa9_0",
                "lines": "        String author = request.getParameter(\"test3\");\n        Cookie cookie = new Cookie(\"test3\", author);\n        response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.cookie-issecure-false.cookie-issecure-false",
            "path": "src/main/java/org/joychou/controller/CRLFInjection.java",
            "start": {
                "line": 26,
                "col": 9,
                "offset": 851
            },
            "end": {
                "line": 26,
                "col": 53,
                "offset": 895
            },
            "extra": {
                "metavars": {
                    "$COOKIE": {
                        "start": {
                            "line": 26,
                            "col": 16,
                            "offset": 858
                        },
                        "end": {
                            "line": 26,
                            "col": 22,
                            "offset": 864
                        },
                        "abstract_content": "cookie"
                    },
                    "$...ARGS": {
                        "start": {
                            "line": 26,
                            "col": 36,
                            "offset": 878
                        },
                        "end": {
                            "line": 26,
                            "col": 51,
                            "offset": 893
                        },
                        "abstract_content": "\"test3\"author"
                    }
                },
                "message": "Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks.",
                "fix": "cookie = new Cookie(\"test3\", author);\n        cookie.setSecure(true);",
                "metadata": {
                    "vulnerability": "Insecure Transport",
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure",
                        "A02:2021 - Cryptographic Failures"
                    ],
                    "cwe": [
                        "CWE-319: Cleartext Transmission of Sensitive Information"
                    ],
                    "references": [
                        "https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setSecure(boolean)",
                        "https://owasp.org/www-community/controls/SecureCookieAttribute"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "cookie"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Mishandled Sensitive Information"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                    "shortlink": "https://sg.run/pxn0",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9218,
                            "rule_id": "kxUkn9",
                            "rule_name": "java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                            "rv_id": 945732,
                            "url": "https://semgrep.dev/playground/r/NdTqk5x/java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                            "version_id": "NdTqk5x"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "b451df609129bd57763a852070ac55401d83fbd8b91aaa49f1833c1af8f767626afb5a405bfd13c4c2fcadd5b2dc3b2420c0f74c280c4c97df1272e4a7273859_0",
                "lines": "        Cookie cookie = new Cookie(\"test3\", author);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
            "path": "src/main/java/org/joychou/controller/CRLFInjection.java",
            "start": {
                "line": 27,
                "col": 9,
                "offset": 904
            },
            "end": {
                "line": 27,
                "col": 36,
                "offset": 931
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 27,
                            "col": 9,
                            "offset": 904
                        },
                        "end": {
                            "line": 27,
                            "col": 17,
                            "offset": 912
                        },
                        "abstract_content": "response"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 27,
                            "col": 28,
                            "offset": 923
                        },
                        "end": {
                            "line": 27,
                            "col": 34,
                            "offset": 929
                        },
                        "abstract_content": "cookie",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 26,
                                "col": 25,
                                "offset": 867
                            },
                            "svalue_end": {
                                "line": 26,
                                "col": 52,
                                "offset": 894
                            },
                            "svalue_abstract_content": "new Cookie(\"test3\"author)"
                        }
                    }
                },
                "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
                "metadata": {
                    "cwe": [
                        "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE",
                    "asvs": {
                        "control_id": "3.4.2 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "shortlink": "https://sg.run/b7Be",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9170,
                            "rule_id": "EwU2z6",
                            "rule_name": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "rv_id": 945651,
                            "url": "https://semgrep.dev/playground/r/5PT9OYP/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "version_id": "5PT9OYP"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "15ab4fbb43296b6de6ff952ef7a89ae61d18175864139c2fb28c697069f1b3bbc4c4a9bf3bf0736eaa186dbc78e3a6f509f0c86121d214c22c329788cb863a24_0",
                "lines": "        response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
            "path": "src/main/java/org/joychou/controller/CRLFInjection.java",
            "start": {
                "line": 27,
                "col": 9,
                "offset": 904
            },
            "end": {
                "line": 27,
                "col": 36,
                "offset": 931
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 27,
                            "col": 9,
                            "offset": 904
                        },
                        "end": {
                            "line": 27,
                            "col": 17,
                            "offset": 912
                        },
                        "abstract_content": "response"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 27,
                            "col": 28,
                            "offset": 923
                        },
                        "end": {
                            "line": 27,
                            "col": 34,
                            "offset": 929
                        },
                        "abstract_content": "cookie",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 26,
                                "col": 25,
                                "offset": 867
                            },
                            "svalue_end": {
                                "line": 26,
                                "col": 52,
                                "offset": 894
                            },
                            "svalue_abstract_content": "new Cookie(\"test3\"author)"
                        }
                    }
                },
                "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
                "metadata": {
                    "cwe": [
                        "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE",
                    "asvs": {
                        "control_id": "3.4.1 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "shortlink": "https://sg.run/kXoK",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9172,
                            "rule_id": "L1Uyvp",
                            "rule_name": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "rv_id": 945652,
                            "url": "https://semgrep.dev/playground/r/GxTP7W7/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "version_id": "GxTP7W7"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "67256d558694fa24bd241b8c05304bddd898a16419abd92bc64e37d09a5e58a4901e2de3a50d847b482dacc1afcfeea2ab1e24c6d068e395a75a2f63ca515f29_0",
                "lines": "        response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
            "path": "src/main/java/org/joychou/controller/CRLFInjection.java",
            "start": {
                "line": 27,
                "col": 9,
                "offset": 904
            },
            "end": {
                "line": 27,
                "col": 36,
                "offset": 931
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 27,
                            "col": 9,
                            "offset": 904
                        },
                        "end": {
                            "line": 27,
                            "col": 17,
                            "offset": 912
                        },
                        "abstract_content": "response"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 27,
                            "col": 28,
                            "offset": 923
                        },
                        "end": {
                            "line": 27,
                            "col": 34,
                            "offset": 929
                        },
                        "abstract_content": "cookie",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 26,
                                "col": 25,
                                "offset": 867
                            },
                            "svalue_end": {
                                "line": 26,
                                "col": 52,
                                "offset": 894
                            },
                            "svalue_abstract_content": "new Cookie(\"test3\"author)"
                        }
                    }
                },
                "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.2 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
                    ],
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://owasp.org/www-community/HttpOnly"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "shortlink": "https://sg.run/2WZD",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27163,
                            "rule_id": "DbUR6k",
                            "rule_name": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "rv_id": 947502,
                            "url": "https://semgrep.dev/playground/r/9lTyO6k/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "version_id": "9lTyO6k"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "9149a8394b40d2acb922c9cfa91fd9ab90c24501daaf4ff3d8178d95371b6fecc1507b57ee691e6f7b391a14e34f388e0a3d50a1ec55abeae8ca0dbe934d70a4_0",
                "lines": "        response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
            "path": "src/main/java/org/joychou/controller/CRLFInjection.java",
            "start": {
                "line": 27,
                "col": 9,
                "offset": 904
            },
            "end": {
                "line": 27,
                "col": 36,
                "offset": 931
            },
            "extra": {
                "metavars": {
                    "$RESP": {
                        "start": {
                            "line": 27,
                            "col": 9,
                            "offset": 904
                        },
                        "end": {
                            "line": 27,
                            "col": 17,
                            "offset": 912
                        },
                        "abstract_content": "response"
                    }
                },
                "message": "The application does not appear to verify inbound requests which can lead to a Cross-site request forgery (CSRF) vulnerability. If the application uses cookie-based authentication, an attacker can trick users into sending authenticated HTTP requests without their knowledge from any arbitrary domain they visit. To prevent this vulnerability start by identifying if the framework or library leveraged has built-in features or offers plugins for CSRF protection. CSRF tokens should be unique and securely random. The `Synchronizer Token` or `Double Submit Cookie` patterns with defense-in-depth mechanisms such as the `sameSite` cookie flag can help prevent CSRF. For more information, see: [Cross-site request forgery prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.3 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "references": [
                        "https://stackoverflow.com/questions/42717210/samesite-cookie-in-java-application"
                    ],
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                    "shortlink": "https://sg.run/XR5b",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27164,
                            "rule_id": "WAUqW7",
                            "rule_name": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                            "rv_id": 947503,
                            "url": "https://semgrep.dev/playground/r/yeT0veP/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                            "version_id": "yeT0veP"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "a318b577c0caac9852d0261015b5a5fae205d1afb155cff60f74f1d60183d0299bb3b35b35753f42fd42b123bc515946e15e783aa3285e5b5fc9ddfbaa578e3c_0",
                "lines": "        response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
            "path": "src/main/java/org/joychou/controller/CRLFInjection.java",
            "start": {
                "line": 27,
                "col": 9,
                "offset": 904
            },
            "end": {
                "line": 27,
                "col": 36,
                "offset": 931
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 27,
                            "col": 9,
                            "offset": 904
                        },
                        "end": {
                            "line": 27,
                            "col": 17,
                            "offset": 912
                        },
                        "abstract_content": "response"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 27,
                            "col": 28,
                            "offset": 923
                        },
                        "end": {
                            "line": 27,
                            "col": 34,
                            "offset": 929
                        },
                        "abstract_content": "cookie",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 26,
                                "col": 25,
                                "offset": 867
                            },
                            "svalue_end": {
                                "line": 26,
                                "col": 52,
                                "offset": 894
                            },
                            "svalue_abstract_content": "new Cookie(\"test3\"author)"
                        }
                    }
                },
                "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.1 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
                    ],
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://owasp.org/www-community/controls/SecureCookieAttribute"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "shortlink": "https://sg.run/jW2J",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27165,
                            "rule_id": "0oUKLg",
                            "rule_name": "java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "rv_id": 947504,
                            "url": "https://semgrep.dev/playground/r/rxT6kN2/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "version_id": "rxT6kN2"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "8c4d32be0a1c8fb221421f544851a7fc642b508f58c838ca3613a90584d4f46124b85d8e76b533f6c301f5f225f190c267fc3a37aeb83008fe699d5c571a035f_0",
                "lines": "        response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/ClassDataLoader.java",
            "start": {
                "line": 15,
                "col": 6,
                "offset": 459
            },
            "end": {
                "line": 15,
                "col": 20,
                "offset": 473
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 16,
                            "col": 12,
                            "offset": 501
                        },
                        "end": {
                            "line": 16,
                            "col": 16,
                            "offset": 505
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 16,
                            "col": 17,
                            "offset": 506
                        },
                        "end": {
                            "line": 16,
                            "col": 26,
                            "offset": 515
                        },
                        "abstract_content": "classData"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "3520a5838bcb355a469101d512d3a991fcf48fd01edb07361916b73169de5c2466a6956d2f3fe8ed96e881750b21aff2ac64c29a5884c8d095ff74d81b5824d3_0",
                "lines": "    @RequestMapping(\"/classloader\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.command-injection.tainted-system-command.tainted-system-command",
            "path": "src/main/java/org/joychou/controller/CommandInject.java",
            "start": {
                "line": 28,
                "col": 53,
                "offset": 862
            },
            "end": {
                "line": 28,
                "col": 60,
                "offset": 869
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 11,
                            "offset": 10
                        },
                        "abstract_content": "GetMapping"
                    },
                    "$MAPPING": {
                        "start": {
                            "line": 24,
                            "col": 6,
                            "offset": 641
                        },
                        "end": {
                            "line": 24,
                            "col": 16,
                            "offset": 651
                        },
                        "abstract_content": "GetMapping"
                    },
                    "$RET": {
                        "start": {
                            "line": 25,
                            "col": 12,
                            "offset": 678
                        },
                        "end": {
                            "line": 25,
                            "col": 18,
                            "offset": 684
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 25,
                            "col": 19,
                            "offset": 685
                        },
                        "end": {
                            "line": 25,
                            "col": 29,
                            "offset": 695
                        },
                        "abstract_content": "codeInject"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 25,
                            "col": 19,
                            "offset": 685
                        },
                        "end": {
                            "line": 25,
                            "col": 29,
                            "offset": 695
                        },
                        "abstract_content": "codeInject"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 25,
                            "col": 30,
                            "offset": 696
                        },
                        "end": {
                            "line": 25,
                            "col": 36,
                            "offset": 702
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 25,
                            "col": 37,
                            "offset": 703
                        },
                        "end": {
                            "line": 25,
                            "col": 45,
                            "offset": 711
                        },
                        "abstract_content": "filepath"
                    },
                    "$CMD": {
                        "start": {
                            "line": 28,
                            "col": 53,
                            "offset": 862
                        },
                        "end": {
                            "line": 28,
                            "col": 60,
                            "offset": 869
                        },
                        "abstract_content": "cmdList"
                    }
                },
                "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands. For more information, see: [Java command injection prevention](https://semgrep.dev/docs/cheat-sheets/java-command-injection/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "OS Command Injection with Spring",
                    "functional-categories": [
                        "os::sink::os-command-or-thread",
                        "web::source::cookie::Spring",
                        "web::source::header::Spring",
                        "web::source::http-body::Spring",
                        "web::source::http-params::Spring",
                        "web::source::url-path-params::Spring"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "technology": [
                        "Spring",
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Command Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.command-injection.tainted-system-command.tainted-system-command",
                    "shortlink": "https://sg.run/Or5En",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 125031,
                            "rule_id": "BYUXGOg",
                            "rule_name": "java.spring.command-injection.tainted-system-command.tainted-system-command",
                            "rv_id": 973718,
                            "url": "https://semgrep.dev/playground/r/nWTpk7e/java.spring.command-injection.tainted-system-command.tainted-system-command",
                            "version_id": "nWTpk7e"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.command-injection.tainted-system-command.tainted-system-command",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "dc5837da72547f0f31c2ed09f6369bb975d866623b0dea7cbd959164ceae5a9b307b8e7b2730b66df2195f21bcc6fe619fa57cc3f49a1ed207adb0fc73306623_0",
                "lines": "        ProcessBuilder builder = new ProcessBuilder(cmdList);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 25,
                                    "col": 37,
                                    "offset": 703
                                },
                                "end": {
                                    "line": 25,
                                    "col": 45,
                                    "offset": 711
                                }
                            },
                            "filepath"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 25,
                                    "col": 37,
                                    "offset": 703
                                },
                                "end": {
                                    "line": 25,
                                    "col": 45,
                                    "offset": 711
                                }
                            },
                            "content": "filepath"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 27,
                                    "col": 18,
                                    "offset": 752
                                },
                                "end": {
                                    "line": 27,
                                    "col": 25,
                                    "offset": 759
                                }
                            },
                            "content": "cmdList"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 28,
                                    "col": 53,
                                    "offset": 862
                                },
                                "end": {
                                    "line": 28,
                                    "col": 60,
                                    "offset": 869
                                }
                            },
                            "cmdList"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
            "path": "src/main/java/org/joychou/controller/CommandInject.java",
            "start": {
                "line": 43,
                "col": 9,
                "offset": 1344
            },
            "end": {
                "line": 43,
                "col": 27,
                "offset": 1362
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 5,
                            "offset": 4
                        },
                        "abstract_content": "info"
                    },
                    "$REQ": {
                        "start": {
                            "line": 42,
                            "col": 23,
                            "offset": 1309
                        },
                        "end": {
                            "line": 42,
                            "col": 30,
                            "offset": 1316
                        },
                        "abstract_content": "request"
                    },
                    "$REQFUNC": {
                        "start": {
                            "line": 42,
                            "col": 31,
                            "offset": 1317
                        },
                        "end": {
                            "line": 42,
                            "col": 40,
                            "offset": 1326
                        },
                        "abstract_content": "getHeader"
                    },
                    "$LOG": {
                        "start": {
                            "line": 43,
                            "col": 9,
                            "offset": 1344
                        },
                        "end": {
                            "line": 43,
                            "col": 15,
                            "offset": 1350
                        },
                        "abstract_content": "logger",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 16,
                                "col": 37,
                                "offset": 446
                            },
                            "svalue_end": {
                                "line": 16,
                                "col": 77,
                                "offset": 486
                            },
                            "svalue_abstract_content": "LoggerFactory.getLogger(this.getClass())"
                        }
                    },
                    "$LEVEL": {
                        "start": {
                            "line": 43,
                            "col": 16,
                            "offset": 1351
                        },
                        "end": {
                            "line": 43,
                            "col": 20,
                            "offset": 1355
                        },
                        "abstract_content": "info"
                    }
                },
                "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "interfile": true,
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
                    ],
                    "functional-categories": [
                        "web::source::cookie::Servlet",
                        "web::source::http-params::Servlet",
                        "web::source::http-body::Servlet",
                        "web::source::header::Servlet",
                        "log::sink::log::log4j",
                        "log::sink::log::java.util"
                    ],
                    "owasp": [
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/117.html",
                        "https://cwe.mitre.org/data/definitions/93.html",
                        "https://owasp.org/www-community/attacks/Log_Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Improper Validation"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                    "shortlink": "https://sg.run/xGwy",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 40130,
                            "rule_id": "d8UbJq",
                            "rule_name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                            "rv_id": 947512,
                            "url": "https://semgrep.dev/playground/r/vdTG5dL/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                            "version_id": "vdTG5dL"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "6301475880f3876cad5755d1f471ca03f8d2b3fbb4bfb00b23e80b447c82bea8e1ec8c7f07eddfd9d97598ac1391e2f4b911e374c6506db92b85c26d4be75973_0",
                "lines": "        logger.info(host);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 42,
                                    "col": 23,
                                    "offset": 1309
                                },
                                "end": {
                                    "line": 42,
                                    "col": 48,
                                    "offset": 1334
                                }
                            },
                            "request.getHeader(\"host\")"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 42,
                                    "col": 16,
                                    "offset": 1302
                                },
                                "end": {
                                    "line": 42,
                                    "col": 20,
                                    "offset": 1306
                                }
                            },
                            "content": "host"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 43,
                                    "col": 9,
                                    "offset": 1344
                                },
                                "end": {
                                    "line": 43,
                                    "col": 27,
                                    "offset": 1362
                                }
                            },
                            "logger.info(host);"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
            "path": "src/main/java/org/joychou/controller/CommandInject.java",
            "start": {
                "line": 45,
                "col": 9,
                "offset": 1440
            },
            "end": {
                "line": 45,
                "col": 62,
                "offset": 1493
            },
            "extra": {
                "metavars": {
                    "$REQ": {
                        "start": {
                            "line": 42,
                            "col": 23,
                            "offset": 1309
                        },
                        "end": {
                            "line": 42,
                            "col": 30,
                            "offset": 1316
                        },
                        "abstract_content": "request"
                    },
                    "$PB": {
                        "start": {
                            "line": 45,
                            "col": 24,
                            "offset": 1455
                        },
                        "end": {
                            "line": 45,
                            "col": 31,
                            "offset": 1462
                        },
                        "abstract_content": "builder"
                    }
                },
                "message": "Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.",
                "metadata": {
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "cwe": [
                        "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Command Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                    "shortlink": "https://sg.run/8zPN",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 18240,
                            "rule_id": "zdUWrg",
                            "rule_name": "java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                            "rv_id": 945699,
                            "url": "https://semgrep.dev/playground/r/7ZTrQ5v/java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                            "version_id": "7ZTrQ5v"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "0abaeebd12e444f89a447ea1b2d990537d1aafb179d641837ac71fb9abdcf324b99caef6a1a6e327e006d8e63063bdf154b599f99e7abf1d1a19a0aab32f7e85_0",
                "lines": "        ProcessBuilder builder = new ProcessBuilder(cmdList);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 42,
                                    "col": 23,
                                    "offset": 1309
                                },
                                "end": {
                                    "line": 42,
                                    "col": 30,
                                    "offset": 1316
                                }
                            },
                            "request"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 42,
                                    "col": 16,
                                    "offset": 1302
                                },
                                "end": {
                                    "line": 42,
                                    "col": 20,
                                    "offset": 1306
                                }
                            },
                            "content": "host"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 44,
                                    "col": 18,
                                    "offset": 1380
                                },
                                "end": {
                                    "line": 44,
                                    "col": 25,
                                    "offset": 1387
                                }
                            },
                            "content": "cmdList"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 45,
                                    "col": 9,
                                    "offset": 1440
                                },
                                "end": {
                                    "line": 45,
                                    "col": 62,
                                    "offset": 1493
                                }
                            },
                            "ProcessBuilder builder = new ProcessBuilder(cmdList);"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
            "path": "src/main/java/org/joychou/controller/CommandInject.java",
            "start": {
                "line": 45,
                "col": 9,
                "offset": 1440
            },
            "end": {
                "line": 45,
                "col": 62,
                "offset": 1493
            },
            "extra": {
                "metavars": {
                    "$REQ": {
                        "start": {
                            "line": 42,
                            "col": 23,
                            "offset": 1309
                        },
                        "end": {
                            "line": 42,
                            "col": 30,
                            "offset": 1316
                        },
                        "abstract_content": "request"
                    },
                    "$REQFUNC": {
                        "start": {
                            "line": 42,
                            "col": 31,
                            "offset": 1317
                        },
                        "end": {
                            "line": 42,
                            "col": 40,
                            "offset": 1326
                        },
                        "abstract_content": "getHeader"
                    },
                    "$PB": {
                        "start": {
                            "line": 45,
                            "col": 24,
                            "offset": 1455
                        },
                        "end": {
                            "line": 45,
                            "col": 31,
                            "offset": 1462
                        },
                        "abstract_content": "builder"
                    }
                },
                "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent command injection, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. For more information, see [JavaScript command injection prevention](https://semgrep.dev/docs/cheat-sheets/java-command-injection/)",
                "metadata": {
                    "likelihood": "HIGH",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
                    ],
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "functional-categories": [
                        "web::source::cookie::Servlet",
                        "web::source::http-params::Servlet",
                        "web::source::http-body::Servlet",
                        "web::source::header::Servlet",
                        "web::source::session-properties::Servlet",
                        "web::source::url-path-params::Servlet",
                        "web::source::form-data::Servlet",
                        "os::sink::os-command-or-thread::lang"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/Command_Injection",
                        "https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html",
                        "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection",
                        "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-os-command-injection",
                        "https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fdata_handling~2Finjection~2Foscmd"
                    ],
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Command Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                    "shortlink": "https://sg.run/eGqy",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27176,
                            "rule_id": "DbUR6g",
                            "rule_name": "java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                            "rv_id": 1014871,
                            "url": "https://semgrep.dev/playground/r/rxT65D6/java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                            "version_id": "rxT65D6"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "CRITICAL",
                "fingerprint": "07f4505d1c049a51eec79bdd9658a42f335c6cfc3dd9944e6da2e67d9ef92ff9f9f0aa9d054426c033cfa94a96172a4b6f1125f1ff0892149edd1dd666277779_0",
                "lines": "        ProcessBuilder builder = new ProcessBuilder(cmdList);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 42,
                                    "col": 23,
                                    "offset": 1309
                                },
                                "end": {
                                    "line": 42,
                                    "col": 48,
                                    "offset": 1334
                                }
                            },
                            "request.getHeader(\"host\")"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 42,
                                    "col": 16,
                                    "offset": 1302
                                },
                                "end": {
                                    "line": 42,
                                    "col": 20,
                                    "offset": 1306
                                }
                            },
                            "content": "host"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 44,
                                    "col": 18,
                                    "offset": 1380
                                },
                                "end": {
                                    "line": 44,
                                    "col": 25,
                                    "offset": 1387
                                }
                            },
                            "content": "cmdList"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 45,
                                    "col": 9,
                                    "offset": 1440
                                },
                                "end": {
                                    "line": 45,
                                    "col": 62,
                                    "offset": 1493
                                }
                            },
                            "ProcessBuilder builder = new ProcessBuilder(cmdList);"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.tainted-cmd-from-http-request-deepsemgrep.tainted-cmd-from-http-request-deepsemgrep",
            "path": "src/main/java/org/joychou/controller/CommandInject.java",
            "start": {
                "line": 45,
                "col": 53,
                "offset": 1484
            },
            "end": {
                "line": 45,
                "col": 60,
                "offset": 1491
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 10,
                            "offset": 9
                        },
                        "abstract_content": "getHeader"
                    },
                    "$REQ": {
                        "start": {
                            "line": 42,
                            "col": 23,
                            "offset": 1309
                        },
                        "end": {
                            "line": 42,
                            "col": 30,
                            "offset": 1316
                        },
                        "abstract_content": "request"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 42,
                            "col": 31,
                            "offset": 1317
                        },
                        "end": {
                            "line": 42,
                            "col": 40,
                            "offset": 1326
                        },
                        "abstract_content": "getHeader"
                    },
                    "$CMD": {
                        "start": {
                            "line": 45,
                            "col": 53,
                            "offset": 1484
                        },
                        "end": {
                            "line": 45,
                            "col": 60,
                            "offset": 1491
                        },
                        "abstract_content": "cmdList"
                    }
                },
                "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands. For more information, see: [Java command injection prevention](https://semgrep.dev/docs/cheat-sheets/java-command-injection/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "OS Command Injection with Servlets",
                    "functional-categories": [
                        "os::sink::os-command-or-thread",
                        "web::source::cookie::Servlet",
                        "web::source::header::Servlet",
                        "web::source::http-body::Servlet",
                        "web::source::http-params::Servlet",
                        "web::source::url-path-params::Servlet"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Command Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.tainted-cmd-from-http-request-deepsemgrep.tainted-cmd-from-http-request-deepsemgrep",
                    "shortlink": "https://sg.run/dGW0",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 40134,
                            "rule_id": "7KUYkp",
                            "rule_name": "java.servlets.security.tainted-cmd-from-http-request-deepsemgrep.tainted-cmd-from-http-request-deepsemgrep",
                            "rv_id": 947523,
                            "url": "https://semgrep.dev/playground/r/44TZz8L/java.servlets.security.tainted-cmd-from-http-request-deepsemgrep.tainted-cmd-from-http-request-deepsemgrep",
                            "version_id": "44TZz8L"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.tainted-cmd-from-http-request-deepsemgrep.tainted-cmd-from-http-request-deepsemgrep",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "120dc79b04d1a046c4a7063fe05abf8830edb60d775f1d226b15fd6cbf8e2762253fbd7d9367408dffe1aae4ee0b52619c756a2c61a39c4162d4c8fea8c65356_0",
                "lines": "        ProcessBuilder builder = new ProcessBuilder(cmdList);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 42,
                                    "col": 23,
                                    "offset": 1309
                                },
                                "end": {
                                    "line": 42,
                                    "col": 48,
                                    "offset": 1334
                                }
                            },
                            "request.getHeader(\"host\")"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 42,
                                    "col": 16,
                                    "offset": 1302
                                },
                                "end": {
                                    "line": 42,
                                    "col": 20,
                                    "offset": 1306
                                }
                            },
                            "content": "host"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 44,
                                    "col": 18,
                                    "offset": 1380
                                },
                                "end": {
                                    "line": 44,
                                    "col": 25,
                                    "offset": 1387
                                }
                            },
                            "content": "cmdList"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 45,
                                    "col": 53,
                                    "offset": 1484
                                },
                                "end": {
                                    "line": 45,
                                    "col": 60,
                                    "offset": 1491
                                }
                            },
                            "cmdList"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
            "path": "src/main/java/org/joychou/controller/CommandInject.java",
            "start": {
                "line": 47,
                "col": 9,
                "offset": 1545
            },
            "end": {
                "line": 47,
                "col": 43,
                "offset": 1579
            },
            "extra": {
                "metavars": {
                    "$REQ": {
                        "start": {
                            "line": 42,
                            "col": 23,
                            "offset": 1309
                        },
                        "end": {
                            "line": 42,
                            "col": 30,
                            "offset": 1316
                        },
                        "abstract_content": "request"
                    },
                    "$P": {
                        "start": {
                            "line": 47,
                            "col": 17,
                            "offset": 1553
                        },
                        "end": {
                            "line": 47,
                            "col": 24,
                            "offset": 1560
                        },
                        "abstract_content": "process"
                    }
                },
                "message": "Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.",
                "metadata": {
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "cwe": [
                        "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Command Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                    "shortlink": "https://sg.run/8zPN",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 18240,
                            "rule_id": "zdUWrg",
                            "rule_name": "java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                            "rv_id": 945699,
                            "url": "https://semgrep.dev/playground/r/7ZTrQ5v/java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                            "version_id": "7ZTrQ5v"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "cebdc5e8848d036501e4d329abecae9d7b7d731e6d14c4a52d062ac4aded2fbd99b93ce19ec19112b139b74c287d7426147f5e84d28a2e53cae0cd39e817a007_0",
                "lines": "        Process process = builder.start();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 42,
                                    "col": 23,
                                    "offset": 1309
                                },
                                "end": {
                                    "line": 42,
                                    "col": 30,
                                    "offset": 1316
                                }
                            },
                            "request"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 42,
                                    "col": 16,
                                    "offset": 1302
                                },
                                "end": {
                                    "line": 42,
                                    "col": 20,
                                    "offset": 1306
                                }
                            },
                            "content": "host"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 44,
                                    "col": 18,
                                    "offset": 1380
                                },
                                "end": {
                                    "line": 44,
                                    "col": 25,
                                    "offset": 1387
                                }
                            },
                            "content": "cmdList"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 45,
                                    "col": 24,
                                    "offset": 1455
                                },
                                "end": {
                                    "line": 45,
                                    "col": 31,
                                    "offset": 1462
                                }
                            },
                            "content": "builder"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 47,
                                    "col": 9,
                                    "offset": 1545
                                },
                                "end": {
                                    "line": 47,
                                    "col": 43,
                                    "offset": 1579
                                }
                            },
                            "Process process = builder.start();"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
            "path": "src/main/java/org/joychou/controller/CommandInject.java",
            "start": {
                "line": 47,
                "col": 9,
                "offset": 1545
            },
            "end": {
                "line": 47,
                "col": 43,
                "offset": 1579
            },
            "extra": {
                "metavars": {
                    "$REQ": {
                        "start": {
                            "line": 42,
                            "col": 23,
                            "offset": 1309
                        },
                        "end": {
                            "line": 42,
                            "col": 30,
                            "offset": 1316
                        },
                        "abstract_content": "request"
                    },
                    "$REQFUNC": {
                        "start": {
                            "line": 42,
                            "col": 31,
                            "offset": 1317
                        },
                        "end": {
                            "line": 42,
                            "col": 40,
                            "offset": 1326
                        },
                        "abstract_content": "getHeader"
                    },
                    "$P": {
                        "start": {
                            "line": 47,
                            "col": 17,
                            "offset": 1553
                        },
                        "end": {
                            "line": 47,
                            "col": 24,
                            "offset": 1560
                        },
                        "abstract_content": "process"
                    }
                },
                "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent command injection, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. For more information, see [JavaScript command injection prevention](https://semgrep.dev/docs/cheat-sheets/java-command-injection/)",
                "metadata": {
                    "likelihood": "HIGH",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
                    ],
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "functional-categories": [
                        "web::source::cookie::Servlet",
                        "web::source::http-params::Servlet",
                        "web::source::http-body::Servlet",
                        "web::source::header::Servlet",
                        "web::source::session-properties::Servlet",
                        "web::source::url-path-params::Servlet",
                        "web::source::form-data::Servlet",
                        "os::sink::os-command-or-thread::lang"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/Command_Injection",
                        "https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html",
                        "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection",
                        "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-os-command-injection",
                        "https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fdata_handling~2Finjection~2Foscmd"
                    ],
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Command Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                    "shortlink": "https://sg.run/eGqy",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27176,
                            "rule_id": "DbUR6g",
                            "rule_name": "java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                            "rv_id": 1014871,
                            "url": "https://semgrep.dev/playground/r/rxT65D6/java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                            "version_id": "rxT65D6"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "CRITICAL",
                "fingerprint": "1e43f42460a2b8e221752d89dd71799da7c3190c814a0190e3090bbac42440739b9fc7f6be023ff24842656e3cf64fc44f1a1238580680302ebb30551aeaa30b_0",
                "lines": "        Process process = builder.start();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 42,
                                    "col": 23,
                                    "offset": 1309
                                },
                                "end": {
                                    "line": 42,
                                    "col": 48,
                                    "offset": 1334
                                }
                            },
                            "request.getHeader(\"host\")"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 42,
                                    "col": 16,
                                    "offset": 1302
                                },
                                "end": {
                                    "line": 42,
                                    "col": 20,
                                    "offset": 1306
                                }
                            },
                            "content": "host"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 44,
                                    "col": 18,
                                    "offset": 1380
                                },
                                "end": {
                                    "line": 44,
                                    "col": 25,
                                    "offset": 1387
                                }
                            },
                            "content": "cmdList"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 45,
                                    "col": 24,
                                    "offset": 1455
                                },
                                "end": {
                                    "line": 45,
                                    "col": 31,
                                    "offset": 1462
                                }
                            },
                            "content": "builder"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 47,
                                    "col": 9,
                                    "offset": 1545
                                },
                                "end": {
                                    "line": 47,
                                    "col": 43,
                                    "offset": 1579
                                }
                            },
                            "Process process = builder.start();"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.command-injection.tainted-system-command.tainted-system-command",
            "path": "src/main/java/org/joychou/controller/CommandInject.java",
            "start": {
                "line": 58,
                "col": 53,
                "offset": 2052
            },
            "end": {
                "line": 58,
                "col": 60,
                "offset": 2059
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 11,
                            "offset": 10
                        },
                        "abstract_content": "GetMapping"
                    },
                    "$MAPPING": {
                        "start": {
                            "line": 51,
                            "col": 6,
                            "offset": 1665
                        },
                        "end": {
                            "line": 51,
                            "col": 16,
                            "offset": 1675
                        },
                        "abstract_content": "GetMapping"
                    },
                    "$RET": {
                        "start": {
                            "line": 52,
                            "col": 12,
                            "offset": 1706
                        },
                        "end": {
                            "line": 52,
                            "col": 18,
                            "offset": 1712
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 52,
                            "col": 19,
                            "offset": 1713
                        },
                        "end": {
                            "line": 52,
                            "col": 32,
                            "offset": 1726
                        },
                        "abstract_content": "codeInjectSec"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 52,
                            "col": 19,
                            "offset": 1713
                        },
                        "end": {
                            "line": 52,
                            "col": 32,
                            "offset": 1726
                        },
                        "abstract_content": "codeInjectSec"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 52,
                            "col": 33,
                            "offset": 1727
                        },
                        "end": {
                            "line": 52,
                            "col": 39,
                            "offset": 1733
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 52,
                            "col": 40,
                            "offset": 1734
                        },
                        "end": {
                            "line": 52,
                            "col": 48,
                            "offset": 1742
                        },
                        "abstract_content": "filepath"
                    },
                    "$CMD": {
                        "start": {
                            "line": 58,
                            "col": 53,
                            "offset": 2052
                        },
                        "end": {
                            "line": 58,
                            "col": 60,
                            "offset": 2059
                        },
                        "abstract_content": "cmdList"
                    }
                },
                "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands. For more information, see: [Java command injection prevention](https://semgrep.dev/docs/cheat-sheets/java-command-injection/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "OS Command Injection with Spring",
                    "functional-categories": [
                        "os::sink::os-command-or-thread",
                        "web::source::cookie::Spring",
                        "web::source::header::Spring",
                        "web::source::http-body::Spring",
                        "web::source::http-params::Spring",
                        "web::source::url-path-params::Spring"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "technology": [
                        "Spring",
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Command Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.command-injection.tainted-system-command.tainted-system-command",
                    "shortlink": "https://sg.run/Or5En",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 125031,
                            "rule_id": "BYUXGOg",
                            "rule_name": "java.spring.command-injection.tainted-system-command.tainted-system-command",
                            "rv_id": 973718,
                            "url": "https://semgrep.dev/playground/r/nWTpk7e/java.spring.command-injection.tainted-system-command.tainted-system-command",
                            "version_id": "nWTpk7e"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.command-injection.tainted-system-command.tainted-system-command",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "84caacdeb22e81c948396ab312fd5ef213c3b6f3f1de4da9c81fffcf612f65e0dab3cb19484559a2f5ff7e529b39e87f6535f5325e66b7cbc3dcffbf5f48ec57_0",
                "lines": "        ProcessBuilder builder = new ProcessBuilder(cmdList);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 52,
                                    "col": 40,
                                    "offset": 1734
                                },
                                "end": {
                                    "line": 52,
                                    "col": 48,
                                    "offset": 1742
                                }
                            },
                            "filepath"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 52,
                                    "col": 40,
                                    "offset": 1734
                                },
                                "end": {
                                    "line": 52,
                                    "col": 48,
                                    "offset": 1742
                                }
                            },
                            "content": "filepath"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 53,
                                    "col": 16,
                                    "offset": 1780
                                },
                                "end": {
                                    "line": 53,
                                    "col": 30,
                                    "offset": 1794
                                }
                            },
                            "content": "filterFilePath"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 57,
                                    "col": 18,
                                    "offset": 1936
                                },
                                "end": {
                                    "line": 57,
                                    "col": 25,
                                    "offset": 1943
                                }
                            },
                            "content": "cmdList"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/CommandInject.java",
                                "start": {
                                    "line": 58,
                                    "col": 53,
                                    "offset": 2052
                                },
                                "end": {
                                    "line": 58,
                                    "col": 60,
                                    "offset": 2059
                                }
                            },
                            "cmdList"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.permissive-cors.permissive-cors",
            "path": "src/main/java/org/joychou/controller/Cors.java",
            "start": {
                "line": 33,
                "col": 5,
                "offset": 1159
            },
            "end": {
                "line": 38,
                "col": 6,
                "offset": 1470
            },
            "extra": {
                "metavars": {
                    "$X": {
                        "start": {
                            "line": 34,
                            "col": 12,
                            "offset": 1201
                        },
                        "end": {
                            "line": 34,
                            "col": 18,
                            "offset": 1207
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 34,
                            "col": 19,
                            "offset": 1208
                        },
                        "end": {
                            "line": 34,
                            "col": 24,
                            "offset": 1213
                        },
                        "abstract_content": "vuls2"
                    },
                    "$RES": {
                        "start": {
                            "line": 34,
                            "col": 45,
                            "offset": 1234
                        },
                        "end": {
                            "line": 34,
                            "col": 53,
                            "offset": 1242
                        },
                        "abstract_content": "response"
                    }
                },
                "message": "https://find-sec-bugs.github.io/bugs.htm#PERMISSIVE_CORS Permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks.",
                "metadata": {
                    "cwe": [
                        "CWE-183: Permissive List of Allowed Inputs"
                    ],
                    "asvs": {
                        "control_id": "14.4.8 Permissive CORS",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x22-V14-Config.md#v144-http-security-headers-requirements",
                        "section": "V14: Configuration Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "owasp": [
                        "A04:2021 - Insecure Design"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A04_2021-Insecure_Design"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Improper Validation"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.permissive-cors.permissive-cors",
                    "shortlink": "https://sg.run/8y77",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9184,
                            "rule_id": "BYUN66",
                            "rule_name": "java.lang.security.audit.permissive-cors.permissive-cors",
                            "rv_id": 945690,
                            "url": "https://semgrep.dev/playground/r/w8TKJ02/java.lang.security.audit.permissive-cors.permissive-cors",
                            "version_id": "w8TKJ02"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.permissive-cors.permissive-cors",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "bb9a1fb55aed8d28a3d79746ca48e1d93c1c697766f52aa2130c7061ac1d2020ccb10f9798f950b51f1e0dd3e3567933157dbc4b2cbbd47346a70a53471e3be6_0",
                "lines": "    @GetMapping(\"/vuln/setHeader\")\n    public String vuls2(HttpServletResponse response) {\n        // 后端设置Access-Control-Allow-Origin为*的情况下，跨域的时候前端如果设置withCredentials为true会异常\n        response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        return info;\n    }",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Cors.java",
            "start": {
                "line": 42,
                "col": 6,
                "offset": 1499
            },
            "end": {
                "line": 42,
                "col": 20,
                "offset": 1513
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 43,
                            "col": 12,
                            "offset": 1546
                        },
                        "end": {
                            "line": 43,
                            "col": 18,
                            "offset": 1552
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 43,
                            "col": 19,
                            "offset": 1553
                        },
                        "end": {
                            "line": 43,
                            "col": 24,
                            "offset": 1558
                        },
                        "abstract_content": "vuls3"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "968784f4678abb8c693c44aedb2c80205e5d6b430261c1b49b47679af653cb3c3a1a2fd877b1ae987e723ce12d7a7ed6ae1c590b01f1f7e5a8be8b42000d8790_0",
                "lines": "    @RequestMapping(\"/vuln/crossOrigin\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Cors.java",
            "start": {
                "line": 98,
                "col": 6,
                "offset": 2983
            },
            "end": {
                "line": 98,
                "col": 20,
                "offset": 2997
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 99,
                            "col": 12,
                            "offset": 3028
                        },
                        "end": {
                            "line": 99,
                            "col": 21,
                            "offset": 3037
                        },
                        "abstract_content": "CsrfToken"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 99,
                            "col": 22,
                            "offset": 3038
                        },
                        "end": {
                            "line": 99,
                            "col": 37,
                            "offset": 3053
                        },
                        "abstract_content": "getCsrfToken_04"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "d8e601ad6827fa2c06200d2044df6e4426da5a23cefdcf97ba079fdc78e6c5958975f7fad3fda8345bda83b23a6bbc14c862f3cc93e874f0c45f0ca456e4921a_0",
                "lines": "    @RequestMapping(\"/sec/corsFilter\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Deserialize.java",
            "start": {
                "line": 36,
                "col": 6,
                "offset": 1141
            },
            "end": {
                "line": 36,
                "col": 20,
                "offset": 1155
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 37,
                            "col": 12,
                            "offset": 1187
                        },
                        "end": {
                            "line": 37,
                            "col": 18,
                            "offset": 1193
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 37,
                            "col": 19,
                            "offset": 1194
                        },
                        "end": {
                            "line": 37,
                            "col": 32,
                            "offset": 1207
                        },
                        "abstract_content": "rememberMeVul"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "af4fcdb7d5679b8cbadf949d01049c4a99e9a68fb817f7ad2698c906c8c46d0d1dcb4323cc17c89ba3880d43e3f6463d2933279613a9a0bae800254df3c6a445_0",
                "lines": "    @RequestMapping(\"/rememberMe/vuln\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.object-deserialization.object-deserialization",
            "path": "src/main/java/org/joychou/controller/Deserialize.java",
            "start": {
                "line": 49,
                "col": 9,
                "offset": 1653
            },
            "end": {
                "line": 49,
                "col": 61,
                "offset": 1705
            },
            "extra": {
                "metavars": {},
                "message": "Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object.",
                "metadata": {
                    "cwe": [
                        "CWE-502: Deserialization of Untrusted Data"
                    ],
                    "owasp": [
                        "A08:2017 - Insecure Deserialization",
                        "A08:2021 - Software and Data Integrity Failures"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#OBJECT_DESERIALIZATION",
                    "references": [
                        "https://www.owasp.org/index.php/Deserialization_of_untrusted_data",
                        "https://www.oracle.com/java/technologies/javase/seccodeguide.html#8"
                    ],
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Insecure Deserialization "
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.object-deserialization.object-deserialization",
                    "shortlink": "https://sg.run/Ek0A",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9181,
                            "rule_id": "GdU7py",
                            "rule_name": "java.lang.security.audit.object-deserialization.object-deserialization",
                            "rv_id": 945687,
                            "url": "https://semgrep.dev/playground/r/bZTXw4q/java.lang.security.audit.object-deserialization.object-deserialization",
                            "version_id": "bZTXw4q"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.object-deserialization.object-deserialization",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "8180d64137e02844e5592763c6b98f22ced9cf33ec9f03ae49b52142d9698cdfff6e09a0ead1ec6039ac6d25d415cd1bc548acc77a35ce04bdd3fb2971e187b9_0",
                "lines": "        ObjectInputStream in = new ObjectInputStream(bytes);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Deserialize.java",
            "start": {
                "line": 61,
                "col": 6,
                "offset": 2366
            },
            "end": {
                "line": 61,
                "col": 20,
                "offset": 2380
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 62,
                            "col": 12,
                            "offset": 2416
                        },
                        "end": {
                            "line": 62,
                            "col": 18,
                            "offset": 2422
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 62,
                            "col": 19,
                            "offset": 2423
                        },
                        "end": {
                            "line": 62,
                            "col": 44,
                            "offset": 2448
                        },
                        "abstract_content": "rememberMeBlackClassCheck"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "c3904a5a39efea36ade39e581f03623604ad6dc214e69a61700b98ffab4e37752aa2b0be3dd63b6b3f8b9c815b0653da870426e7f642a4b6eab61c4605577096_0",
                "lines": "    @RequestMapping(\"/rememberMe/security\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Deserialize.java",
            "start": {
                "line": 88,
                "col": 6,
                "offset": 3355
            },
            "end": {
                "line": 88,
                "col": 20,
                "offset": 3369
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 89,
                            "col": 12,
                            "offset": 3393
                        },
                        "end": {
                            "line": 89,
                            "col": 16,
                            "offset": 3397
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 89,
                            "col": 17,
                            "offset": 3398
                        },
                        "end": {
                            "line": 89,
                            "col": 24,
                            "offset": 3405
                        },
                        "abstract_content": "Jackson"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "514b44b254a5488503abae2a926cb30d9dbc769c0c49cddd11c73963e2322beea929b78c4bb8edbef928aa7a58077c66117afbbcbac67060aebb1a6e03c6957c_0",
                "lines": "    @RequestMapping(\"/jackson\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization",
            "path": "src/main/java/org/joychou/controller/Deserialize.java",
            "start": {
                "line": 93,
                "col": 13,
                "offset": 3538
            },
            "end": {
                "line": 93,
                "col": 66,
                "offset": 3591
            },
            "extra": {
                "metavars": {
                    "$OM": {
                        "start": {
                            "line": 93,
                            "col": 26,
                            "offset": 3551
                        },
                        "end": {
                            "line": 93,
                            "col": 32,
                            "offset": 3557
                        },
                        "abstract_content": "mapper"
                    },
                    "$JSON": {
                        "start": {
                            "line": 93,
                            "col": 43,
                            "offset": 3568
                        },
                        "end": {
                            "line": 93,
                            "col": 50,
                            "offset": 3575
                        },
                        "abstract_content": "payload"
                    }
                },
                "message": "When using Jackson to marshall/unmarshall JSON to Java objects, enabling default typing is dangerous and can lead to RCE. If an attacker can control `payload` it might be possible to provide a malicious JSON which can be used to exploit unsecure deserialization. In order to prevent this issue, avoid to enable default typing (globally or by using \"Per-class\" annotations) and avoid using `Object` and other dangerous types for member variable declaration which creating classes for Jackson based deserialization.",
                "metadata": {
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "cwe": [
                        "CWE-502: Deserialization of Untrusted Data"
                    ],
                    "confidence": "MEDIUM",
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "owasp": [
                        "A8:2017 Insecure Deserialization",
                        "A8:2021 Software and Data Integrity Failures"
                    ],
                    "references": [
                        "https://swapneildash.medium.com/understanding-insecure-implementation-of-jackson-deserialization-7b3d409d2038",
                        "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
                        "https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/"
                    ],
                    "technology": [
                        "jackson"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Insecure Deserialization "
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization",
                    "shortlink": "https://sg.run/GDop",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 56948,
                            "rule_id": "QrUD20",
                            "rule_name": "java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization",
                            "rv_id": 945724,
                            "url": "https://semgrep.dev/playground/r/2KTYbA9/java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization",
                            "version_id": "2KTYbA9"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "073aab0cbb19cca0455a1ffba203a426ccad79a8ac77daeaa7bbb40f0ec90666a6fe3cc7a25a1833f0f392b77b9b335b157cce2887979bf6f6dc53a45a65e582_0",
                "lines": "            Object obj = mapper.readValue(payload, Object.class);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "path": "src/main/java/org/joychou/controller/Deserialize.java",
            "start": {
                "line": 96,
                "col": 13,
                "offset": 3682
            },
            "end": {
                "line": 96,
                "col": 32,
                "offset": 3701
            },
            "extra": {
                "metavars": {
                    "$EXCEPTION": {
                        "start": {
                            "line": 96,
                            "col": 13,
                            "offset": 3682
                        },
                        "end": {
                            "line": 96,
                            "col": 14,
                            "offset": 3683
                        },
                        "abstract_content": "e"
                    }
                },
                "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "cwe": [
                        "CWE-489: Active Debug Code"
                    ],
                    "functional-categories": [
                        "debug::search::active-debug-code::java.lang"
                    ],
                    "owasp": [
                        "A10:2004 - Insecure Configuration Management",
                        "A06:2017 - Security Misconfiguration",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/489.html",
                        "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/",
                        "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces",
                        "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Active Debug Code"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "shortlink": "https://sg.run/4K8z",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27144,
                            "rule_id": "v8U0rZ",
                            "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "rv_id": 947426,
                            "url": "https://semgrep.dev/playground/r/GxTP0lB/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "version_id": "GxTP0lB"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "69d5181753ff55ab38681c38fd2bd91deb5eff50de756cea9c2caa5fa8be2c41f1a17c36f44f951ed316c6554df7a243651c9a12754e9e842b6ab342457a568d_0",
                "lines": "            e.printStackTrace();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.injection.tainted-file-path.tainted-file-path",
            "path": "src/main/java/org/joychou/controller/FileUpload.java",
            "start": {
                "line": 62,
                "col": 25,
                "offset": 1859
            },
            "end": {
                "line": 62,
                "col": 80,
                "offset": 1914
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 13,
                            "offset": 12
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 51,
                            "col": 19,
                            "offset": 1345
                        },
                        "end": {
                            "line": 51,
                            "col": 35,
                            "offset": 1361
                        },
                        "abstract_content": "singleFileUpload"
                    },
                    "$REQ": {
                        "start": {
                            "line": 51,
                            "col": 37,
                            "offset": 1363
                        },
                        "end": {
                            "line": 51,
                            "col": 49,
                            "offset": 1375
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 51,
                            "col": 58,
                            "offset": 1384
                        },
                        "end": {
                            "line": 51,
                            "col": 71,
                            "offset": 1397
                        },
                        "abstract_content": "MultipartFile"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 51,
                            "col": 72,
                            "offset": 1398
                        },
                        "end": {
                            "line": 51,
                            "col": 76,
                            "offset": 1402
                        },
                        "abstract_content": "file"
                    },
                    "$PATHS": {
                        "start": {
                            "line": 62,
                            "col": 25,
                            "offset": 1859
                        },
                        "end": {
                            "line": 62,
                            "col": 30,
                            "offset": 1864
                        },
                        "abstract_content": "Paths"
                    }
                },
                "message": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.",
                "metadata": {
                    "cwe": [
                        "CWE-23: Relative Path Traversal"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/Path_Traversal"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "spring"
                    ],
                    "subcategory": [
                        "vuln"
                    ],
                    "impact": "HIGH",
                    "likelihood": "MEDIUM",
                    "confidence": "HIGH",
                    "interfile": true,
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Path Traversal"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path",
                    "shortlink": "https://sg.run/x9o0",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 22074,
                            "rule_id": "lBUxok",
                            "rule_name": "java.spring.security.injection.tainted-file-path.tainted-file-path",
                            "rv_id": 945743,
                            "url": "https://semgrep.dev/playground/r/7ZTrQwv/java.spring.security.injection.tainted-file-path.tainted-file-path",
                            "version_id": "7ZTrQwv"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "986473d108bcb1289bf6f8a49f7bd9feeda558d4c3b5016f654ff5dcc9cb2b161b97217acb7fd14b512e535d3b714b75c24e2c5763a53c26bb373d24bd2481f3_0",
                "lines": "            Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 51,
                                    "col": 72,
                                    "offset": 1398
                                },
                                "end": {
                                    "line": 51,
                                    "col": 76,
                                    "offset": 1402
                                }
                            },
                            "file"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 51,
                                    "col": 72,
                                    "offset": 1398
                                },
                                "end": {
                                    "line": 51,
                                    "col": 76,
                                    "offset": 1402
                                }
                            },
                            "content": "file"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 62,
                                    "col": 25,
                                    "offset": 1859
                                },
                                "end": {
                                    "line": 62,
                                    "col": 80,
                                    "offset": 1914
                                }
                            },
                            "Paths.get(UPLOADED_FOLDER + file.getOriginalFilename())"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.injection.tainted-file-path.tainted-file-path",
            "path": "src/main/java/org/joychou/controller/FileUpload.java",
            "start": {
                "line": 144,
                "col": 25,
                "offset": 4787
            },
            "end": {
                "line": 144,
                "col": 85,
                "offset": 4847
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 13,
                            "offset": 12
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 84,
                            "col": 19,
                            "offset": 2530
                        },
                        "end": {
                            "line": 84,
                            "col": 32,
                            "offset": 2543
                        },
                        "abstract_content": "uploadPicture"
                    },
                    "$REQ": {
                        "start": {
                            "line": 84,
                            "col": 34,
                            "offset": 2545
                        },
                        "end": {
                            "line": 84,
                            "col": 46,
                            "offset": 2557
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 84,
                            "col": 55,
                            "offset": 2566
                        },
                        "end": {
                            "line": 84,
                            "col": 68,
                            "offset": 2579
                        },
                        "abstract_content": "MultipartFile"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 84,
                            "col": 69,
                            "offset": 2580
                        },
                        "end": {
                            "line": 84,
                            "col": 78,
                            "offset": 2589
                        },
                        "abstract_content": "multifile"
                    },
                    "$PATHS": {
                        "start": {
                            "line": 144,
                            "col": 25,
                            "offset": 4787
                        },
                        "end": {
                            "line": 144,
                            "col": 30,
                            "offset": 4792
                        },
                        "abstract_content": "Paths Paths Paths Paths"
                    }
                },
                "message": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.",
                "metadata": {
                    "cwe": [
                        "CWE-23: Relative Path Traversal"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/Path_Traversal"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "spring"
                    ],
                    "subcategory": [
                        "vuln"
                    ],
                    "impact": "HIGH",
                    "likelihood": "MEDIUM",
                    "confidence": "HIGH",
                    "interfile": true,
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Path Traversal"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path",
                    "shortlink": "https://sg.run/x9o0",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 22074,
                            "rule_id": "lBUxok",
                            "rule_name": "java.spring.security.injection.tainted-file-path.tainted-file-path",
                            "rv_id": 945743,
                            "url": "https://semgrep.dev/playground/r/7ZTrQwv/java.spring.security.injection.tainted-file-path.tainted-file-path",
                            "version_id": "7ZTrQwv"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "9884cf8f40c3444c8694f0cb61f91ac94c39b5a0c7ef0bf1ad500bc519e3cf8749710c43170ee80495d277a2e6abb6f6ffaf4bd139e3ed2d35836b12444a0302_0",
                "lines": "            Path path = Paths.get(UPLOADED_FOLDER + multifile.getOriginalFilename());",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 84,
                                    "col": 69,
                                    "offset": 2580
                                },
                                "end": {
                                    "line": 84,
                                    "col": 78,
                                    "offset": 2589
                                }
                            },
                            "multifile"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 84,
                                    "col": 69,
                                    "offset": 2580
                                },
                                "end": {
                                    "line": 84,
                                    "col": 78,
                                    "offset": 2589
                                }
                            },
                            "content": "multifile"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 144,
                                    "col": 25,
                                    "offset": 4787
                                },
                                "end": {
                                    "line": 144,
                                    "col": 85,
                                    "offset": 4847
                                }
                            },
                            "Paths.get(UPLOADED_FOLDER + multifile.getOriginalFilename())"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.injection.tainted-file-path.tainted-file-path",
            "path": "src/main/java/org/joychou/controller/FileUpload.java",
            "start": {
                "line": 158,
                "col": 24,
                "offset": 5334
            },
            "end": {
                "line": 158,
                "col": 42,
                "offset": 5352
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 13,
                            "offset": 12
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 84,
                            "col": 19,
                            "offset": 2530
                        },
                        "end": {
                            "line": 84,
                            "col": 32,
                            "offset": 2543
                        },
                        "abstract_content": "uploadPicture"
                    },
                    "$REQ": {
                        "start": {
                            "line": 84,
                            "col": 34,
                            "offset": 2545
                        },
                        "end": {
                            "line": 84,
                            "col": 46,
                            "offset": 2557
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 84,
                            "col": 55,
                            "offset": 2566
                        },
                        "end": {
                            "line": 84,
                            "col": 68,
                            "offset": 2579
                        },
                        "abstract_content": "MultipartFile"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 84,
                            "col": 69,
                            "offset": 2580
                        },
                        "end": {
                            "line": 84,
                            "col": 78,
                            "offset": 2589
                        },
                        "abstract_content": "multifile"
                    }
                },
                "message": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.",
                "metadata": {
                    "cwe": [
                        "CWE-23: Relative Path Traversal"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/Path_Traversal"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "spring"
                    ],
                    "subcategory": [
                        "vuln"
                    ],
                    "impact": "HIGH",
                    "likelihood": "MEDIUM",
                    "confidence": "HIGH",
                    "interfile": true,
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Path Traversal"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path",
                    "shortlink": "https://sg.run/x9o0",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 22074,
                            "rule_id": "lBUxok",
                            "rule_name": "java.spring.security.injection.tainted-file-path.tainted-file-path",
                            "rv_id": 945743,
                            "url": "https://semgrep.dev/playground/r/7ZTrQwv/java.spring.security.injection.tainted-file-path.tainted-file-path",
                            "version_id": "7ZTrQwv"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "bd8010faf45f4faf30b4107d603ce3fe890a2ce78a6e71b1600273b53c735a632edcc77b89e8614991cd2139ad5c93649f59db4532f0f8b05d2fc833cdfc332a_0",
                "lines": "        File delFile = new File(filePath);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 84,
                                    "col": 69,
                                    "offset": 2580
                                },
                                "end": {
                                    "line": 84,
                                    "col": 78,
                                    "offset": 2589
                                }
                            },
                            "multifile"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 84,
                                    "col": 69,
                                    "offset": 2580
                                },
                                "end": {
                                    "line": 84,
                                    "col": 78,
                                    "offset": 2589
                                }
                            },
                            "content": "multifile"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 89,
                                    "col": 16,
                                    "offset": 2724
                                },
                                "end": {
                                    "line": 89,
                                    "col": 24,
                                    "offset": 2732
                                }
                            },
                            "content": "fileName"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 92,
                                    "col": 16,
                                    "offset": 2953
                                },
                                "end": {
                                    "line": 92,
                                    "col": 24,
                                    "offset": 2961
                                }
                            },
                            "content": "filePath"
                        }
                    ],
                    "taint_sink": [
                        "CliCall",
                        [
                            [
                                {
                                    "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                    "start": {
                                        "line": 107,
                                        "col": 13,
                                        "offset": 3513
                                    },
                                    "end": {
                                        "line": 107,
                                        "col": 23,
                                        "offset": 3523
                                    }
                                },
                                "deleteFile"
                            ],
                            [
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 157,
                                            "col": 36,
                                            "offset": 5299
                                        },
                                        "end": {
                                            "line": 157,
                                            "col": 44,
                                            "offset": 5307
                                        }
                                    },
                                    "content": "filePath"
                                }
                            ],
                            [
                                "CliLoc",
                                [
                                    {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 158,
                                            "col": 24,
                                            "offset": 5334
                                        },
                                        "end": {
                                            "line": 158,
                                            "col": 42,
                                            "offset": 5352
                                        }
                                    },
                                    "new File(filePath)"
                                ]
                            ]
                        ]
                    ]
                },
                "engine_kind": [
                    "PRO_REQUIRED",
                    {
                        "interproc_taint": true,
                        "interfile_taint": false,
                        "proprietary_language": false
                    }
                ]
            }
        },
        {
            "check_id": "java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
            "path": "src/main/java/org/joychou/controller/FileUpload.java",
            "start": {
                "line": 158,
                "col": 33,
                "offset": 5343
            },
            "end": {
                "line": 158,
                "col": 41,
                "offset": 5351
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 13,
                            "offset": 12
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$RET": {
                        "start": {
                            "line": 84,
                            "col": 12,
                            "offset": 2523
                        },
                        "end": {
                            "line": 84,
                            "col": 18,
                            "offset": 2529
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 84,
                            "col": 19,
                            "offset": 2530
                        },
                        "end": {
                            "line": 84,
                            "col": 32,
                            "offset": 2543
                        },
                        "abstract_content": "uploadPicture"
                    },
                    "$REQ": {
                        "start": {
                            "line": 84,
                            "col": 34,
                            "offset": 2545
                        },
                        "end": {
                            "line": 84,
                            "col": 46,
                            "offset": 2557
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 84,
                            "col": 55,
                            "offset": 2566
                        },
                        "end": {
                            "line": 84,
                            "col": 68,
                            "offset": 2579
                        },
                        "abstract_content": "MultipartFile"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 84,
                            "col": 69,
                            "offset": 2580
                        },
                        "end": {
                            "line": 84,
                            "col": 78,
                            "offset": 2589
                        },
                        "abstract_content": "multifile"
                    },
                    "$FILE": {
                        "start": {
                            "line": 158,
                            "col": 33,
                            "offset": 5343
                        },
                        "end": {
                            "line": 158,
                            "col": 41,
                            "offset": 5351
                        },
                        "abstract_content": "filePath"
                    }
                },
                "message": "The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files. In Java, you may also consider using a utility method such as `org.apache.commons.io.FilenameUtils.getName(...)` to only retrieve the file name from the path.",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "Path Traversal with Spring",
                    "functional-categories": [
                        "file::sink::file-access::commons-io",
                        "file::sink::file-access::java.io",
                        "file::sink::file-access::java.xml",
                        "file::sink::file-access::spring",
                        "web::source::cookie::Spring",
                        "web::source::header::Spring",
                        "web::source::http-body::Spring",
                        "web::source::http-params::Spring",
                        "web::source::url-path-params::Spring"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control",
                        "A05:2017 - Broken Access Control"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A01_2021-Broken_Access_Control",
                        "https://owasp.org/www-community/attacks/Path_Traversal",
                        "https://portswigger.net/web-security/file-path-traversal",
                        "https://www.stackhawk.com/blog/spring-path-traversal-guide-examples-and-prevention/"
                    ],
                    "technology": [
                        "Spring",
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Path Traversal"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                    "shortlink": "https://sg.run/Pqzq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 72945,
                            "rule_id": "yyUr8r",
                            "rule_name": "java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                            "rv_id": 973742,
                            "url": "https://semgrep.dev/playground/r/5PT9E5x/java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                            "version_id": "5PT9E5x"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "f14efc07b0f6a8572d9d54630f4582a690b483b0088b64b055d7d6e46deb8f82801ffae8f7cbe8fe2370d39131636054559e1e2d4555ccb5ea527cf076a6f887_0",
                "lines": "        File delFile = new File(filePath);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 84,
                                    "col": 69,
                                    "offset": 2580
                                },
                                "end": {
                                    "line": 84,
                                    "col": 78,
                                    "offset": 2589
                                }
                            },
                            "multifile"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 84,
                                    "col": 69,
                                    "offset": 2580
                                },
                                "end": {
                                    "line": 84,
                                    "col": 78,
                                    "offset": 2589
                                }
                            },
                            "content": "multifile"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 89,
                                    "col": 16,
                                    "offset": 2724
                                },
                                "end": {
                                    "line": 89,
                                    "col": 24,
                                    "offset": 2732
                                }
                            },
                            "content": "fileName"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 92,
                                    "col": 16,
                                    "offset": 2953
                                },
                                "end": {
                                    "line": 92,
                                    "col": 24,
                                    "offset": 2961
                                }
                            },
                            "content": "filePath"
                        }
                    ],
                    "taint_sink": [
                        "CliCall",
                        [
                            [
                                {
                                    "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                    "start": {
                                        "line": 107,
                                        "col": 13,
                                        "offset": 3513
                                    },
                                    "end": {
                                        "line": 107,
                                        "col": 23,
                                        "offset": 3523
                                    }
                                },
                                "deleteFile"
                            ],
                            [
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 157,
                                            "col": 36,
                                            "offset": 5299
                                        },
                                        "end": {
                                            "line": 157,
                                            "col": 44,
                                            "offset": 5307
                                        }
                                    },
                                    "content": "filePath"
                                }
                            ],
                            [
                                "CliLoc",
                                [
                                    {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 158,
                                            "col": 33,
                                            "offset": 5343
                                        },
                                        "end": {
                                            "line": 158,
                                            "col": 41,
                                            "offset": 5351
                                        }
                                    },
                                    "filePath"
                                ]
                            ]
                        ]
                    ]
                },
                "engine_kind": [
                    "PRO_REQUIRED",
                    {
                        "interproc_taint": true,
                        "interfile_taint": false,
                        "proprietary_language": false
                    }
                ]
            }
        },
        {
            "check_id": "java.spring.security.injection.tainted-file-path.tainted-file-path",
            "path": "src/main/java/org/joychou/controller/FileUpload.java",
            "start": {
                "line": 180,
                "col": 25,
                "offset": 6242
            },
            "end": {
                "line": 180,
                "col": 49,
                "offset": 6266
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 13,
                            "offset": 12
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 84,
                            "col": 19,
                            "offset": 2530
                        },
                        "end": {
                            "line": 84,
                            "col": 32,
                            "offset": 2543
                        },
                        "abstract_content": "uploadPicture"
                    },
                    "$REQ": {
                        "start": {
                            "line": 84,
                            "col": 34,
                            "offset": 2545
                        },
                        "end": {
                            "line": 84,
                            "col": 46,
                            "offset": 2557
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 84,
                            "col": 55,
                            "offset": 2566
                        },
                        "end": {
                            "line": 84,
                            "col": 68,
                            "offset": 2579
                        },
                        "abstract_content": "MultipartFile"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 84,
                            "col": 69,
                            "offset": 2580
                        },
                        "end": {
                            "line": 84,
                            "col": 78,
                            "offset": 2589
                        },
                        "abstract_content": "multifile"
                    }
                },
                "message": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.",
                "metadata": {
                    "cwe": [
                        "CWE-23: Relative Path Traversal"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/Path_Traversal"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "spring"
                    ],
                    "subcategory": [
                        "vuln"
                    ],
                    "impact": "HIGH",
                    "likelihood": "MEDIUM",
                    "confidence": "HIGH",
                    "interfile": true,
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Path Traversal"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path",
                    "shortlink": "https://sg.run/x9o0",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 22074,
                            "rule_id": "lBUxok",
                            "rule_name": "java.spring.security.injection.tainted-file-path.tainted-file-path",
                            "rv_id": 945743,
                            "url": "https://semgrep.dev/playground/r/7ZTrQwv/java.spring.security.injection.tainted-file-path.tainted-file-path",
                            "version_id": "7ZTrQwv"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "bd8010faf45f4faf30b4107d603ce3fe890a2ce78a6e71b1600273b53c735a632edcc77b89e8614991cd2139ad5c93649f59db4532f0f8b05d2fc833cdfc332a_1",
                "lines": "        File convFile = new File(randomFilePath);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 84,
                                    "col": 69,
                                    "offset": 2580
                                },
                                "end": {
                                    "line": 84,
                                    "col": 78,
                                    "offset": 2589
                                }
                            },
                            "multifile"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 84,
                                    "col": 69,
                                    "offset": 2580
                                },
                                "end": {
                                    "line": 84,
                                    "col": 78,
                                    "offset": 2589
                                }
                            },
                            "content": "multifile"
                        }
                    ],
                    "taint_sink": [
                        "CliCall",
                        [
                            [
                                {
                                    "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                    "start": {
                                        "line": 93,
                                        "col": 26,
                                        "offset": 3017
                                    },
                                    "end": {
                                        "line": 93,
                                        "col": 33,
                                        "offset": 3024
                                    }
                                },
                                "convert"
                            ],
                            [
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 174,
                                            "col": 40,
                                            "offset": 5885
                                        },
                                        "end": {
                                            "line": 174,
                                            "col": 49,
                                            "offset": 5894
                                        }
                                    },
                                    "content": "multiFile"
                                },
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 175,
                                            "col": 16,
                                            "offset": 5930
                                        },
                                        "end": {
                                            "line": 175,
                                            "col": 24,
                                            "offset": 5938
                                        }
                                    },
                                    "content": "fileName"
                                },
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 176,
                                            "col": 16,
                                            "offset": 5989
                                        },
                                        "end": {
                                            "line": 176,
                                            "col": 22,
                                            "offset": 5995
                                        }
                                    },
                                    "content": "suffix"
                                },
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 178,
                                            "col": 9,
                                            "offset": 6117
                                        },
                                        "end": {
                                            "line": 178,
                                            "col": 23,
                                            "offset": 6131
                                        }
                                    },
                                    "content": "randomFilePath"
                                }
                            ],
                            [
                                "CliLoc",
                                [
                                    {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 180,
                                            "col": 25,
                                            "offset": 6242
                                        },
                                        "end": {
                                            "line": 180,
                                            "col": 49,
                                            "offset": 6266
                                        }
                                    },
                                    "new File(randomFilePath)"
                                ]
                            ]
                        ]
                    ]
                },
                "engine_kind": [
                    "PRO_REQUIRED",
                    {
                        "interproc_taint": true,
                        "interfile_taint": false,
                        "proprietary_language": false
                    }
                ]
            }
        },
        {
            "check_id": "java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
            "path": "src/main/java/org/joychou/controller/FileUpload.java",
            "start": {
                "line": 180,
                "col": 34,
                "offset": 6251
            },
            "end": {
                "line": 180,
                "col": 48,
                "offset": 6265
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 13,
                            "offset": 12
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$RET": {
                        "start": {
                            "line": 84,
                            "col": 12,
                            "offset": 2523
                        },
                        "end": {
                            "line": 84,
                            "col": 18,
                            "offset": 2529
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 84,
                            "col": 19,
                            "offset": 2530
                        },
                        "end": {
                            "line": 84,
                            "col": 32,
                            "offset": 2543
                        },
                        "abstract_content": "uploadPicture"
                    },
                    "$REQ": {
                        "start": {
                            "line": 84,
                            "col": 34,
                            "offset": 2545
                        },
                        "end": {
                            "line": 84,
                            "col": 46,
                            "offset": 2557
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 84,
                            "col": 55,
                            "offset": 2566
                        },
                        "end": {
                            "line": 84,
                            "col": 68,
                            "offset": 2579
                        },
                        "abstract_content": "MultipartFile"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 84,
                            "col": 69,
                            "offset": 2580
                        },
                        "end": {
                            "line": 84,
                            "col": 78,
                            "offset": 2589
                        },
                        "abstract_content": "multifile"
                    },
                    "$FILE": {
                        "start": {
                            "line": 180,
                            "col": 34,
                            "offset": 6251
                        },
                        "end": {
                            "line": 180,
                            "col": 48,
                            "offset": 6265
                        },
                        "abstract_content": "randomFilePath",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 178,
                                "col": 26,
                                "offset": 6134
                            },
                            "svalue_end": {
                                "line": 178,
                                "col": 57,
                                "offset": 6165
                            },
                            "svalue_abstract_content": "UPLOADED_FOLDER+uuid+suffix"
                        }
                    }
                },
                "message": "The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files. In Java, you may also consider using a utility method such as `org.apache.commons.io.FilenameUtils.getName(...)` to only retrieve the file name from the path.",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "Path Traversal with Spring",
                    "functional-categories": [
                        "file::sink::file-access::commons-io",
                        "file::sink::file-access::java.io",
                        "file::sink::file-access::java.xml",
                        "file::sink::file-access::spring",
                        "web::source::cookie::Spring",
                        "web::source::header::Spring",
                        "web::source::http-body::Spring",
                        "web::source::http-params::Spring",
                        "web::source::url-path-params::Spring"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control",
                        "A05:2017 - Broken Access Control"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A01_2021-Broken_Access_Control",
                        "https://owasp.org/www-community/attacks/Path_Traversal",
                        "https://portswigger.net/web-security/file-path-traversal",
                        "https://www.stackhawk.com/blog/spring-path-traversal-guide-examples-and-prevention/"
                    ],
                    "technology": [
                        "Spring",
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Path Traversal"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                    "shortlink": "https://sg.run/Pqzq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 72945,
                            "rule_id": "yyUr8r",
                            "rule_name": "java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                            "rv_id": 973742,
                            "url": "https://semgrep.dev/playground/r/5PT9E5x/java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                            "version_id": "5PT9E5x"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "b8aec7ec02bd1bb5be6ccb191e1c2336380aeb783ccd6a844cd771d2d0541b5b73b8ade3457b42190368deec763a8b0a3b45d5a7dc670537d3844b18b682032a_0",
                "lines": "        File convFile = new File(randomFilePath);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 84,
                                    "col": 69,
                                    "offset": 2580
                                },
                                "end": {
                                    "line": 84,
                                    "col": 78,
                                    "offset": 2589
                                }
                            },
                            "multifile"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 84,
                                    "col": 69,
                                    "offset": 2580
                                },
                                "end": {
                                    "line": 84,
                                    "col": 78,
                                    "offset": 2589
                                }
                            },
                            "content": "multifile"
                        }
                    ],
                    "taint_sink": [
                        "CliCall",
                        [
                            [
                                {
                                    "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                    "start": {
                                        "line": 93,
                                        "col": 26,
                                        "offset": 3017
                                    },
                                    "end": {
                                        "line": 93,
                                        "col": 33,
                                        "offset": 3024
                                    }
                                },
                                "convert"
                            ],
                            [
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 174,
                                            "col": 40,
                                            "offset": 5885
                                        },
                                        "end": {
                                            "line": 174,
                                            "col": 49,
                                            "offset": 5894
                                        }
                                    },
                                    "content": "multiFile"
                                },
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 175,
                                            "col": 16,
                                            "offset": 5930
                                        },
                                        "end": {
                                            "line": 175,
                                            "col": 24,
                                            "offset": 5938
                                        }
                                    },
                                    "content": "fileName"
                                },
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 176,
                                            "col": 16,
                                            "offset": 5989
                                        },
                                        "end": {
                                            "line": 176,
                                            "col": 22,
                                            "offset": 5995
                                        }
                                    },
                                    "content": "suffix"
                                },
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 178,
                                            "col": 9,
                                            "offset": 6117
                                        },
                                        "end": {
                                            "line": 178,
                                            "col": 23,
                                            "offset": 6131
                                        }
                                    },
                                    "content": "randomFilePath"
                                }
                            ],
                            [
                                "CliLoc",
                                [
                                    {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 180,
                                            "col": 34,
                                            "offset": 6251
                                        },
                                        "end": {
                                            "line": 180,
                                            "col": 48,
                                            "offset": 6265
                                        }
                                    },
                                    "randomFilePath"
                                ]
                            ]
                        ]
                    ]
                },
                "engine_kind": [
                    "PRO_REQUIRED",
                    {
                        "interproc_taint": true,
                        "interfile_taint": false,
                        "proprietary_language": false
                    }
                ]
            }
        },
        {
            "check_id": "java.spring.security.injection.tainted-file-path.tainted-file-path",
            "path": "src/main/java/org/joychou/controller/FileUpload.java",
            "start": {
                "line": 185,
                "col": 53,
                "offset": 6423
            },
            "end": {
                "line": 185,
                "col": 61,
                "offset": 6431
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 13,
                            "offset": 12
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 84,
                            "col": 19,
                            "offset": 2530
                        },
                        "end": {
                            "line": 84,
                            "col": 32,
                            "offset": 2543
                        },
                        "abstract_content": "uploadPicture"
                    },
                    "$REQ": {
                        "start": {
                            "line": 84,
                            "col": 34,
                            "offset": 2545
                        },
                        "end": {
                            "line": 84,
                            "col": 46,
                            "offset": 2557
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 84,
                            "col": 55,
                            "offset": 2566
                        },
                        "end": {
                            "line": 84,
                            "col": 68,
                            "offset": 2579
                        },
                        "abstract_content": "MultipartFile"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 84,
                            "col": 69,
                            "offset": 2580
                        },
                        "end": {
                            "line": 84,
                            "col": 78,
                            "offset": 2589
                        },
                        "abstract_content": "multifile"
                    },
                    "$FILE": {
                        "start": {
                            "line": 185,
                            "col": 53,
                            "offset": 6423
                        },
                        "end": {
                            "line": 185,
                            "col": 61,
                            "offset": 6431
                        },
                        "abstract_content": "convFile",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 180,
                                "col": 25,
                                "offset": 6242
                            },
                            "svalue_end": {
                                "line": 180,
                                "col": 49,
                                "offset": 6266
                            },
                            "svalue_abstract_content": "new File(randomFilePath)"
                        }
                    }
                },
                "message": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.",
                "metadata": {
                    "cwe": [
                        "CWE-23: Relative Path Traversal"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/Path_Traversal"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "spring"
                    ],
                    "subcategory": [
                        "vuln"
                    ],
                    "impact": "HIGH",
                    "likelihood": "MEDIUM",
                    "confidence": "HIGH",
                    "interfile": true,
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Path Traversal"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path",
                    "shortlink": "https://sg.run/x9o0",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 22074,
                            "rule_id": "lBUxok",
                            "rule_name": "java.spring.security.injection.tainted-file-path.tainted-file-path",
                            "rv_id": 945743,
                            "url": "https://semgrep.dev/playground/r/7ZTrQwv/java.spring.security.injection.tainted-file-path.tainted-file-path",
                            "version_id": "7ZTrQwv"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "b189f1f14e8dbb7e0556ccd319bad1f9fe6c8a53c861b4a71f5943726a61bd54d63f38183a217144ef4816fe3b10c1375d0158ff5a3e37039671fcf4a4844255_0",
                "lines": "        FileOutputStream fos = new FileOutputStream(convFile);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 84,
                                    "col": 69,
                                    "offset": 2580
                                },
                                "end": {
                                    "line": 84,
                                    "col": 78,
                                    "offset": 2589
                                }
                            },
                            "multifile"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 84,
                                    "col": 69,
                                    "offset": 2580
                                },
                                "end": {
                                    "line": 84,
                                    "col": 78,
                                    "offset": 2589
                                }
                            },
                            "content": "multifile"
                        }
                    ],
                    "taint_sink": [
                        "CliCall",
                        [
                            [
                                {
                                    "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                    "start": {
                                        "line": 93,
                                        "col": 26,
                                        "offset": 3017
                                    },
                                    "end": {
                                        "line": 93,
                                        "col": 33,
                                        "offset": 3024
                                    }
                                },
                                "convert"
                            ],
                            [
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 174,
                                            "col": 40,
                                            "offset": 5885
                                        },
                                        "end": {
                                            "line": 174,
                                            "col": 49,
                                            "offset": 5894
                                        }
                                    },
                                    "content": "multiFile"
                                },
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 175,
                                            "col": 16,
                                            "offset": 5930
                                        },
                                        "end": {
                                            "line": 175,
                                            "col": 24,
                                            "offset": 5938
                                        }
                                    },
                                    "content": "fileName"
                                },
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 176,
                                            "col": 16,
                                            "offset": 5989
                                        },
                                        "end": {
                                            "line": 176,
                                            "col": 22,
                                            "offset": 5995
                                        }
                                    },
                                    "content": "suffix"
                                },
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 178,
                                            "col": 9,
                                            "offset": 6117
                                        },
                                        "end": {
                                            "line": 178,
                                            "col": 23,
                                            "offset": 6131
                                        }
                                    },
                                    "content": "randomFilePath"
                                },
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 180,
                                            "col": 14,
                                            "offset": 6231
                                        },
                                        "end": {
                                            "line": 180,
                                            "col": 22,
                                            "offset": 6239
                                        }
                                    },
                                    "content": "convFile"
                                }
                            ],
                            [
                                "CliLoc",
                                [
                                    {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 185,
                                            "col": 53,
                                            "offset": 6423
                                        },
                                        "end": {
                                            "line": 185,
                                            "col": 61,
                                            "offset": 6431
                                        }
                                    },
                                    "convFile"
                                ]
                            ]
                        ]
                    ]
                },
                "engine_kind": [
                    "PRO_REQUIRED",
                    {
                        "interproc_taint": true,
                        "interfile_taint": false,
                        "proprietary_language": false
                    }
                ]
            }
        },
        {
            "check_id": "java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
            "path": "src/main/java/org/joychou/controller/FileUpload.java",
            "start": {
                "line": 185,
                "col": 53,
                "offset": 6423
            },
            "end": {
                "line": 185,
                "col": 61,
                "offset": 6431
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 13,
                            "offset": 12
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$RET": {
                        "start": {
                            "line": 84,
                            "col": 12,
                            "offset": 2523
                        },
                        "end": {
                            "line": 84,
                            "col": 18,
                            "offset": 2529
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 84,
                            "col": 19,
                            "offset": 2530
                        },
                        "end": {
                            "line": 84,
                            "col": 32,
                            "offset": 2543
                        },
                        "abstract_content": "uploadPicture"
                    },
                    "$REQ": {
                        "start": {
                            "line": 84,
                            "col": 34,
                            "offset": 2545
                        },
                        "end": {
                            "line": 84,
                            "col": 46,
                            "offset": 2557
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 84,
                            "col": 55,
                            "offset": 2566
                        },
                        "end": {
                            "line": 84,
                            "col": 68,
                            "offset": 2579
                        },
                        "abstract_content": "MultipartFile"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 84,
                            "col": 69,
                            "offset": 2580
                        },
                        "end": {
                            "line": 84,
                            "col": 78,
                            "offset": 2589
                        },
                        "abstract_content": "multifile"
                    },
                    "$FILE": {
                        "start": {
                            "line": 185,
                            "col": 53,
                            "offset": 6423
                        },
                        "end": {
                            "line": 185,
                            "col": 61,
                            "offset": 6431
                        },
                        "abstract_content": "convFile",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 180,
                                "col": 25,
                                "offset": 6242
                            },
                            "svalue_end": {
                                "line": 180,
                                "col": 49,
                                "offset": 6266
                            },
                            "svalue_abstract_content": "new File(randomFilePath)"
                        }
                    }
                },
                "message": "The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files. In Java, you may also consider using a utility method such as `org.apache.commons.io.FilenameUtils.getName(...)` to only retrieve the file name from the path.",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "Path Traversal with Spring",
                    "functional-categories": [
                        "file::sink::file-access::commons-io",
                        "file::sink::file-access::java.io",
                        "file::sink::file-access::java.xml",
                        "file::sink::file-access::spring",
                        "web::source::cookie::Spring",
                        "web::source::header::Spring",
                        "web::source::http-body::Spring",
                        "web::source::http-params::Spring",
                        "web::source::url-path-params::Spring"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control",
                        "A05:2017 - Broken Access Control"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A01_2021-Broken_Access_Control",
                        "https://owasp.org/www-community/attacks/Path_Traversal",
                        "https://portswigger.net/web-security/file-path-traversal",
                        "https://www.stackhawk.com/blog/spring-path-traversal-guide-examples-and-prevention/"
                    ],
                    "technology": [
                        "Spring",
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Path Traversal"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                    "shortlink": "https://sg.run/Pqzq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 72945,
                            "rule_id": "yyUr8r",
                            "rule_name": "java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                            "rv_id": 973742,
                            "url": "https://semgrep.dev/playground/r/5PT9E5x/java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                            "version_id": "5PT9E5x"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "3f49f6baf00a19881c328d0846505c6a07d31dff37a6835f4d8c8a81d5c886a5cc24c6a61eb363c5cb8b128382665bf00ae3d16e7a9701a2123643b978645cd3_0",
                "lines": "        FileOutputStream fos = new FileOutputStream(convFile);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 84,
                                    "col": 69,
                                    "offset": 2580
                                },
                                "end": {
                                    "line": 84,
                                    "col": 78,
                                    "offset": 2589
                                }
                            },
                            "multifile"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                "start": {
                                    "line": 84,
                                    "col": 69,
                                    "offset": 2580
                                },
                                "end": {
                                    "line": 84,
                                    "col": 78,
                                    "offset": 2589
                                }
                            },
                            "content": "multifile"
                        }
                    ],
                    "taint_sink": [
                        "CliCall",
                        [
                            [
                                {
                                    "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                    "start": {
                                        "line": 93,
                                        "col": 26,
                                        "offset": 3017
                                    },
                                    "end": {
                                        "line": 93,
                                        "col": 33,
                                        "offset": 3024
                                    }
                                },
                                "convert"
                            ],
                            [
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 174,
                                            "col": 40,
                                            "offset": 5885
                                        },
                                        "end": {
                                            "line": 174,
                                            "col": 49,
                                            "offset": 5894
                                        }
                                    },
                                    "content": "multiFile"
                                },
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 175,
                                            "col": 16,
                                            "offset": 5930
                                        },
                                        "end": {
                                            "line": 175,
                                            "col": 24,
                                            "offset": 5938
                                        }
                                    },
                                    "content": "fileName"
                                },
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 176,
                                            "col": 16,
                                            "offset": 5989
                                        },
                                        "end": {
                                            "line": 176,
                                            "col": 22,
                                            "offset": 5995
                                        }
                                    },
                                    "content": "suffix"
                                },
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 178,
                                            "col": 9,
                                            "offset": 6117
                                        },
                                        "end": {
                                            "line": 178,
                                            "col": 23,
                                            "offset": 6131
                                        }
                                    },
                                    "content": "randomFilePath"
                                },
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 180,
                                            "col": 14,
                                            "offset": 6231
                                        },
                                        "end": {
                                            "line": 180,
                                            "col": 22,
                                            "offset": 6239
                                        }
                                    },
                                    "content": "convFile"
                                }
                            ],
                            [
                                "CliLoc",
                                [
                                    {
                                        "path": "src/main/java/org/joychou/controller/FileUpload.java",
                                        "start": {
                                            "line": 185,
                                            "col": 53,
                                            "offset": 6423
                                        },
                                        "end": {
                                            "line": 185,
                                            "col": 61,
                                            "offset": 6431
                                        }
                                    },
                                    "convFile"
                                ]
                            ]
                        ]
                    ]
                },
                "engine_kind": [
                    "PRO_REQUIRED",
                    {
                        "interproc_taint": true,
                        "interfile_taint": false,
                        "proprietary_language": false
                    }
                ]
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/IPForge.java",
            "start": {
                "line": 20,
                "col": 6,
                "offset": 526
            },
            "end": {
                "line": 20,
                "col": 20,
                "offset": 540
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 21,
                            "col": 19,
                            "offset": 571
                        },
                        "end": {
                            "line": 21,
                            "col": 25,
                            "offset": 577
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 21,
                            "col": 26,
                            "offset": 578
                        },
                        "end": {
                            "line": 21,
                            "col": 33,
                            "offset": 585
                        },
                        "abstract_content": "noProxy"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "5d73b6bcaa10d3ab1637fd21113aff2a6cb151a4d2746ff92488bfec281e12be355a7be329485997f2477d546a12382a05970de5b56f1c0110b799890843ecde_0",
                "lines": "    @RequestMapping(\"/noproxy\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/IPForge.java",
            "start": {
                "line": 31,
                "col": 6,
                "offset": 876
            },
            "end": {
                "line": 31,
                "col": 20,
                "offset": 890
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 33,
                            "col": 19,
                            "offset": 937
                        },
                        "end": {
                            "line": 33,
                            "col": 25,
                            "offset": 943
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 33,
                            "col": 26,
                            "offset": 944
                        },
                        "end": {
                            "line": 33,
                            "col": 31,
                            "offset": 949
                        },
                        "abstract_content": "proxy"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "91616ba86b9744fe05e6114cd49355347e16a8323b24d402fe54f897f14c6dff6dc99b402a8658a695e54142da7a4c17e74dc35ed60a56e3b00ccb8fd2a10860_0",
                "lines": "    @RequestMapping(\"/proxy\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Index.java",
            "start": {
                "line": 24,
                "col": 6,
                "offset": 515
            },
            "end": {
                "line": 24,
                "col": 20,
                "offset": 529
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 26,
                            "col": 19,
                            "offset": 578
                        },
                        "end": {
                            "line": 26,
                            "col": 25,
                            "offset": 584
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 26,
                            "col": 26,
                            "offset": 585
                        },
                        "end": {
                            "line": 26,
                            "col": 33,
                            "offset": 592
                        },
                        "abstract_content": "appInfo"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "2b79db1ed2da001afa7d1797d71a3d5d3855c4846586ddb129cf5d566f6542d420bceeb95bc1620bb328a6b9c878126ea737f8c8fcb6a4ba7cc305823efe4b67_0",
                "lines": "    @RequestMapping(\"/appInfo\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Index.java",
            "start": {
                "line": 41,
                "col": 6,
                "offset": 1117
            },
            "end": {
                "line": 41,
                "col": 20,
                "offset": 1131
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 42,
                            "col": 12,
                            "offset": 1148
                        },
                        "end": {
                            "line": 42,
                            "col": 18,
                            "offset": 1154
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 42,
                            "col": 19,
                            "offset": 1155
                        },
                        "end": {
                            "line": 42,
                            "col": 27,
                            "offset": 1163
                        },
                        "abstract_content": "redirect"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "a9d35609c445d5da9a7e7d8e1d3c72785d895fd062e491e474c32fe0add999a4cfd865da7ab16b0b91196caa5deeb78569dbdb715b585d41fae4c6ad36b6af31_0",
                "lines": "    @RequestMapping(\"/\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Index.java",
            "start": {
                "line": 46,
                "col": 6,
                "offset": 1214
            },
            "end": {
                "line": 46,
                "col": 20,
                "offset": 1228
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 47,
                            "col": 19,
                            "offset": 1257
                        },
                        "end": {
                            "line": 47,
                            "col": 25,
                            "offset": 1263
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 47,
                            "col": 26,
                            "offset": 1264
                        },
                        "end": {
                            "line": 47,
                            "col": 31,
                            "offset": 1269
                        },
                        "abstract_content": "index"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "a12b28ce0d5baf943546da194a9e752daa9d3aaa17a37dd3c48c5c5a462d6568433f1b5622e6528baab513d6e963cbcddc8b7b6e81e2f69f373d822d87a23c09_0",
                "lines": "    @RequestMapping(\"/index\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Jdbc.java",
            "start": {
                "line": 20,
                "col": 6,
                "offset": 447
            },
            "end": {
                "line": 20,
                "col": 20,
                "offset": 461
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 21,
                            "col": 12,
                            "offset": 488
                        },
                        "end": {
                            "line": 21,
                            "col": 16,
                            "offset": 492
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 21,
                            "col": 17,
                            "offset": 493
                        },
                        "end": {
                            "line": 21,
                            "col": 27,
                            "offset": 503
                        },
                        "abstract_content": "postgresql"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "9516545d7494cd3954ad4eb01c43e99e6633fb0fdc01cfb099371b3fe613885324ebb5f8bb667c868734f87773d81622bad5d01fc0c3390a26c986ddd4d63f5d_0",
                "lines": "    @RequestMapping(\"/postgresql\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Jdbc.java",
            "start": {
                "line": 28,
                "col": 6,
                "offset": 741
            },
            "end": {
                "line": 28,
                "col": 20,
                "offset": 755
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 29,
                            "col": 12,
                            "offset": 775
                        },
                        "end": {
                            "line": 29,
                            "col": 16,
                            "offset": 779
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 29,
                            "col": 17,
                            "offset": 780
                        },
                        "end": {
                            "line": 29,
                            "col": 20,
                            "offset": 783
                        },
                        "abstract_content": "db2"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "ef4b54f6b4f59915582c4b931e934e96fb5e21b704e1c86cbee55d089f493a6750b52af72faec87277ded55e21c13dd408884c8e0b52d8d7c3b6e9fbf0376a85_0",
                "lines": "    @RequestMapping(\"/db2\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Jsonp.java",
            "start": {
                "line": 44,
                "col": 6,
                "offset": 1354
            },
            "end": {
                "line": 44,
                "col": 20,
                "offset": 1368
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 45,
                            "col": 12,
                            "offset": 1442
                        },
                        "end": {
                            "line": 45,
                            "col": 18,
                            "offset": 1448
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 45,
                            "col": 19,
                            "offset": 1449
                        },
                        "end": {
                            "line": 45,
                            "col": 26,
                            "offset": 1456
                        },
                        "abstract_content": "referer"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "ce066a68feeb640662e1660d7ad2a70458cf27b5111ad1f875932bce23490152c1092a986151b6960d7fed0f27017890704b5781dab31a2a70230ec180b3c5e0_0",
                "lines": "    @RequestMapping(value = \"/vuln/referer\", produces = \"application/javascript\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Jsonp.java",
            "start": {
                "line": 56,
                "col": 6,
                "offset": 1875
            },
            "end": {
                "line": 56,
                "col": 20,
                "offset": 1889
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 57,
                            "col": 12,
                            "offset": 1968
                        },
                        "end": {
                            "line": 57,
                            "col": 18,
                            "offset": 1974
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 57,
                            "col": 19,
                            "offset": 1975
                        },
                        "end": {
                            "line": 57,
                            "col": 31,
                            "offset": 1987
                        },
                        "abstract_content": "emptyReferer"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "a4d3eb31f6aef84f1c35400f4259a09946ba9c18d8c9ec217a491d51fb56f4589622d40bae6c5df05158ef58e995fb5c850093a0ad0bde730e35af2d03521bec_0",
                "lines": "    @RequestMapping(value = \"/vuln/emptyReferer\", produces = \"application/javascript\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Jsonp.java",
            "start": {
                "line": 75,
                "col": 6,
                "offset": 2741
            },
            "end": {
                "line": 75,
                "col": 20,
                "offset": 2755
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 76,
                            "col": 12,
                            "offset": 2837
                        },
                        "end": {
                            "line": 76,
                            "col": 22,
                            "offset": 2847
                        },
                        "abstract_content": "JSONObject"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 76,
                            "col": 23,
                            "offset": 2848
                        },
                        "end": {
                            "line": 76,
                            "col": 29,
                            "offset": 2854
                        },
                        "abstract_content": "advice"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "fe81b79ca40c004ad50871079e3ff2cc6f749b28e13f6657748f1fa235a4ff5df2d3cc4ce8112721020c89adb09154cac408341ff03d4ddd419727993ff3afea_0",
                "lines": "    @RequestMapping(value = \"/object2jsonp\", produces = MediaType.APPLICATION_JSON_VALUE)",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Jsonp.java",
            "start": {
                "line": 88,
                "col": 6,
                "offset": 3278
            },
            "end": {
                "line": 88,
                "col": 20,
                "offset": 3292
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 89,
                            "col": 12,
                            "offset": 3390
                        },
                        "end": {
                            "line": 89,
                            "col": 24,
                            "offset": 3402
                        },
                        "abstract_content": "ModelAndView"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 89,
                            "col": 25,
                            "offset": 3403
                        },
                        "end": {
                            "line": 89,
                            "col": 48,
                            "offset": 3426
                        },
                        "abstract_content": "mappingJackson2JsonView"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "71a55ec243bb94d95cf0cb381003073b78b5712b929ee34ebce43c8acca741b3c386304b4145d98d41d97ffcb75bf2549156adabf17ac93c63e9c8cff191dbaa_0",
                "lines": "    @RequestMapping(value = \"/vuln/mappingJackson2JsonView\", produces = MediaType.APPLICATION_JSON_VALUE)",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Jsonp.java",
            "start": {
                "line": 101,
                "col": 6,
                "offset": 3763
            },
            "end": {
                "line": 101,
                "col": 20,
                "offset": 3777
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 102,
                            "col": 12,
                            "offset": 3855
                        },
                        "end": {
                            "line": 102,
                            "col": 18,
                            "offset": 3861
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 102,
                            "col": 19,
                            "offset": 3862
                        },
                        "end": {
                            "line": 102,
                            "col": 27,
                            "offset": 3870
                        },
                        "abstract_content": "safecode"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "894135f90bf36d7b43e434e96a65a48083ee53d69e13c1a3dfc883db23b8a4047a44c758de000292c2937bc9ad8c1251d5d2c70d3b76b989d5d87cc6df5b5b9e_0",
                "lines": "    @RequestMapping(value = \"/sec/checkReferer\", produces = \"application/javascript\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
            "path": "src/main/java/org/joychou/controller/Jwt.java",
            "start": {
                "line": 45,
                "col": 9,
                "offset": 1433
            },
            "end": {
                "line": 45,
                "col": 36,
                "offset": 1460
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 45,
                            "col": 9,
                            "offset": 1433
                        },
                        "end": {
                            "line": 45,
                            "col": 17,
                            "offset": 1441
                        },
                        "abstract_content": "response"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 45,
                            "col": 28,
                            "offset": 1452
                        },
                        "end": {
                            "line": 45,
                            "col": 34,
                            "offset": 1458
                        },
                        "abstract_content": "cookie"
                    }
                },
                "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
                "metadata": {
                    "cwe": [
                        "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE",
                    "asvs": {
                        "control_id": "3.4.2 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "shortlink": "https://sg.run/b7Be",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9170,
                            "rule_id": "EwU2z6",
                            "rule_name": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "rv_id": 945651,
                            "url": "https://semgrep.dev/playground/r/5PT9OYP/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "version_id": "5PT9OYP"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "622d7503c2bf34858ffd996334f9939bfe9464227be2b24d7f9767027c45957cae0f3be3b2b9b65eba6b313103453c49bcd85cefe6891499215f30c0ab1b1357_0",
                "lines": "        response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
            "path": "src/main/java/org/joychou/controller/Jwt.java",
            "start": {
                "line": 45,
                "col": 9,
                "offset": 1433
            },
            "end": {
                "line": 45,
                "col": 36,
                "offset": 1460
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 45,
                            "col": 9,
                            "offset": 1433
                        },
                        "end": {
                            "line": 45,
                            "col": 17,
                            "offset": 1441
                        },
                        "abstract_content": "response"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 45,
                            "col": 28,
                            "offset": 1452
                        },
                        "end": {
                            "line": 45,
                            "col": 34,
                            "offset": 1458
                        },
                        "abstract_content": "cookie"
                    }
                },
                "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.2 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
                    ],
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://owasp.org/www-community/HttpOnly"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "shortlink": "https://sg.run/2WZD",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27163,
                            "rule_id": "DbUR6k",
                            "rule_name": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "rv_id": 947502,
                            "url": "https://semgrep.dev/playground/r/9lTyO6k/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "version_id": "9lTyO6k"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "4be99e3a8da89e6998f3f4250598b71d3ce5282b84d9f21af454d0c209e0b706a846421fe710c223cb47a2d64d54d9d45963b165827f234b7634d530a98fe06e_0",
                "lines": "        response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
            "path": "src/main/java/org/joychou/controller/Jwt.java",
            "start": {
                "line": 45,
                "col": 9,
                "offset": 1433
            },
            "end": {
                "line": 45,
                "col": 36,
                "offset": 1460
            },
            "extra": {
                "metavars": {
                    "$RESP": {
                        "start": {
                            "line": 45,
                            "col": 9,
                            "offset": 1433
                        },
                        "end": {
                            "line": 45,
                            "col": 17,
                            "offset": 1441
                        },
                        "abstract_content": "response"
                    }
                },
                "message": "The application does not appear to verify inbound requests which can lead to a Cross-site request forgery (CSRF) vulnerability. If the application uses cookie-based authentication, an attacker can trick users into sending authenticated HTTP requests without their knowledge from any arbitrary domain they visit. To prevent this vulnerability start by identifying if the framework or library leveraged has built-in features or offers plugins for CSRF protection. CSRF tokens should be unique and securely random. The `Synchronizer Token` or `Double Submit Cookie` patterns with defense-in-depth mechanisms such as the `sameSite` cookie flag can help prevent CSRF. For more information, see: [Cross-site request forgery prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.3 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "references": [
                        "https://stackoverflow.com/questions/42717210/samesite-cookie-in-java-application"
                    ],
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                    "shortlink": "https://sg.run/XR5b",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27164,
                            "rule_id": "WAUqW7",
                            "rule_name": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                            "rv_id": 947503,
                            "url": "https://semgrep.dev/playground/r/yeT0veP/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                            "version_id": "yeT0veP"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "169e1801dcad365476a78b615f136d2522233103c91170907ce17da4f58bac9336646d308cc08c9737f6a3eb387530cac748784898ea0d31ac3674c9c1da2eed_0",
                "lines": "        response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Log4j.java",
            "start": {
                "line": 18,
                "col": 6,
                "offset": 530
            },
            "end": {
                "line": 18,
                "col": 20,
                "offset": 544
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 19,
                            "col": 12,
                            "offset": 574
                        },
                        "end": {
                            "line": 19,
                            "col": 18,
                            "offset": 580
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 19,
                            "col": 19,
                            "offset": 581
                        },
                        "end": {
                            "line": 19,
                            "col": 24,
                            "offset": 586
                        },
                        "abstract_content": "log4j"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "92266bdf04ae45bb95929627fcb742ea75124c02e570cbf41848153d68a10bcaa6b15efed5ed8908bce142f5dc743a570202825f8a5d2026b38d2f2c2a834cf9_0",
                "lines": "    @RequestMapping(value = \"/log4j\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/Login.java",
            "start": {
                "line": 22,
                "col": 6,
                "offset": 731
            },
            "end": {
                "line": 22,
                "col": 20,
                "offset": 745
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 23,
                            "col": 12,
                            "offset": 767
                        },
                        "end": {
                            "line": 23,
                            "col": 18,
                            "offset": 773
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 23,
                            "col": 19,
                            "offset": 774
                        },
                        "end": {
                            "line": 23,
                            "col": 24,
                            "offset": 779
                        },
                        "abstract_content": "login"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "6056c403d3adfd04bc8bb2eb63e27bd5dd4f05a4683fb8bf91c528d5b6382357040c3be68cdba7c20ce4e9f342fbe667ac99bec9c8b4d29de6185d9989ce7105_0",
                "lines": "    @RequestMapping(\"/login\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.cookie-issecure-false.cookie-issecure-false",
            "path": "src/main/java/org/joychou/controller/Login.java",
            "start": {
                "line": 39,
                "col": 13,
                "offset": 1342
            },
            "end": {
                "line": 39,
                "col": 51,
                "offset": 1380
            },
            "extra": {
                "metavars": {
                    "$COOKIE": {
                        "start": {
                            "line": 39,
                            "col": 20,
                            "offset": 1349
                        },
                        "end": {
                            "line": 39,
                            "col": 26,
                            "offset": 1355
                        },
                        "abstract_content": "cookie"
                    },
                    "$...ARGS": {
                        "start": {
                            "line": 39,
                            "col": 40,
                            "offset": 1369
                        },
                        "end": {
                            "line": 39,
                            "col": 49,
                            "offset": 1378
                        },
                        "abstract_content": "key null"
                    }
                },
                "message": "Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks.",
                "fix": "cookie = new Cookie(key, null);\n            cookie.setSecure(true);",
                "metadata": {
                    "vulnerability": "Insecure Transport",
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure",
                        "A02:2021 - Cryptographic Failures"
                    ],
                    "cwe": [
                        "CWE-319: Cleartext Transmission of Sensitive Information"
                    ],
                    "references": [
                        "https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setSecure(boolean)",
                        "https://owasp.org/www-community/controls/SecureCookieAttribute"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "cookie"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Mishandled Sensitive Information"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                    "shortlink": "https://sg.run/pxn0",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9218,
                            "rule_id": "kxUkn9",
                            "rule_name": "java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                            "rv_id": 945732,
                            "url": "https://semgrep.dev/playground/r/NdTqk5x/java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                            "version_id": "NdTqk5x"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "22e7197dc8d213464aa8ef9fdfd24e0726cfa5db8c6531273467c6c8f2a36f93365f0d0c0779f5906a93bb6d94fab585bbfe7190fca8e6ad8c60a011c369d263_0",
                "lines": "            Cookie cookie = new Cookie(key, null);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
            "path": "src/main/java/org/joychou/controller/Login.java",
            "start": {
                "line": 42,
                "col": 13,
                "offset": 1459
            },
            "end": {
                "line": 42,
                "col": 40,
                "offset": 1486
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 42,
                            "col": 13,
                            "offset": 1459
                        },
                        "end": {
                            "line": 42,
                            "col": 21,
                            "offset": 1467
                        },
                        "abstract_content": "response"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 42,
                            "col": 32,
                            "offset": 1478
                        },
                        "end": {
                            "line": 42,
                            "col": 38,
                            "offset": 1484
                        },
                        "abstract_content": "cookie"
                    }
                },
                "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
                "metadata": {
                    "cwe": [
                        "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE",
                    "asvs": {
                        "control_id": "3.4.2 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "shortlink": "https://sg.run/b7Be",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9170,
                            "rule_id": "EwU2z6",
                            "rule_name": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "rv_id": 945651,
                            "url": "https://semgrep.dev/playground/r/5PT9OYP/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "version_id": "5PT9OYP"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "db409e55e9cf8e00b92d79c9426600d1bacd58d2772d6865eba2217580155bea6c08f65af1b64bf442c9e110193e3e2456f7555935205db4a63fbee25ae1e255_0",
                "lines": "            response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
            "path": "src/main/java/org/joychou/controller/Login.java",
            "start": {
                "line": 42,
                "col": 13,
                "offset": 1459
            },
            "end": {
                "line": 42,
                "col": 40,
                "offset": 1486
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 42,
                            "col": 13,
                            "offset": 1459
                        },
                        "end": {
                            "line": 42,
                            "col": 21,
                            "offset": 1467
                        },
                        "abstract_content": "response"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 42,
                            "col": 32,
                            "offset": 1478
                        },
                        "end": {
                            "line": 42,
                            "col": 38,
                            "offset": 1484
                        },
                        "abstract_content": "cookie"
                    }
                },
                "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
                "metadata": {
                    "cwe": [
                        "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE",
                    "asvs": {
                        "control_id": "3.4.1 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "shortlink": "https://sg.run/kXoK",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9172,
                            "rule_id": "L1Uyvp",
                            "rule_name": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "rv_id": 945652,
                            "url": "https://semgrep.dev/playground/r/GxTP7W7/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "version_id": "GxTP7W7"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "0bb89f01db24e7e4ac939c24b9bae7c44e38a296093d40241d237e45ba2cc19667177bebb3a9542be18bb180272b2fcb65636c2e403e03e617c91282fafd18a1_0",
                "lines": "            response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
            "path": "src/main/java/org/joychou/controller/Login.java",
            "start": {
                "line": 42,
                "col": 13,
                "offset": 1459
            },
            "end": {
                "line": 42,
                "col": 40,
                "offset": 1486
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 42,
                            "col": 13,
                            "offset": 1459
                        },
                        "end": {
                            "line": 42,
                            "col": 21,
                            "offset": 1467
                        },
                        "abstract_content": "response"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 42,
                            "col": 32,
                            "offset": 1478
                        },
                        "end": {
                            "line": 42,
                            "col": 38,
                            "offset": 1484
                        },
                        "abstract_content": "cookie"
                    }
                },
                "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.2 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
                    ],
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://owasp.org/www-community/HttpOnly"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "shortlink": "https://sg.run/2WZD",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27163,
                            "rule_id": "DbUR6k",
                            "rule_name": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "rv_id": 947502,
                            "url": "https://semgrep.dev/playground/r/9lTyO6k/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "version_id": "9lTyO6k"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "2101debf3f821b8b27f4c76f6d1ce72319e0e4ec4893811233ecaefde22c5e2f1210eb58f85aa50e40aa64276975fb2d4a2a4f6c04353bafd6008ff72ac52068_0",
                "lines": "            response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
            "path": "src/main/java/org/joychou/controller/Login.java",
            "start": {
                "line": 42,
                "col": 13,
                "offset": 1459
            },
            "end": {
                "line": 42,
                "col": 40,
                "offset": 1486
            },
            "extra": {
                "metavars": {
                    "$RESP": {
                        "start": {
                            "line": 42,
                            "col": 13,
                            "offset": 1459
                        },
                        "end": {
                            "line": 42,
                            "col": 21,
                            "offset": 1467
                        },
                        "abstract_content": "response"
                    }
                },
                "message": "The application does not appear to verify inbound requests which can lead to a Cross-site request forgery (CSRF) vulnerability. If the application uses cookie-based authentication, an attacker can trick users into sending authenticated HTTP requests without their knowledge from any arbitrary domain they visit. To prevent this vulnerability start by identifying if the framework or library leveraged has built-in features or offers plugins for CSRF protection. CSRF tokens should be unique and securely random. The `Synchronizer Token` or `Double Submit Cookie` patterns with defense-in-depth mechanisms such as the `sameSite` cookie flag can help prevent CSRF. For more information, see: [Cross-site request forgery prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.3 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "references": [
                        "https://stackoverflow.com/questions/42717210/samesite-cookie-in-java-application"
                    ],
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                    "shortlink": "https://sg.run/XR5b",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27164,
                            "rule_id": "WAUqW7",
                            "rule_name": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                            "rv_id": 947503,
                            "url": "https://semgrep.dev/playground/r/yeT0veP/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                            "version_id": "yeT0veP"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "35cd2a28c29de8ae6f4c2ed31a46cc258f49af53e3d3f2c2cde9b7bbcf43175eef63bfbfd0daa93e69425ad643b2005ce4057c765058206aaa3bb3602e1b0a8e_0",
                "lines": "            response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
            "path": "src/main/java/org/joychou/controller/Login.java",
            "start": {
                "line": 42,
                "col": 13,
                "offset": 1459
            },
            "end": {
                "line": 42,
                "col": 40,
                "offset": 1486
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 42,
                            "col": 13,
                            "offset": 1459
                        },
                        "end": {
                            "line": 42,
                            "col": 21,
                            "offset": 1467
                        },
                        "abstract_content": "response"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 42,
                            "col": 32,
                            "offset": 1478
                        },
                        "end": {
                            "line": 42,
                            "col": 38,
                            "offset": 1484
                        },
                        "abstract_content": "cookie"
                    }
                },
                "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.1 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
                    ],
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://owasp.org/www-community/controls/SecureCookieAttribute"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "shortlink": "https://sg.run/jW2J",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27165,
                            "rule_id": "0oUKLg",
                            "rule_name": "java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "rv_id": 947504,
                            "url": "https://semgrep.dev/playground/r/rxT6kN2/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "version_id": "rxT6kN2"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "6798bbba8c38abfda3f987e08a9ef6e1b0e784d1c08b18daaf792adbcd3b4e77478309dd399e836a2bd699115130850259772ed8e877e07ec1c2c4da53dae674_0",
                "lines": "            response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
            "path": "src/main/java/org/joychou/controller/PathTraversal.java",
            "start": {
                "line": 43,
                "col": 27,
                "offset": 1373
            },
            "end": {
                "line": 43,
                "col": 34,
                "offset": 1380
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 11,
                            "offset": 10
                        },
                        "abstract_content": "GetMapping"
                    },
                    "$MAPPING": {
                        "start": {
                            "line": 24,
                            "col": 6,
                            "offset": 679
                        },
                        "end": {
                            "line": 24,
                            "col": 16,
                            "offset": 689
                        },
                        "abstract_content": "GetMapping"
                    },
                    "$RET": {
                        "start": {
                            "line": 25,
                            "col": 12,
                            "offset": 724
                        },
                        "end": {
                            "line": 25,
                            "col": 18,
                            "offset": 730
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 25,
                            "col": 19,
                            "offset": 731
                        },
                        "end": {
                            "line": 25,
                            "col": 27,
                            "offset": 739
                        },
                        "abstract_content": "getImage"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 25,
                            "col": 19,
                            "offset": 731
                        },
                        "end": {
                            "line": 25,
                            "col": 27,
                            "offset": 739
                        },
                        "abstract_content": "getImage"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 25,
                            "col": 28,
                            "offset": 740
                        },
                        "end": {
                            "line": 25,
                            "col": 34,
                            "offset": 746
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 25,
                            "col": 35,
                            "offset": 747
                        },
                        "end": {
                            "line": 25,
                            "col": 43,
                            "offset": 755
                        },
                        "abstract_content": "filepath"
                    },
                    "$FILE": {
                        "start": {
                            "line": 43,
                            "col": 27,
                            "offset": 1373
                        },
                        "end": {
                            "line": 43,
                            "col": 34,
                            "offset": 1380
                        },
                        "abstract_content": "imgFile"
                    }
                },
                "message": "The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files. In Java, you may also consider using a utility method such as `org.apache.commons.io.FilenameUtils.getName(...)` to only retrieve the file name from the path.",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "Path Traversal with Spring",
                    "functional-categories": [
                        "file::sink::file-access::commons-io",
                        "file::sink::file-access::java.io",
                        "file::sink::file-access::java.xml",
                        "file::sink::file-access::spring",
                        "web::source::cookie::Spring",
                        "web::source::header::Spring",
                        "web::source::http-body::Spring",
                        "web::source::http-params::Spring",
                        "web::source::url-path-params::Spring"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control",
                        "A05:2017 - Broken Access Control"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A01_2021-Broken_Access_Control",
                        "https://owasp.org/www-community/attacks/Path_Traversal",
                        "https://portswigger.net/web-security/file-path-traversal",
                        "https://www.stackhawk.com/blog/spring-path-traversal-guide-examples-and-prevention/"
                    ],
                    "technology": [
                        "Spring",
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Path Traversal"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                    "shortlink": "https://sg.run/Pqzq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 72945,
                            "rule_id": "yyUr8r",
                            "rule_name": "java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                            "rv_id": 973742,
                            "url": "https://semgrep.dev/playground/r/5PT9E5x/java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                            "version_id": "5PT9E5x"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.spring-tainted-path-traversal.spring-tainted-path-traversal",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "752deb518ae6b7a3b227985ea62fb82f5adb8e16bcfc2d8508993913fa1ec565bca7ff35318fa08c8c08afc93d5c881f169b741a656bb3446243a9a9c026bab4_0",
                "lines": "        File f = new File(imgFile);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/PathTraversal.java",
                                "start": {
                                    "line": 25,
                                    "col": 35,
                                    "offset": 747
                                },
                                "end": {
                                    "line": 25,
                                    "col": 43,
                                    "offset": 755
                                }
                            },
                            "filepath"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/PathTraversal.java",
                                "start": {
                                    "line": 25,
                                    "col": 35,
                                    "offset": 747
                                },
                                "end": {
                                    "line": 25,
                                    "col": 43,
                                    "offset": 755
                                }
                            },
                            "content": "filepath"
                        }
                    ],
                    "taint_sink": [
                        "CliCall",
                        [
                            [
                                {
                                    "path": "src/main/java/org/joychou/controller/PathTraversal.java",
                                    "start": {
                                        "line": 26,
                                        "col": 16,
                                        "offset": 793
                                    },
                                    "end": {
                                        "line": 26,
                                        "col": 28,
                                        "offset": 805
                                    }
                                },
                                "getImgBase64"
                            ],
                            [
                                {
                                    "location": {
                                        "path": "src/main/java/org/joychou/controller/PathTraversal.java",
                                        "start": {
                                            "line": 38,
                                            "col": 40,
                                            "offset": 1192
                                        },
                                        "end": {
                                            "line": 38,
                                            "col": 47,
                                            "offset": 1199
                                        }
                                    },
                                    "content": "imgFile"
                                }
                            ],
                            [
                                "CliLoc",
                                [
                                    {
                                        "path": "src/main/java/org/joychou/controller/PathTraversal.java",
                                        "start": {
                                            "line": 43,
                                            "col": 27,
                                            "offset": 1373
                                        },
                                        "end": {
                                            "line": 43,
                                            "col": 34,
                                            "offset": 1380
                                        }
                                    },
                                    "imgFile"
                                ]
                            ]
                        ]
                    ]
                },
                "engine_kind": [
                    "PRO_REQUIRED",
                    {
                        "interproc_taint": true,
                        "interfile_taint": false,
                        "proprietary_language": false
                    }
                ]
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/QLExpress.java",
            "start": {
                "line": 20,
                "col": 6,
                "offset": 631
            },
            "end": {
                "line": 20,
                "col": 20,
                "offset": 645
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 21,
                            "col": 12,
                            "offset": 667
                        },
                        "end": {
                            "line": 21,
                            "col": 18,
                            "offset": 673
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 21,
                            "col": 19,
                            "offset": 674
                        },
                        "end": {
                            "line": 21,
                            "col": 24,
                            "offset": 679
                        },
                        "abstract_content": "vuln1"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "da1775053bcb46f9feb7ab505ecce253ecd41b58d1b151c08965b9d8888339ef68c889d0462a8979ac5f942dca6d855af414b0a3982773f8eb7785fe44d24972_0",
                "lines": "    @RequestMapping(\"/vuln1\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/QLExpress.java",
            "start": {
                "line": 31,
                "col": 6,
                "offset": 1097
            },
            "end": {
                "line": 31,
                "col": 20,
                "offset": 1111
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 32,
                            "col": 12,
                            "offset": 1131
                        },
                        "end": {
                            "line": 32,
                            "col": 18,
                            "offset": 1137
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 32,
                            "col": 19,
                            "offset": 1138
                        },
                        "end": {
                            "line": 32,
                            "col": 22,
                            "offset": 1141
                        },
                        "abstract_content": "sec"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "6e7170c527499921a805bdb8dad99638081c04a741651ed57a54801625cfffe5ff0f4792ca4fff50e2d40f7bd897db20855c5867df970e9461bdb3b974da4d6a_0",
                "lines": "    @RequestMapping(\"/sec\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.command-injection.tainted-system-command.tainted-system-command",
            "path": "src/main/java/org/joychou/controller/Rce.java",
            "start": {
                "line": 36,
                "col": 34,
                "offset": 963
            },
            "end": {
                "line": 36,
                "col": 37,
                "offset": 966
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 5,
                            "offset": 4
                        },
                        "abstract_content": "exec"
                    },
                    "$MAPPING": {
                        "start": {
                            "line": 30,
                            "col": 6,
                            "offset": 751
                        },
                        "end": {
                            "line": 30,
                            "col": 16,
                            "offset": 761
                        },
                        "abstract_content": "GetMapping"
                    },
                    "$RET": {
                        "start": {
                            "line": 31,
                            "col": 12,
                            "offset": 790
                        },
                        "end": {
                            "line": 31,
                            "col": 18,
                            "offset": 796
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 31,
                            "col": 19,
                            "offset": 797
                        },
                        "end": {
                            "line": 31,
                            "col": 30,
                            "offset": 808
                        },
                        "abstract_content": "CommandExec"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 31,
                            "col": 19,
                            "offset": 797
                        },
                        "end": {
                            "line": 31,
                            "col": 30,
                            "offset": 808
                        },
                        "abstract_content": "CommandExec"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 31,
                            "col": 31,
                            "offset": 809
                        },
                        "end": {
                            "line": 31,
                            "col": 37,
                            "offset": 815
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 31,
                            "col": 38,
                            "offset": 816
                        },
                        "end": {
                            "line": 31,
                            "col": 41,
                            "offset": 819
                        },
                        "abstract_content": "cmd"
                    },
                    "$R": {
                        "start": {
                            "line": 36,
                            "col": 25,
                            "offset": 954
                        },
                        "end": {
                            "line": 36,
                            "col": 28,
                            "offset": 957
                        },
                        "abstract_content": "run",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 32,
                                "col": 23,
                                "offset": 845
                            },
                            "svalue_end": {
                                "line": 32,
                                "col": 43,
                                "offset": 865
                            },
                            "svalue_abstract_content": "Runtime.getRuntime()"
                        }
                    },
                    "$EXEC": {
                        "start": {
                            "line": 36,
                            "col": 29,
                            "offset": 958
                        },
                        "end": {
                            "line": 36,
                            "col": 33,
                            "offset": 962
                        },
                        "abstract_content": "exec"
                    },
                    "$CMD": {
                        "start": {
                            "line": 36,
                            "col": 34,
                            "offset": 963
                        },
                        "end": {
                            "line": 36,
                            "col": 37,
                            "offset": 966
                        },
                        "abstract_content": "cmd"
                    }
                },
                "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands. For more information, see: [Java command injection prevention](https://semgrep.dev/docs/cheat-sheets/java-command-injection/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "OS Command Injection with Spring",
                    "functional-categories": [
                        "os::sink::os-command-or-thread",
                        "web::source::cookie::Spring",
                        "web::source::header::Spring",
                        "web::source::http-body::Spring",
                        "web::source::http-params::Spring",
                        "web::source::url-path-params::Spring"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "technology": [
                        "Spring",
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Command Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.command-injection.tainted-system-command.tainted-system-command",
                    "shortlink": "https://sg.run/Or5En",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 125031,
                            "rule_id": "BYUXGOg",
                            "rule_name": "java.spring.command-injection.tainted-system-command.tainted-system-command",
                            "rv_id": 973718,
                            "url": "https://semgrep.dev/playground/r/nWTpk7e/java.spring.command-injection.tainted-system-command.tainted-system-command",
                            "version_id": "nWTpk7e"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.command-injection.tainted-system-command.tainted-system-command",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "e4924500bbbcb9c9011587251c5d20011e8d82a326b48857fea469ef6452161aafdce6a138401cc0f1417c75ad66ef2afa9a60bd4077415f6c004da3bcc67052_0",
                "lines": "            Process p = run.exec(cmd);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/Rce.java",
                                "start": {
                                    "line": 31,
                                    "col": 38,
                                    "offset": 816
                                },
                                "end": {
                                    "line": 31,
                                    "col": 41,
                                    "offset": 819
                                }
                            },
                            "cmd"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/Rce.java",
                                "start": {
                                    "line": 31,
                                    "col": 38,
                                    "offset": 816
                                },
                                "end": {
                                    "line": 31,
                                    "col": 41,
                                    "offset": 819
                                }
                            },
                            "content": "cmd"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/Rce.java",
                                "start": {
                                    "line": 36,
                                    "col": 34,
                                    "offset": 963
                                },
                                "end": {
                                    "line": 36,
                                    "col": 37,
                                    "offset": 966
                                }
                            },
                            "cmd"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.command-injection-process-builder.command-injection-process-builder",
            "path": "src/main/java/org/joychou/controller/Rce.java",
            "start": {
                "line": 69,
                "col": 45,
                "offset": 1910
            },
            "end": {
                "line": 69,
                "col": 71,
                "offset": 1936
            },
            "extra": {
                "metavars": {
                    "$CMD": {
                        "start": {
                            "line": 69,
                            "col": 64,
                            "offset": 1929
                        },
                        "end": {
                            "line": 69,
                            "col": 70,
                            "offset": 1935
                        },
                        "abstract_content": "arrCmd"
                    }
                },
                "message": "A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.",
                "metadata": {
                    "cwe": [
                        "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Command Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder",
                    "shortlink": "https://sg.run/gJJe",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9941,
                            "rule_id": "4bUzzo",
                            "rule_name": "java.lang.security.audit.command-injection-process-builder.command-injection-process-builder",
                            "rv_id": 945650,
                            "url": "https://semgrep.dev/playground/r/JdTDyZ5/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder",
                            "version_id": "JdTDyZ5"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "90d7af4eb0ff272072c7fa8e08d0013423a07c14a9e1d462a87383047f7247b01842c6f22a88bfcd39fbbdad0d44472e99db62794f4709e991cff09015bc9a68_0",
                "lines": "            ProcessBuilder processBuilder = new ProcessBuilder(arrCmd);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.command-injection.tainted-system-command.tainted-system-command",
            "path": "src/main/java/org/joychou/controller/Rce.java",
            "start": {
                "line": 69,
                "col": 64,
                "offset": 1929
            },
            "end": {
                "line": 69,
                "col": 70,
                "offset": 1935
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 11,
                            "offset": 10
                        },
                        "abstract_content": "GetMapping"
                    },
                    "$MAPPING": {
                        "start": {
                            "line": 62,
                            "col": 6,
                            "offset": 1671
                        },
                        "end": {
                            "line": 62,
                            "col": 16,
                            "offset": 1681
                        },
                        "abstract_content": "GetMapping"
                    },
                    "$RET": {
                        "start": {
                            "line": 63,
                            "col": 12,
                            "offset": 1712
                        },
                        "end": {
                            "line": 63,
                            "col": 18,
                            "offset": 1718
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 63,
                            "col": 19,
                            "offset": 1719
                        },
                        "end": {
                            "line": 63,
                            "col": 33,
                            "offset": 1733
                        },
                        "abstract_content": "processBuilder"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 63,
                            "col": 19,
                            "offset": 1719
                        },
                        "end": {
                            "line": 63,
                            "col": 33,
                            "offset": 1733
                        },
                        "abstract_content": "processBuilder"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 63,
                            "col": 34,
                            "offset": 1734
                        },
                        "end": {
                            "line": 63,
                            "col": 40,
                            "offset": 1740
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 63,
                            "col": 41,
                            "offset": 1741
                        },
                        "end": {
                            "line": 63,
                            "col": 44,
                            "offset": 1744
                        },
                        "abstract_content": "cmd"
                    },
                    "$CMD": {
                        "start": {
                            "line": 69,
                            "col": 64,
                            "offset": 1929
                        },
                        "end": {
                            "line": 69,
                            "col": 70,
                            "offset": 1935
                        },
                        "abstract_content": "arrCmd"
                    }
                },
                "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands. For more information, see: [Java command injection prevention](https://semgrep.dev/docs/cheat-sheets/java-command-injection/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "OS Command Injection with Spring",
                    "functional-categories": [
                        "os::sink::os-command-or-thread",
                        "web::source::cookie::Spring",
                        "web::source::header::Spring",
                        "web::source::http-body::Spring",
                        "web::source::http-params::Spring",
                        "web::source::url-path-params::Spring"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "technology": [
                        "Spring",
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Command Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.command-injection.tainted-system-command.tainted-system-command",
                    "shortlink": "https://sg.run/Or5En",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 125031,
                            "rule_id": "BYUXGOg",
                            "rule_name": "java.spring.command-injection.tainted-system-command.tainted-system-command",
                            "rv_id": 973718,
                            "url": "https://semgrep.dev/playground/r/nWTpk7e/java.spring.command-injection.tainted-system-command.tainted-system-command",
                            "version_id": "nWTpk7e"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.command-injection.tainted-system-command.tainted-system-command",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "55276a66f54637e6d035835e8ab362b6688d25ff26e3b0e71640bf1b64a30cf3e5871853dc629020b5e7c13a18656c14503773fc12769346fba8cfa4e1ef4667_0",
                "lines": "            ProcessBuilder processBuilder = new ProcessBuilder(arrCmd);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/Rce.java",
                                "start": {
                                    "line": 63,
                                    "col": 41,
                                    "offset": 1741
                                },
                                "end": {
                                    "line": 63,
                                    "col": 44,
                                    "offset": 1744
                                }
                            },
                            "cmd"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/Rce.java",
                                "start": {
                                    "line": 63,
                                    "col": 41,
                                    "offset": 1741
                                },
                                "end": {
                                    "line": 63,
                                    "col": 44,
                                    "offset": 1744
                                }
                            },
                            "content": "cmd"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/Rce.java",
                                "start": {
                                    "line": 68,
                                    "col": 22,
                                    "offset": 1833
                                },
                                "end": {
                                    "line": 68,
                                    "col": 28,
                                    "offset": 1839
                                }
                            },
                            "content": "arrCmd"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/Rce.java",
                                "start": {
                                    "line": 69,
                                    "col": 64,
                                    "offset": 1929
                                },
                                "end": {
                                    "line": 69,
                                    "col": 70,
                                    "offset": 1935
                                }
                            },
                            "arrCmd"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.script-engine-injection.script-engine-injection",
            "path": "src/main/java/org/joychou/controller/Rce.java",
            "start": {
                "line": 94,
                "col": 5,
                "offset": 2672
            },
            "end": {
                "line": 101,
                "col": 6,
                "offset": 3050
            },
            "extra": {
                "metavars": {
                    "$X": {
                        "start": {
                            "line": 95,
                            "col": 12,
                            "offset": 2705
                        },
                        "end": {
                            "line": 95,
                            "col": 16,
                            "offset": 2709
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 95,
                            "col": 17,
                            "offset": 2710
                        },
                        "end": {
                            "line": 95,
                            "col": 25,
                            "offset": 2718
                        },
                        "abstract_content": "jsEngine"
                    },
                    "$SE": {
                        "start": {
                            "line": 100,
                            "col": 9,
                            "offset": 3017
                        },
                        "end": {
                            "line": 100,
                            "col": 15,
                            "offset": 3023
                        },
                        "abstract_content": "engine",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 97,
                                "col": 31,
                                "offset": 2825
                            },
                            "svalue_end": {
                                "line": 97,
                                "col": 78,
                                "offset": 2872
                            },
                            "svalue_abstract_content": "new ScriptEngineManager().getEngineByName(\"js\")"
                        }
                    }
                },
                "message": "Detected potential code injection using ScriptEngine. Ensure user-controlled data cannot enter '.eval()', otherwise, this is a code injection vulnerability.",
                "metadata": {
                    "cwe": [
                        "CWE-94: Improper Control of Generation of Code ('Code Injection')"
                    ],
                    "owasp": [
                        "A03:2021 - Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SCRIPT_ENGINE_INJECTION",
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "cwe2022-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Code Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.script-engine-injection.script-engine-injection",
                    "shortlink": "https://sg.run/gLqn",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9185,
                            "rule_id": "DbUpAr",
                            "rule_name": "java.lang.security.audit.script-engine-injection.script-engine-injection",
                            "rv_id": 945691,
                            "url": "https://semgrep.dev/playground/r/xyTqn3J/java.lang.security.audit.script-engine-injection.script-engine-injection",
                            "version_id": "xyTqn3J"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.script-engine-injection.script-engine-injection",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "603431c6a1d8b018f1c4d4eb34f8c94a1c238579af99ca8f17c38441c1038f620d3257e01b193f33e781f8d0fbd2148974bb220eae785d076450f406723d7ee3_0",
                "lines": "    @GetMapping(\"/jscmd\")\n    public void jsEngine(String jsurl) throws Exception{\n        // js nashorn javascript ecmascript\n        ScriptEngine engine = new ScriptEngineManager().getEngineByName(\"js\");\n        Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);\n        String cmd = String.format(\"load(\\\"%s\\\")\", jsurl);\n        engine.eval(cmd, bindings);\n    }",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution",
            "path": "src/main/java/org/joychou/controller/Rce.java",
            "start": {
                "line": 100,
                "col": 21,
                "offset": 3029
            },
            "end": {
                "line": 100,
                "col": 24,
                "offset": 3032
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 11,
                            "offset": 10
                        },
                        "abstract_content": "GetMapping"
                    },
                    "$MAPPING": {
                        "start": {
                            "line": 94,
                            "col": 6,
                            "offset": 2673
                        },
                        "end": {
                            "line": 94,
                            "col": 16,
                            "offset": 2683
                        },
                        "abstract_content": "GetMapping"
                    },
                    "$RET": {
                        "start": {
                            "line": 95,
                            "col": 12,
                            "offset": 2705
                        },
                        "end": {
                            "line": 95,
                            "col": 16,
                            "offset": 2709
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 95,
                            "col": 17,
                            "offset": 2710
                        },
                        "end": {
                            "line": 95,
                            "col": 25,
                            "offset": 2718
                        },
                        "abstract_content": "jsEngine"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 95,
                            "col": 17,
                            "offset": 2710
                        },
                        "end": {
                            "line": 95,
                            "col": 25,
                            "offset": 2718
                        },
                        "abstract_content": "jsEngine"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 95,
                            "col": 26,
                            "offset": 2719
                        },
                        "end": {
                            "line": 95,
                            "col": 32,
                            "offset": 2725
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 95,
                            "col": 33,
                            "offset": 2726
                        },
                        "end": {
                            "line": 95,
                            "col": 38,
                            "offset": 2731
                        },
                        "abstract_content": "jsurl"
                    },
                    "$ENGINE": {
                        "start": {
                            "line": 100,
                            "col": 9,
                            "offset": 3017
                        },
                        "end": {
                            "line": 100,
                            "col": 15,
                            "offset": 3023
                        },
                        "abstract_content": "engine",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 97,
                                "col": 31,
                                "offset": 2825
                            },
                            "svalue_end": {
                                "line": 97,
                                "col": 78,
                                "offset": 2872
                            },
                            "svalue_abstract_content": "new ScriptEngineManager().getEngineByName(\"js\")"
                        }
                    },
                    "$SCRIPT": {
                        "start": {
                            "line": 100,
                            "col": 21,
                            "offset": 3029
                        },
                        "end": {
                            "line": 100,
                            "col": 24,
                            "offset": 3032
                        },
                        "abstract_content": "cmd",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 99,
                                "col": 22,
                                "offset": 2971
                            },
                            "svalue_end": {
                                "line": 99,
                                "col": 58,
                                "offset": 3007
                            },
                            "svalue_abstract_content": "String.format(\"load(\\\"%s\\\")\"jsurl)"
                        }
                    }
                },
                "message": "User data flows into a script engine or another means of dynamic code evaluation. This is unsafe and could lead to code injection or arbitrary code execution as a result. Avoid inputting user data into code execution or use proper sandboxing if user code evaluation is necessary.",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
                    ],
                    "display-name": "Eval Injection with Spring",
                    "functional-categories": [
                        "expression-lang::sink::expression::commons-jexl",
                        "expression-lang::sink::expression::javax.el",
                        "expression-lang::sink::expression::javax.script",
                        "expression-lang::sink::expression::velocity",
                        "web::source::cookie::Spring",
                        "web::source::header::Spring",
                        "web::source::http-body::Spring",
                        "web::source::http-params::Spring",
                        "web::source::url-path-params::Spring"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://0xn3va.gitbook.io/cheat-sheets/framework/spring/spel-injection",
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "supersedes": [
                        "java.servlets.security.tainted-code-injection-from-http-request-deepsemgrep.tainted-code-injection-from-http-request-deepsemgrep"
                    ],
                    "technology": [
                        "Spring",
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Code Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution",
                    "shortlink": "https://sg.run/OjZB",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 43775,
                            "rule_id": "3qUgzv",
                            "rule_name": "java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution",
                            "rv_id": 973728,
                            "url": "https://semgrep.dev/playground/r/JdTDKg6/java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution",
                            "version_id": "JdTDKg6"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "c043d595f2d231c78e2c4bdab9fbed750a3195a5a2cf1d5025760e5fedb2c0daa1b825d86dac03c0e18a1b5c4276113d06fcb581621f6f61fd1d065b0c0e874a_0",
                "lines": "        engine.eval(cmd, bindings);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/Rce.java",
                                "start": {
                                    "line": 95,
                                    "col": 33,
                                    "offset": 2726
                                },
                                "end": {
                                    "line": 95,
                                    "col": 38,
                                    "offset": 2731
                                }
                            },
                            "jsurl"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/Rce.java",
                                "start": {
                                    "line": 95,
                                    "col": 33,
                                    "offset": 2726
                                },
                                "end": {
                                    "line": 95,
                                    "col": 38,
                                    "offset": 2731
                                }
                            },
                            "content": "jsurl"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/Rce.java",
                                "start": {
                                    "line": 99,
                                    "col": 16,
                                    "offset": 2965
                                },
                                "end": {
                                    "line": 99,
                                    "col": 19,
                                    "offset": 2968
                                }
                            },
                            "content": "cmd"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/Rce.java",
                                "start": {
                                    "line": 100,
                                    "col": 21,
                                    "offset": 3029
                                },
                                "end": {
                                    "line": 100,
                                    "col": 24,
                                    "offset": 3032
                                }
                            },
                            "cmd"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.use-snakeyaml-constructor.use-snakeyaml-constructor",
            "path": "src/main/java/org/joychou/controller/Rce.java",
            "start": {
                "line": 112,
                "col": 9,
                "offset": 3444
            },
            "end": {
                "line": 113,
                "col": 25,
                "offset": 3489
            },
            "extra": {
                "metavars": {
                    "$Y": {
                        "start": {
                            "line": 112,
                            "col": 14,
                            "offset": 3449
                        },
                        "end": {
                            "line": 112,
                            "col": 15,
                            "offset": 3450
                        },
                        "abstract_content": "y"
                    }
                },
                "message": "Used SnakeYAML org.yaml.snakeyaml.Yaml() constructor with no arguments, which is vulnerable to deserialization attacks. Use the one-argument Yaml(...) constructor instead, with SafeConstructor or a custom Constructor as the argument.",
                "metadata": {
                    "owasp": [
                        "A08:2017 - Insecure Deserialization",
                        "A08:2021 - Software and Data Integrity Failures"
                    ],
                    "cwe": [
                        "CWE-502: Deserialization of Untrusted Data"
                    ],
                    "references": [
                        "https://securitylab.github.com/research/swagger-yaml-parser-vulnerability/#snakeyaml-deserialization-vulnerability"
                    ],
                    "category": "security",
                    "technology": [
                        "snakeyaml"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Insecure Deserialization "
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.use-snakeyaml-constructor.use-snakeyaml-constructor",
                    "shortlink": "https://sg.run/L8qY",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 12683,
                            "rule_id": "6JU67x",
                            "rule_name": "java.lang.security.use-snakeyaml-constructor.use-snakeyaml-constructor",
                            "rv_id": 945726,
                            "url": "https://semgrep.dev/playground/r/jQTzvLX/java.lang.security.use-snakeyaml-constructor.use-snakeyaml-constructor",
                            "version_id": "jQTzvLX"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.use-snakeyaml-constructor.use-snakeyaml-constructor",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "dc2dee5e5e7ac98ba1c6ba4e0f6f7589bdb6add56fb3a3464324d8b841fc04a0d41ffd112d57c247b5070e2e545b1b26114161ae03dfbc3920f6939c127a3ef8_0",
                "lines": "        Yaml y = new Yaml();\n        y.load(content);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.dangerous-groovy-shell.dangerous-groovy-shell",
            "path": "src/main/java/org/joychou/controller/Rce.java",
            "start": {
                "line": 129,
                "col": 9,
                "offset": 3913
            },
            "end": {
                "line": 129,
                "col": 38,
                "offset": 3942
            },
            "extra": {
                "metavars": {
                    "$SHELL": {
                        "start": {
                            "line": 129,
                            "col": 9,
                            "offset": 3913
                        },
                        "end": {
                            "line": 129,
                            "col": 20,
                            "offset": 3924
                        },
                        "abstract_content": "groovyShell",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 128,
                                "col": 35,
                                "offset": 3886
                            },
                            "svalue_end": {
                                "line": 128,
                                "col": 52,
                                "offset": 3903
                            },
                            "svalue_abstract_content": "new GroovyShell()"
                        }
                    }
                },
                "message": "A expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.",
                "metadata": {
                    "cwe": [
                        "CWE-94: Improper Control of Generation of Code ('Code Injection')"
                    ],
                    "owasp": [
                        "A03:2021 - Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#GROOVY_SHELL",
                    "category": "security",
                    "technology": [
                        "groovy"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "cwe2022-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Code Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.dangerous-groovy-shell.dangerous-groovy-shell",
                    "shortlink": "https://sg.run/58LK",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 10091,
                            "rule_id": "ReUPKp",
                            "rule_name": "java.lang.security.audit.dangerous-groovy-shell.dangerous-groovy-shell",
                            "rv_id": 945677,
                            "url": "https://semgrep.dev/playground/r/o5TZe5v/java.lang.security.audit.dangerous-groovy-shell.dangerous-groovy-shell",
                            "version_id": "o5TZe5v"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.dangerous-groovy-shell.dangerous-groovy-shell",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "364c98413968cc4f060304f194ae222869e2ea9675e7aa3b0afca2706e127c9904fb0c4e49ea08e36879adb51cc32d19fea4de98e8a4ca6262ca631bb1894bea_0",
                "lines": "        groovyShell.evaluate(content);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/SQLI.java",
            "start": {
                "line": 51,
                "col": 6,
                "offset": 1235
            },
            "end": {
                "line": 51,
                "col": 20,
                "offset": 1249
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 52,
                            "col": 12,
                            "offset": 1275
                        },
                        "end": {
                            "line": 52,
                            "col": 18,
                            "offset": 1281
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 52,
                            "col": 19,
                            "offset": 1282
                        },
                        "end": {
                            "line": 52,
                            "col": 32,
                            "offset": 1295
                        },
                        "abstract_content": "jdbc_sqli_vul"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "d3ff8631608673bae756bf16a6c5fe216e7e8144cea68db8dc1a36955a950e2478cc7cceb794ca5e49202883a370286ac7b5eff0c1b05d7b5da948709bd7a602_0",
                "lines": "    @RequestMapping(\"/jdbc/vuln\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.injection.tainted-sql-string.tainted-sql-string",
            "path": "src/main/java/org/joychou/controller/SQLI.java",
            "start": {
                "line": 65,
                "col": 26,
                "offset": 1743
            },
            "end": {
                "line": 65,
                "col": 83,
                "offset": 1800
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 7,
                            "offset": 6
                        },
                        "abstract_content": "select"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 52,
                            "col": 19,
                            "offset": 1282
                        },
                        "end": {
                            "line": 52,
                            "col": 32,
                            "offset": 1295
                        },
                        "abstract_content": "jdbc_sqli_vul"
                    },
                    "$REQ": {
                        "start": {
                            "line": 52,
                            "col": 34,
                            "offset": 1297
                        },
                        "end": {
                            "line": 52,
                            "col": 46,
                            "offset": 1309
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 52,
                            "col": 59,
                            "offset": 1322
                        },
                        "end": {
                            "line": 52,
                            "col": 65,
                            "offset": 1328
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 52,
                            "col": 66,
                            "offset": 1329
                        },
                        "end": {
                            "line": 52,
                            "col": 74,
                            "offset": 1337
                        },
                        "abstract_content": "username"
                    },
                    "$SQLSTR": {
                        "start": {
                            "line": 65,
                            "col": 27,
                            "offset": 1744
                        },
                        "end": {
                            "line": 65,
                            "col": 65,
                            "offset": 1782
                        },
                        "abstract_content": "select * from users where username = '"
                    }
                },
                "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "interfile": true,
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string",
                    "shortlink": "https://sg.run/9rzz",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 14767,
                            "rule_id": "10UdRR",
                            "rule_name": "java.spring.security.injection.tainted-sql-string.tainted-sql-string",
                            "rv_id": 945745,
                            "url": "https://semgrep.dev/playground/r/8KTKj0G/java.spring.security.injection.tainted-sql-string.tainted-sql-string",
                            "version_id": "8KTKj0G"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "a9ddfb651bd74c411a90f3c775c2a41efb77de8abc211cb4ec8a2be18ee12e01d1eb6c7a394911443c814498be5bd6c14ee34735cd627b63bdb11fc63097c1ed_0",
                "lines": "            String sql = \"select * from users where username = '\" + username + \"'\";",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 52,
                                    "col": 66,
                                    "offset": 1329
                                },
                                "end": {
                                    "line": 52,
                                    "col": 74,
                                    "offset": 1337
                                }
                            },
                            "username"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 52,
                                    "col": 66,
                                    "offset": 1329
                                },
                                "end": {
                                    "line": 52,
                                    "col": 74,
                                    "offset": 1337
                                }
                            },
                            "content": "username"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 65,
                                    "col": 26,
                                    "offset": 1743
                                },
                                "end": {
                                    "line": 65,
                                    "col": 83,
                                    "offset": 1800
                                }
                            },
                            "\"select * from users where username = '\" + username + \"'\""
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep",
            "path": "src/main/java/org/joychou/controller/SQLI.java",
            "start": {
                "line": 67,
                "col": 28,
                "offset": 1859
            },
            "end": {
                "line": 67,
                "col": 55,
                "offset": 1886
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 13,
                            "offset": 12
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 52,
                            "col": 19,
                            "offset": 1282
                        },
                        "end": {
                            "line": 52,
                            "col": 32,
                            "offset": 1295
                        },
                        "abstract_content": "jdbc_sqli_vul"
                    },
                    "$REQ": {
                        "start": {
                            "line": 52,
                            "col": 34,
                            "offset": 1297
                        },
                        "end": {
                            "line": 52,
                            "col": 46,
                            "offset": 1309
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 52,
                            "col": 59,
                            "offset": 1322
                        },
                        "end": {
                            "line": 52,
                            "col": 65,
                            "offset": 1328
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 52,
                            "col": 66,
                            "offset": 1329
                        },
                        "end": {
                            "line": 52,
                            "col": 74,
                            "offset": 1337
                        },
                        "abstract_content": "username"
                    },
                    "$S": {
                        "start": {
                            "line": 67,
                            "col": 28,
                            "offset": 1859
                        },
                        "end": {
                            "line": 67,
                            "col": 37,
                            "offset": 1868
                        },
                        "abstract_content": "statement",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 64,
                                "col": 35,
                                "offset": 1695
                            },
                            "svalue_end": {
                                "line": 64,
                                "col": 56,
                                "offset": 1716
                            },
                            "svalue_abstract_content": "con.createStatement()"
                        }
                    },
                    "$SQLFUNC": {
                        "start": {
                            "line": 67,
                            "col": 38,
                            "offset": 1869
                        },
                        "end": {
                            "line": 67,
                            "col": 50,
                            "offset": 1881
                        },
                        "abstract_content": "executeQuery"
                    }
                },
                "message": "Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.",
                "metadata": {
                    "likelihood": "HIGH",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "interfile": true,
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "5.3.5 Injection",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
                        "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "functional-categories": [
                        "web::source::cookie::Servlet",
                        "web::source::http-params::Servlet",
                        "web::source::http-body::Servlet",
                        "web::source::header::Servlet",
                        "web::source::url-path-params::Servlet",
                        "web::source::cookie::Spring",
                        "web::source::http-params::Spring",
                        "web::source::http-body::Spring",
                        "web::source::header::Spring",
                        "web::source::url-path-params::Spring",
                        "db::sink::sql-or-nosql-query::JPA",
                        "db::sink::sql-or-nosql-query::java.sql"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
                        "https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps",
                        "https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION",
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep",
                    "shortlink": "https://sg.run/w5kd",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 40129,
                            "rule_id": "v8U3yY",
                            "rule_name": "java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep",
                            "rv_id": 1014868,
                            "url": "https://semgrep.dev/playground/r/1QToDP5/java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep",
                            "version_id": "1QToDP5"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "CRITICAL",
                "fingerprint": "7469aab698e62d6186c997e315b770f20f346fbe8ba125f9c8a1caf5f46cc59fba664355aa1e5fdfbdc8f7725d551d5d0b0c114d1f8df5cb8afdacfecc96c0d4_0",
                "lines": "            ResultSet rs = statement.executeQuery(sql);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 52,
                                    "col": 66,
                                    "offset": 1329
                                },
                                "end": {
                                    "line": 52,
                                    "col": 74,
                                    "offset": 1337
                                }
                            },
                            "username"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 52,
                                    "col": 66,
                                    "offset": 1329
                                },
                                "end": {
                                    "line": 52,
                                    "col": 74,
                                    "offset": 1337
                                }
                            },
                            "content": "username"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 65,
                                    "col": 20,
                                    "offset": 1737
                                },
                                "end": {
                                    "line": 65,
                                    "col": 23,
                                    "offset": 1740
                                }
                            },
                            "content": "sql"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 67,
                                    "col": 28,
                                    "offset": 1859
                                },
                                "end": {
                                    "line": 67,
                                    "col": 55,
                                    "offset": 1886
                                }
                            },
                            "statement.executeQuery(sql)"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
            "path": "src/main/java/org/joychou/controller/SQLI.java",
            "start": {
                "line": 67,
                "col": 28,
                "offset": 1859
            },
            "end": {
                "line": 67,
                "col": 55,
                "offset": 1886
            },
            "extra": {
                "metavars": {
                    "$ANNOT": {
                        "start": {
                            "line": 52,
                            "col": 12,
                            "offset": 1275
                        },
                        "end": {
                            "line": 52,
                            "col": 18,
                            "offset": 1281
                        },
                        "abstract_content": "String"
                    },
                    "$FUNC": {
                        "start": {
                            "line": 52,
                            "col": 19,
                            "offset": 1282
                        },
                        "end": {
                            "line": 52,
                            "col": 32,
                            "offset": 1295
                        },
                        "abstract_content": "jdbc_sqli_vul"
                    },
                    "$S": {
                        "start": {
                            "line": 67,
                            "col": 28,
                            "offset": 1859
                        },
                        "end": {
                            "line": 67,
                            "col": 37,
                            "offset": 1868
                        },
                        "abstract_content": "statement",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 64,
                                "col": 35,
                                "offset": 1695
                            },
                            "svalue_end": {
                                "line": 64,
                                "col": 56,
                                "offset": 1716
                            },
                            "svalue_abstract_content": "con.createStatement()"
                        }
                    },
                    "$SQLFUNC": {
                        "start": {
                            "line": 67,
                            "col": 38,
                            "offset": 1869
                        },
                        "end": {
                            "line": 67,
                            "col": 50,
                            "offset": 1881
                        },
                        "abstract_content": "executeQuery"
                    }
                },
                "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION",
                    "asvs": {
                        "control_id": "5.3.5 Injection",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
                        "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                        "version": "4"
                    },
                    "references": [
                        "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
                        "https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps",
                        "https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"
                    ],
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string",
                    "shortlink": "https://sg.run/OPXp",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9175,
                            "rule_id": "QrUzxR",
                            "rule_name": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
                            "rv_id": 945679,
                            "url": "https://semgrep.dev/playground/r/pZTNOQE/java.lang.security.audit.formatted-sql-string.formatted-sql-string",
                            "version_id": "pZTNOQE"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "b2bdf19c8555b8ce7d33e0c29c6d8cf51c1279e641249159a00c937973f900d4c9d983f877461d299f628d81c95f5dcfb8bd670383186d25cb4738d145d48a9c_0",
                "lines": "            ResultSet rs = statement.executeQuery(sql);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 65,
                                    "col": 69,
                                    "offset": 1786
                                },
                                "end": {
                                    "line": 65,
                                    "col": 77,
                                    "offset": 1794
                                }
                            },
                            "username"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 65,
                                    "col": 20,
                                    "offset": 1737
                                },
                                "end": {
                                    "line": 65,
                                    "col": 23,
                                    "offset": 1740
                                }
                            },
                            "content": "sql"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 67,
                                    "col": 28,
                                    "offset": 1859
                                },
                                "end": {
                                    "line": 67,
                                    "col": 55,
                                    "offset": 1886
                                }
                            },
                            "statement.executeQuery(sql)"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli",
            "path": "src/main/java/org/joychou/controller/SQLI.java",
            "start": {
                "line": 67,
                "col": 28,
                "offset": 1859
            },
            "end": {
                "line": 67,
                "col": 55,
                "offset": 1886
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 13,
                            "offset": 12
                        },
                        "abstract_content": "executeQuery"
                    },
                    "$X": {
                        "start": {
                            "line": 65,
                            "col": 26,
                            "offset": 1743
                        },
                        "end": {
                            "line": 65,
                            "col": 77,
                            "offset": 1794
                        },
                        "abstract_content": "\"select * from users where username = '\"+username"
                    },
                    "$Y": {
                        "start": {
                            "line": 65,
                            "col": 80,
                            "offset": 1797
                        },
                        "end": {
                            "line": 65,
                            "col": 83,
                            "offset": 1800
                        },
                        "abstract_content": "\"'\""
                    },
                    "$S": {
                        "start": {
                            "line": 67,
                            "col": 28,
                            "offset": 1859
                        },
                        "end": {
                            "line": 67,
                            "col": 37,
                            "offset": 1868
                        },
                        "abstract_content": "statement",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 64,
                                "col": 35,
                                "offset": 1695
                            },
                            "svalue_end": {
                                "line": 64,
                                "col": 56,
                                "offset": 1716
                            },
                            "svalue_abstract_content": "con.createStatement()"
                        }
                    },
                    "$METHOD": {
                        "start": {
                            "line": 67,
                            "col": 38,
                            "offset": 1869
                        },
                        "end": {
                            "line": 67,
                            "col": 50,
                            "offset": 1881
                        },
                        "abstract_content": "executeQuery"
                    },
                    "$SQL": {
                        "start": {
                            "line": 67,
                            "col": 51,
                            "offset": 1882
                        },
                        "end": {
                            "line": 67,
                            "col": 54,
                            "offset": 1885
                        },
                        "abstract_content": "sql",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 65,
                                "col": 26,
                                "offset": 1743
                            },
                            "svalue_end": {
                                "line": 65,
                                "col": 83,
                                "offset": 1800
                            },
                            "svalue_abstract_content": "\"select * from users where username = '\"+username+\"'\""
                        }
                    }
                },
                "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "category": "security",
                    "technology": [
                        "jdbc"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli",
                    "shortlink": "https://sg.run/AvkL",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9206,
                            "rule_id": "oqUe8K",
                            "rule_name": "java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli",
                            "rv_id": 945693,
                            "url": "https://semgrep.dev/playground/r/e1T98E0/java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli",
                            "version_id": "e1T98E0"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "0cfd37497841875bc60fa8a3ac53f32459d6660342963d2b7206af78f01326f33f6aafc7ea02d94a2ffebca6e614c1edee7ec4d38a7e229bd84350eb71939a24_0",
                "lines": "            ResultSet rs = statement.executeQuery(sql);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.java-sql-sqli.java-sql-sqli",
            "path": "src/main/java/org/joychou/controller/SQLI.java",
            "start": {
                "line": 67,
                "col": 51,
                "offset": 1882
            },
            "end": {
                "line": 67,
                "col": 54,
                "offset": 1885
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 13,
                            "offset": 12
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$RET": {
                        "start": {
                            "line": 52,
                            "col": 12,
                            "offset": 1275
                        },
                        "end": {
                            "line": 52,
                            "col": 18,
                            "offset": 1281
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 52,
                            "col": 19,
                            "offset": 1282
                        },
                        "end": {
                            "line": 52,
                            "col": 32,
                            "offset": 1295
                        },
                        "abstract_content": "jdbc_sqli_vul"
                    },
                    "$REQ": {
                        "start": {
                            "line": 52,
                            "col": 34,
                            "offset": 1297
                        },
                        "end": {
                            "line": 52,
                            "col": 46,
                            "offset": 1309
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 52,
                            "col": 59,
                            "offset": 1322
                        },
                        "end": {
                            "line": 52,
                            "col": 65,
                            "offset": 1328
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 52,
                            "col": 66,
                            "offset": 1329
                        },
                        "end": {
                            "line": 52,
                            "col": 74,
                            "offset": 1337
                        },
                        "abstract_content": "username"
                    },
                    "$STMT": {
                        "start": {
                            "line": 67,
                            "col": 28,
                            "offset": 1859
                        },
                        "end": {
                            "line": 67,
                            "col": 37,
                            "offset": 1868
                        },
                        "abstract_content": "statement",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 64,
                                "col": 35,
                                "offset": 1695
                            },
                            "svalue_end": {
                                "line": 64,
                                "col": 56,
                                "offset": 1716
                            },
                            "svalue_abstract_content": "con.createStatement()"
                        }
                    },
                    "$SQL": {
                        "start": {
                            "line": 67,
                            "col": 51,
                            "offset": 1882
                        },
                        "end": {
                            "line": 67,
                            "col": 54,
                            "offset": 1885
                        },
                        "abstract_content": "sql",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 65,
                                "col": 26,
                                "offset": 1743
                            },
                            "svalue_end": {
                                "line": 65,
                                "col": 83,
                                "offset": 1800
                            },
                            "svalue_abstract_content": "\"select * from users where username = '\"+username+\"'\""
                        }
                    }
                },
                "message": "Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.",
                "metadata": {
                    "likelihood": "HIGH",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "SQL Injection with Spring",
                    "functional-categories": [
                        "db::sink::sql-or-nosql-query::java.sql",
                        "web::source::cookie::Spring",
                        "web::source::header::Spring",
                        "web::source::http-body::Spring",
                        "web::source::http-params::Spring",
                        "web::source::url-path-params::Spring"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "technology": [
                        "Spring",
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.java-sql-sqli.java-sql-sqli",
                    "shortlink": "https://sg.run/4b3b5",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 141400,
                            "rule_id": "PeUJvJ9",
                            "rule_name": "java.spring.security.java-sql-sqli.java-sql-sqli",
                            "rv_id": 1014878,
                            "url": "https://semgrep.dev/playground/r/e1T96Dq/java.spring.security.java-sql-sqli.java-sql-sqli",
                            "version_id": "e1T96Dq"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.java-sql-sqli.java-sql-sqli",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "CRITICAL",
                "fingerprint": "429602afa590344dc4af2a8a7b835c38b327507e073e37c62f1b90f98d98f443378339efc59595293b5f29feb0a8014a523ec1999b790bb16c62a5e8cadeb491_0",
                "lines": "            ResultSet rs = statement.executeQuery(sql);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 52,
                                    "col": 66,
                                    "offset": 1329
                                },
                                "end": {
                                    "line": 52,
                                    "col": 74,
                                    "offset": 1337
                                }
                            },
                            "username"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 52,
                                    "col": 66,
                                    "offset": 1329
                                },
                                "end": {
                                    "line": 52,
                                    "col": 74,
                                    "offset": 1337
                                }
                            },
                            "content": "username"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 65,
                                    "col": 20,
                                    "offset": 1737
                                },
                                "end": {
                                    "line": 65,
                                    "col": 23,
                                    "offset": 1740
                                }
                            },
                            "content": "sql"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 67,
                                    "col": 51,
                                    "offset": 1882
                                },
                                "end": {
                                    "line": 67,
                                    "col": 54,
                                    "offset": 1885
                                }
                            },
                            "sql"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/SQLI.java",
            "start": {
                "line": 94,
                "col": 6,
                "offset": 2726
            },
            "end": {
                "line": 94,
                "col": 20,
                "offset": 2740
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 95,
                            "col": 12,
                            "offset": 2765
                        },
                        "end": {
                            "line": 95,
                            "col": 18,
                            "offset": 2771
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 95,
                            "col": 19,
                            "offset": 2772
                        },
                        "end": {
                            "line": 95,
                            "col": 32,
                            "offset": 2785
                        },
                        "abstract_content": "jdbc_sqli_sec"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "77c908744c1ab797b6c49d29b203774b8a3a4cfb20af1c4e2eb0fec09ab636a5aaa812aac808b7f6194e5d24948f5e069cd5393a7560579fa3efda6f07df54ae_0",
                "lines": "    @RequestMapping(\"/jdbc/sec\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "path": "src/main/java/org/joychou/controller/SQLI.java",
            "start": {
                "line": 126,
                "col": 13,
                "offset": 3912
            },
            "end": {
                "line": 126,
                "col": 32,
                "offset": 3931
            },
            "extra": {
                "metavars": {
                    "$EXCEPTION": {
                        "start": {
                            "line": 126,
                            "col": 13,
                            "offset": 3912
                        },
                        "end": {
                            "line": 126,
                            "col": 14,
                            "offset": 3913
                        },
                        "abstract_content": "e"
                    }
                },
                "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "cwe": [
                        "CWE-489: Active Debug Code"
                    ],
                    "functional-categories": [
                        "debug::search::active-debug-code::java.lang"
                    ],
                    "owasp": [
                        "A10:2004 - Insecure Configuration Management",
                        "A06:2017 - Security Misconfiguration",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/489.html",
                        "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/",
                        "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces",
                        "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Active Debug Code"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "shortlink": "https://sg.run/4K8z",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27144,
                            "rule_id": "v8U0rZ",
                            "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "rv_id": 947426,
                            "url": "https://semgrep.dev/playground/r/GxTP0lB/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "version_id": "GxTP0lB"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "8fb663edcab138f78143085841f743dc560f0c3f1d4309115ba14f1faccfbe9d9dbdab5821e1a91a153e0ea8ee9acbf887ef016828a1315291bd67f755242859_0",
                "lines": "            e.printStackTrace();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/SQLI.java",
            "start": {
                "line": 138,
                "col": 6,
                "offset": 4333
            },
            "end": {
                "line": 138,
                "col": 20,
                "offset": 4347
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 139,
                            "col": 12,
                            "offset": 4376
                        },
                        "end": {
                            "line": 139,
                            "col": 18,
                            "offset": 4382
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 139,
                            "col": 19,
                            "offset": 4383
                        },
                        "end": {
                            "line": 139,
                            "col": 31,
                            "offset": 4395
                        },
                        "abstract_content": "jdbc_ps_vuln"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "06707f0db0d34f9fbea75851cba149d4ebe441b40711f1a5497ac5cbd6a2c9798a90895f942f4d4311856f252e8d202ff7dd8c8f9c54da83121faf91384ad6e4_0",
                "lines": "    @RequestMapping(\"/jdbc/ps/vuln\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.injection.tainted-sql-string.tainted-sql-string",
            "path": "src/main/java/org/joychou/controller/SQLI.java",
            "start": {
                "line": 149,
                "col": 26,
                "offset": 4758
            },
            "end": {
                "line": 149,
                "col": 83,
                "offset": 4815
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 7,
                            "offset": 6
                        },
                        "abstract_content": "select"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 139,
                            "col": 19,
                            "offset": 4383
                        },
                        "end": {
                            "line": 139,
                            "col": 31,
                            "offset": 4395
                        },
                        "abstract_content": "jdbc_ps_vuln"
                    },
                    "$REQ": {
                        "start": {
                            "line": 139,
                            "col": 33,
                            "offset": 4397
                        },
                        "end": {
                            "line": 139,
                            "col": 45,
                            "offset": 4409
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 139,
                            "col": 58,
                            "offset": 4422
                        },
                        "end": {
                            "line": 139,
                            "col": 64,
                            "offset": 4428
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 139,
                            "col": 65,
                            "offset": 4429
                        },
                        "end": {
                            "line": 139,
                            "col": 73,
                            "offset": 4437
                        },
                        "abstract_content": "username"
                    },
                    "$SQLSTR": {
                        "start": {
                            "line": 149,
                            "col": 27,
                            "offset": 4759
                        },
                        "end": {
                            "line": 149,
                            "col": 65,
                            "offset": 4797
                        },
                        "abstract_content": "select * from users where username = '"
                    }
                },
                "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "interfile": true,
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string",
                    "shortlink": "https://sg.run/9rzz",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 14767,
                            "rule_id": "10UdRR",
                            "rule_name": "java.spring.security.injection.tainted-sql-string.tainted-sql-string",
                            "rv_id": 945745,
                            "url": "https://semgrep.dev/playground/r/8KTKj0G/java.spring.security.injection.tainted-sql-string.tainted-sql-string",
                            "version_id": "8KTKj0G"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "146d3ee2f6b49e604a7452136bd4bd1b7a3a9ac0b3df46dbc3e98d8184c6d0d4311415a9793324abf348bc171accb2f22730cc4dac107cedac0f912400a80e4d_0",
                "lines": "            String sql = \"select * from users where username = '\" + username + \"'\";",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 139,
                                    "col": 65,
                                    "offset": 4429
                                },
                                "end": {
                                    "line": 139,
                                    "col": 73,
                                    "offset": 4437
                                }
                            },
                            "username"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 139,
                                    "col": 65,
                                    "offset": 4429
                                },
                                "end": {
                                    "line": 139,
                                    "col": 73,
                                    "offset": 4437
                                }
                            },
                            "content": "username"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 149,
                                    "col": 26,
                                    "offset": 4758
                                },
                                "end": {
                                    "line": 149,
                                    "col": 83,
                                    "offset": 4815
                                }
                            },
                            "\"select * from users where username = '\" + username + \"'\""
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep",
            "path": "src/main/java/org/joychou/controller/SQLI.java",
            "start": {
                "line": 150,
                "col": 57,
                "offset": 4873
            },
            "end": {
                "line": 150,
                "col": 60,
                "offset": 4876
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 13,
                            "offset": 12
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 139,
                            "col": 19,
                            "offset": 4383
                        },
                        "end": {
                            "line": 139,
                            "col": 31,
                            "offset": 4395
                        },
                        "abstract_content": "jdbc_ps_vuln"
                    },
                    "$REQ": {
                        "start": {
                            "line": 139,
                            "col": 33,
                            "offset": 4397
                        },
                        "end": {
                            "line": 139,
                            "col": 45,
                            "offset": 4409
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 139,
                            "col": 58,
                            "offset": 4422
                        },
                        "end": {
                            "line": 139,
                            "col": 64,
                            "offset": 4428
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 139,
                            "col": 65,
                            "offset": 4429
                        },
                        "end": {
                            "line": 139,
                            "col": 73,
                            "offset": 4437
                        },
                        "abstract_content": "username"
                    },
                    "$C": {
                        "start": {
                            "line": 150,
                            "col": 36,
                            "offset": 4852
                        },
                        "end": {
                            "line": 150,
                            "col": 39,
                            "offset": 4855
                        },
                        "abstract_content": "con",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 144,
                                "col": 30,
                                "offset": 4572
                            },
                            "svalue_end": {
                                "line": 144,
                                "col": 78,
                                "offset": 4620
                            },
                            "svalue_abstract_content": "DriverManager.getConnection(url user password)"
                        }
                    },
                    "$SQL": {
                        "start": {
                            "line": 150,
                            "col": 57,
                            "offset": 4873
                        },
                        "end": {
                            "line": 150,
                            "col": 60,
                            "offset": 4876
                        },
                        "abstract_content": "sql",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 149,
                                "col": 26,
                                "offset": 4758
                            },
                            "svalue_end": {
                                "line": 149,
                                "col": 83,
                                "offset": 4815
                            },
                            "svalue_abstract_content": "\"select * from users where username = '\"+username+\"'\""
                        }
                    }
                },
                "message": "Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.",
                "metadata": {
                    "likelihood": "HIGH",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "interfile": true,
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "5.3.5 Injection",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
                        "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "functional-categories": [
                        "web::source::cookie::Servlet",
                        "web::source::http-params::Servlet",
                        "web::source::http-body::Servlet",
                        "web::source::header::Servlet",
                        "web::source::url-path-params::Servlet",
                        "web::source::cookie::Spring",
                        "web::source::http-params::Spring",
                        "web::source::http-body::Spring",
                        "web::source::header::Spring",
                        "web::source::url-path-params::Spring",
                        "db::sink::sql-or-nosql-query::JPA",
                        "db::sink::sql-or-nosql-query::java.sql"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
                        "https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps",
                        "https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION",
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep",
                    "shortlink": "https://sg.run/w5kd",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 40129,
                            "rule_id": "v8U3yY",
                            "rule_name": "java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep",
                            "rv_id": 1014868,
                            "url": "https://semgrep.dev/playground/r/1QToDP5/java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep",
                            "version_id": "1QToDP5"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "CRITICAL",
                "fingerprint": "ff1c216660966c40b82cb659300412b7539d4eb6e37176adb4872c070408ec7e69b5d57fd934110eb1e46b6801507450d418fde6abdaa7414ac844a1ffb261a6_0",
                "lines": "            PreparedStatement st = con.prepareStatement(sql);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 139,
                                    "col": 65,
                                    "offset": 4429
                                },
                                "end": {
                                    "line": 139,
                                    "col": 73,
                                    "offset": 4437
                                }
                            },
                            "username"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 139,
                                    "col": 65,
                                    "offset": 4429
                                },
                                "end": {
                                    "line": 139,
                                    "col": 73,
                                    "offset": 4437
                                }
                            },
                            "content": "username"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 149,
                                    "col": 20,
                                    "offset": 4752
                                },
                                "end": {
                                    "line": 149,
                                    "col": 23,
                                    "offset": 4755
                                }
                            },
                            "content": "sql"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 150,
                                    "col": 57,
                                    "offset": 4873
                                },
                                "end": {
                                    "line": 150,
                                    "col": 60,
                                    "offset": 4876
                                }
                            },
                            "sql"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.java-sql-sqli.java-sql-sqli",
            "path": "src/main/java/org/joychou/controller/SQLI.java",
            "start": {
                "line": 150,
                "col": 57,
                "offset": 4873
            },
            "end": {
                "line": 150,
                "col": 60,
                "offset": 4876
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 13,
                            "offset": 12
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$RET": {
                        "start": {
                            "line": 139,
                            "col": 12,
                            "offset": 4376
                        },
                        "end": {
                            "line": 139,
                            "col": 18,
                            "offset": 4382
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 139,
                            "col": 19,
                            "offset": 4383
                        },
                        "end": {
                            "line": 139,
                            "col": 31,
                            "offset": 4395
                        },
                        "abstract_content": "jdbc_ps_vuln"
                    },
                    "$REQ": {
                        "start": {
                            "line": 139,
                            "col": 33,
                            "offset": 4397
                        },
                        "end": {
                            "line": 139,
                            "col": 45,
                            "offset": 4409
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 139,
                            "col": 58,
                            "offset": 4422
                        },
                        "end": {
                            "line": 139,
                            "col": 64,
                            "offset": 4428
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 139,
                            "col": 65,
                            "offset": 4429
                        },
                        "end": {
                            "line": 139,
                            "col": 73,
                            "offset": 4437
                        },
                        "abstract_content": "username"
                    },
                    "$CONN": {
                        "start": {
                            "line": 150,
                            "col": 36,
                            "offset": 4852
                        },
                        "end": {
                            "line": 150,
                            "col": 39,
                            "offset": 4855
                        },
                        "abstract_content": "con",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 144,
                                "col": 30,
                                "offset": 4572
                            },
                            "svalue_end": {
                                "line": 144,
                                "col": 78,
                                "offset": 4620
                            },
                            "svalue_abstract_content": "DriverManager.getConnection(url user password)"
                        }
                    },
                    "$SQL": {
                        "start": {
                            "line": 150,
                            "col": 57,
                            "offset": 4873
                        },
                        "end": {
                            "line": 150,
                            "col": 60,
                            "offset": 4876
                        },
                        "abstract_content": "sql",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 149,
                                "col": 26,
                                "offset": 4758
                            },
                            "svalue_end": {
                                "line": 149,
                                "col": 83,
                                "offset": 4815
                            },
                            "svalue_abstract_content": "\"select * from users where username = '\"+username+\"'\""
                        }
                    }
                },
                "message": "Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.",
                "metadata": {
                    "likelihood": "HIGH",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "SQL Injection with Spring",
                    "functional-categories": [
                        "db::sink::sql-or-nosql-query::java.sql",
                        "web::source::cookie::Spring",
                        "web::source::header::Spring",
                        "web::source::http-body::Spring",
                        "web::source::http-params::Spring",
                        "web::source::url-path-params::Spring"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "technology": [
                        "Spring",
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.java-sql-sqli.java-sql-sqli",
                    "shortlink": "https://sg.run/4b3b5",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 141400,
                            "rule_id": "PeUJvJ9",
                            "rule_name": "java.spring.security.java-sql-sqli.java-sql-sqli",
                            "rv_id": 1014878,
                            "url": "https://semgrep.dev/playground/r/e1T96Dq/java.spring.security.java-sql-sqli.java-sql-sqli",
                            "version_id": "e1T96Dq"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.java-sql-sqli.java-sql-sqli",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "CRITICAL",
                "fingerprint": "631ecc221b4d484b38ac2a50fc7e945a310691c827be4fc4fdb9d81a2b4be67289a229ec445a0676319e9e24efb592f25bd029e4e51ef813ce7f11de8c4900f5_0",
                "lines": "            PreparedStatement st = con.prepareStatement(sql);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 139,
                                    "col": 65,
                                    "offset": 4429
                                },
                                "end": {
                                    "line": 139,
                                    "col": 73,
                                    "offset": 4437
                                }
                            },
                            "username"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 139,
                                    "col": 65,
                                    "offset": 4429
                                },
                                "end": {
                                    "line": 139,
                                    "col": 73,
                                    "offset": 4437
                                }
                            },
                            "content": "username"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 149,
                                    "col": 20,
                                    "offset": 4752
                                },
                                "end": {
                                    "line": 149,
                                    "col": 23,
                                    "offset": 4755
                                }
                            },
                            "content": "sql"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 150,
                                    "col": 57,
                                    "offset": 4873
                                },
                                "end": {
                                    "line": 150,
                                    "col": 60,
                                    "offset": 4876
                                }
                            },
                            "sql"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
            "path": "src/main/java/org/joychou/controller/SQLI.java",
            "start": {
                "line": 153,
                "col": 28,
                "offset": 4947
            },
            "end": {
                "line": 153,
                "col": 45,
                "offset": 4964
            },
            "extra": {
                "metavars": {
                    "$ANNOT": {
                        "start": {
                            "line": 139,
                            "col": 12,
                            "offset": 4376
                        },
                        "end": {
                            "line": 139,
                            "col": 18,
                            "offset": 4382
                        },
                        "abstract_content": "String"
                    },
                    "$FUNC": {
                        "start": {
                            "line": 139,
                            "col": 19,
                            "offset": 4383
                        },
                        "end": {
                            "line": 139,
                            "col": 31,
                            "offset": 4395
                        },
                        "abstract_content": "jdbc_ps_vuln"
                    },
                    "$P": {
                        "start": {
                            "line": 153,
                            "col": 28,
                            "offset": 4947
                        },
                        "end": {
                            "line": 153,
                            "col": 30,
                            "offset": 4949
                        },
                        "abstract_content": "st",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 150,
                                "col": 36,
                                "offset": 4852
                            },
                            "svalue_end": {
                                "line": 150,
                                "col": 61,
                                "offset": 4877
                            },
                            "svalue_abstract_content": "con.prepareStatement(sql)"
                        }
                    },
                    "$SQLFUNC": {
                        "start": {
                            "line": 153,
                            "col": 31,
                            "offset": 4950
                        },
                        "end": {
                            "line": 153,
                            "col": 43,
                            "offset": 4962
                        },
                        "abstract_content": "executeQuery"
                    }
                },
                "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION",
                    "asvs": {
                        "control_id": "5.3.5 Injection",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
                        "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                        "version": "4"
                    },
                    "references": [
                        "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
                        "https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps",
                        "https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"
                    ],
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string",
                    "shortlink": "https://sg.run/OPXp",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9175,
                            "rule_id": "QrUzxR",
                            "rule_name": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
                            "rv_id": 945679,
                            "url": "https://semgrep.dev/playground/r/pZTNOQE/java.lang.security.audit.formatted-sql-string.formatted-sql-string",
                            "version_id": "pZTNOQE"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "b857b6044fada264674c542b35b485578605d7cd6d5e796996f32afc4cd60bc039807a9e1ea2c38b42563e9a10538181470261c4fb348467df24a4170c9dc79f_0",
                "lines": "            ResultSet rs = st.executeQuery();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 149,
                                    "col": 69,
                                    "offset": 4801
                                },
                                "end": {
                                    "line": 149,
                                    "col": 77,
                                    "offset": 4809
                                }
                            },
                            "username"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 149,
                                    "col": 20,
                                    "offset": 4752
                                },
                                "end": {
                                    "line": 149,
                                    "col": 23,
                                    "offset": 4755
                                }
                            },
                            "content": "sql"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 150,
                                    "col": 31,
                                    "offset": 4847
                                },
                                "end": {
                                    "line": 150,
                                    "col": 33,
                                    "offset": 4849
                                }
                            },
                            "content": "st"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SQLI.java",
                                "start": {
                                    "line": 153,
                                    "col": 28,
                                    "offset": 4947
                                },
                                "end": {
                                    "line": 153,
                                    "col": 45,
                                    "offset": 4964
                                }
                            },
                            "st.executeQuery()"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "path": "src/main/java/org/joychou/controller/SQLI.java",
            "start": {
                "line": 168,
                "col": 13,
                "offset": 5447
            },
            "end": {
                "line": 168,
                "col": 32,
                "offset": 5466
            },
            "extra": {
                "metavars": {
                    "$EXCEPTION": {
                        "start": {
                            "line": 168,
                            "col": 13,
                            "offset": 5447
                        },
                        "end": {
                            "line": 168,
                            "col": 14,
                            "offset": 5448
                        },
                        "abstract_content": "e"
                    }
                },
                "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "cwe": [
                        "CWE-489: Active Debug Code"
                    ],
                    "functional-categories": [
                        "debug::search::active-debug-code::java.lang"
                    ],
                    "owasp": [
                        "A10:2004 - Insecure Configuration Management",
                        "A06:2017 - Security Misconfiguration",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/489.html",
                        "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/",
                        "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces",
                        "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Active Debug Code"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "shortlink": "https://sg.run/4K8z",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27144,
                            "rule_id": "v8U0rZ",
                            "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "rv_id": 947426,
                            "url": "https://semgrep.dev/playground/r/GxTP0lB/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "version_id": "GxTP0lB"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "8fb663edcab138f78143085841f743dc560f0c3f1d4309115ba14f1faccfbe9d9dbdab5821e1a91a153e0ea8ee9acbf887ef016828a1315291bd67f755242859_1",
                "lines": "            e.printStackTrace();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.injection.tainted-url-host.tainted-url-host",
            "path": "src/main/java/org/joychou/controller/SSRF.java",
            "start": {
                "line": 127,
                "col": 21,
                "offset": 4096
            },
            "end": {
                "line": 127,
                "col": 33,
                "offset": 4108
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 13,
                            "offset": 12
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 119,
                            "col": 17,
                            "offset": 3647
                        },
                        "end": {
                            "line": 119,
                            "col": 27,
                            "offset": 3657
                        },
                        "abstract_content": "openStream"
                    },
                    "$REQ": {
                        "start": {
                            "line": 119,
                            "col": 29,
                            "offset": 3659
                        },
                        "end": {
                            "line": 119,
                            "col": 41,
                            "offset": 3671
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 119,
                            "col": 42,
                            "offset": 3672
                        },
                        "end": {
                            "line": 119,
                            "col": 48,
                            "offset": 3678
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 119,
                            "col": 49,
                            "offset": 3679
                        },
                        "end": {
                            "line": 119,
                            "col": 52,
                            "offset": 3682
                        },
                        "abstract_content": "url"
                    },
                    "$ONEARG": {
                        "start": {
                            "line": 127,
                            "col": 29,
                            "offset": 4104
                        },
                        "end": {
                            "line": 127,
                            "col": 32,
                            "offset": 4107
                        },
                        "abstract_content": "url"
                    }
                },
                "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, hardcode the correct host, or ensure that the user data can only affect the path or parameters.",
                "metadata": {
                    "cwe": [
                        "CWE-918: Server-Side Request Forgery (SSRF)"
                    ],
                    "owasp": [
                        "A10:2021 - Server-Side Request Forgery (SSRF)"
                    ],
                    "references": [
                        "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "impact": "MEDIUM",
                    "likelihood": "MEDIUM",
                    "confidence": "MEDIUM",
                    "interfile": true,
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Server-Side Request Forgery (SSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host",
                    "shortlink": "https://sg.run/vkYn",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 22077,
                            "rule_id": "oqUZo8",
                            "rule_name": "java.spring.security.injection.tainted-url-host.tainted-url-host",
                            "rv_id": 945747,
                            "url": "https://semgrep.dev/playground/r/QkTZzLZ/java.spring.security.injection.tainted-url-host.tainted-url-host",
                            "version_id": "QkTZzLZ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "befb4bc2ec20a6a23a7de428430be11e215431d204e4adb71d91f50eb20e919cc883c93b7048b1c8d09868a8430aa75e45364158a2c6c1267ed31d77d935c94b_0",
                "lines": "            URL u = new URL(url);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SSRF.java",
                                "start": {
                                    "line": 119,
                                    "col": 49,
                                    "offset": 3679
                                },
                                "end": {
                                    "line": 119,
                                    "col": 52,
                                    "offset": 3682
                                }
                            },
                            "url"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SSRF.java",
                                "start": {
                                    "line": 119,
                                    "col": 49,
                                    "offset": 3679
                                },
                                "end": {
                                    "line": 119,
                                    "col": 52,
                                    "offset": 3682
                                }
                            },
                            "content": "url"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SSRF.java",
                                "start": {
                                    "line": 127,
                                    "col": 21,
                                    "offset": 4096
                                },
                                "end": {
                                    "line": 127,
                                    "col": 33,
                                    "offset": 4108
                                }
                            },
                            "new URL(url)"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add",
            "path": "src/main/java/org/joychou/controller/SSRF.java",
            "start": {
                "line": 130,
                "col": 27,
                "offset": 4203
            },
            "end": {
                "line": 130,
                "col": 41,
                "offset": 4217
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 11,
                            "offset": 10
                        },
                        "abstract_content": "openStream"
                    },
                    "$MAPPING": {
                        "start": {
                            "line": 118,
                            "col": 6,
                            "offset": 3605
                        },
                        "end": {
                            "line": 118,
                            "col": 16,
                            "offset": 3615
                        },
                        "abstract_content": "GetMapping"
                    },
                    "$RET": {
                        "start": {
                            "line": 119,
                            "col": 12,
                            "offset": 3642
                        },
                        "end": {
                            "line": 119,
                            "col": 16,
                            "offset": 3646
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 119,
                            "col": 17,
                            "offset": 3647
                        },
                        "end": {
                            "line": 119,
                            "col": 27,
                            "offset": 3657
                        },
                        "abstract_content": "openStream"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 119,
                            "col": 17,
                            "offset": 3647
                        },
                        "end": {
                            "line": 119,
                            "col": 27,
                            "offset": 3657
                        },
                        "abstract_content": "openStream"
                    },
                    "$REQ": {
                        "start": {
                            "line": 119,
                            "col": 29,
                            "offset": 3659
                        },
                        "end": {
                            "line": 119,
                            "col": 41,
                            "offset": 3671
                        },
                        "abstract_content": "RequestParam"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 119,
                            "col": 42,
                            "offset": 3672
                        },
                        "end": {
                            "line": 119,
                            "col": 48,
                            "offset": 3678
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 119,
                            "col": 49,
                            "offset": 3679
                        },
                        "end": {
                            "line": 119,
                            "col": 52,
                            "offset": 3682
                        },
                        "abstract_content": "url"
                    },
                    "$URL": {
                        "start": {
                            "line": 130,
                            "col": 27,
                            "offset": 4203
                        },
                        "end": {
                            "line": 130,
                            "col": 28,
                            "offset": 4204
                        },
                        "abstract_content": "u",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 127,
                                "col": 21,
                                "offset": 4096
                            },
                            "svalue_end": {
                                "line": 127,
                                "col": 33,
                                "offset": 4108
                            },
                            "svalue_abstract_content": "new URL(url)"
                        }
                    },
                    "$FUNC": {
                        "start": {
                            "line": 130,
                            "col": 29,
                            "offset": 4205
                        },
                        "end": {
                            "line": 130,
                            "col": 39,
                            "offset": 4215
                        },
                        "abstract_content": "openStream"
                    }
                },
                "message": "Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-918: Server-Side Request Forgery (SSRF)"
                    ],
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "Server-Side Request Forgery (SSRF) with Spring",
                    "functional-categories": [
                        "net::sink::http-request::ApacheHttpClient",
                        "net::sink::http-request::Guava",
                        "net::sink::http-request::HttpClient",
                        "net::sink::http-request::Jsoup",
                        "net::sink::http-request::OkHttp",
                        "net::sink::http-request::RestTemplate",
                        "net::sink::http-request::URL",
                        "net::sink::http-request::WebClient",
                        "web::sink::http-request::ApacheHttpClient",
                        "web::sink::http-request::Guava",
                        "web::sink::http-request::HttpClient",
                        "web::sink::http-request::Jsoup",
                        "web::sink::http-request::OkHttp",
                        "web::sink::http-request::RestTemplate",
                        "web::sink::http-request::URL",
                        "web::sink::http-request::WebClient",
                        "web::source::cookie::Spring",
                        "web::source::header::Spring",
                        "web::source::http-body::Spring",
                        "web::source::http-params::Spring",
                        "web::source::url-path-params::Spring"
                    ],
                    "owasp": [
                        "A10:2021 - Server-Side Request Forgery (SSRF)"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
                    ],
                    "supersedes": [
                        "java.servlets.security.tainted-ssrf-deepsemgrep-add.tainted-ssrf-deepsemgrep-add"
                    ],
                    "technology": [
                        "Spring",
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Server-Side Request Forgery (SSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add",
                    "shortlink": "https://sg.run/dnYZ",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 43778,
                            "rule_id": "JDU4Yg",
                            "rule_name": "java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add",
                            "rv_id": 973731,
                            "url": "https://semgrep.dev/playground/r/RGTA9vA/java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add",
                            "version_id": "RGTA9vA"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "6d0124f13fea96ee843a87af29d5e12d416749b934cde23d0fdf3110c87ca8831536b78a7f19088e2c3acf940055414fd913e36681b871413bbaf831414e648d_0",
                "lines": "            inputStream = u.openStream(); // send request",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SSRF.java",
                                "start": {
                                    "line": 119,
                                    "col": 49,
                                    "offset": 3679
                                },
                                "end": {
                                    "line": 119,
                                    "col": 52,
                                    "offset": 3682
                                }
                            },
                            "url"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SSRF.java",
                                "start": {
                                    "line": 119,
                                    "col": 49,
                                    "offset": 3679
                                },
                                "end": {
                                    "line": 119,
                                    "col": 52,
                                    "offset": 3682
                                }
                            },
                            "content": "url"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SSRF.java",
                                "start": {
                                    "line": 127,
                                    "col": 17,
                                    "offset": 4092
                                },
                                "end": {
                                    "line": 127,
                                    "col": 18,
                                    "offset": 4093
                                }
                            },
                            "content": "u"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SSRF.java",
                                "start": {
                                    "line": 130,
                                    "col": 27,
                                    "offset": 4203
                                },
                                "end": {
                                    "line": 130,
                                    "col": 41,
                                    "offset": 4217
                                }
                            },
                            "u.openStream()"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution",
            "path": "src/main/java/org/joychou/controller/SSTI.java",
            "start": {
                "line": 37,
                "col": 51,
                "offset": 1231
            },
            "end": {
                "line": 37,
                "col": 59,
                "offset": 1239
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 11,
                            "offset": 10
                        },
                        "abstract_content": "GetMapping"
                    },
                    "$MAPPING": {
                        "start": {
                            "line": 26,
                            "col": 6,
                            "offset": 843
                        },
                        "end": {
                            "line": 26,
                            "col": 16,
                            "offset": 853
                        },
                        "abstract_content": "GetMapping"
                    },
                    "$RET": {
                        "start": {
                            "line": 27,
                            "col": 12,
                            "offset": 878
                        },
                        "end": {
                            "line": 27,
                            "col": 16,
                            "offset": 882
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 27,
                            "col": 17,
                            "offset": 883
                        },
                        "end": {
                            "line": 27,
                            "col": 25,
                            "offset": 891
                        },
                        "abstract_content": "velocity"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 27,
                            "col": 17,
                            "offset": 883
                        },
                        "end": {
                            "line": 27,
                            "col": 25,
                            "offset": 891
                        },
                        "abstract_content": "velocity"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 27,
                            "col": 26,
                            "offset": 892
                        },
                        "end": {
                            "line": 27,
                            "col": 32,
                            "offset": 898
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 27,
                            "col": 33,
                            "offset": 899
                        },
                        "end": {
                            "line": 27,
                            "col": 41,
                            "offset": 907
                        },
                        "abstract_content": "template"
                    },
                    "$CONTEXT": {
                        "start": {
                            "line": 37,
                            "col": 27,
                            "offset": 1207
                        },
                        "end": {
                            "line": 37,
                            "col": 34,
                            "offset": 1214
                        },
                        "abstract_content": "context"
                    },
                    "$WRITER": {
                        "start": {
                            "line": 37,
                            "col": 36,
                            "offset": 1216
                        },
                        "end": {
                            "line": 37,
                            "col": 41,
                            "offset": 1221
                        },
                        "abstract_content": "swOut",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 36,
                                "col": 30,
                                "offset": 1161
                            },
                            "svalue_end": {
                                "line": 36,
                                "col": 48,
                                "offset": 1179
                            },
                            "svalue_abstract_content": "new StringWriter()"
                        }
                    },
                    "$LOGTAG": {
                        "start": {
                            "line": 37,
                            "col": 43,
                            "offset": 1223
                        },
                        "end": {
                            "line": 37,
                            "col": 49,
                            "offset": 1229
                        },
                        "abstract_content": "\"test\""
                    },
                    "$SCRIPT": {
                        "start": {
                            "line": 37,
                            "col": 51,
                            "offset": 1231
                        },
                        "end": {
                            "line": 37,
                            "col": 59,
                            "offset": 1239
                        },
                        "abstract_content": "template"
                    }
                },
                "message": "User data flows into a script engine or another means of dynamic code evaluation. This is unsafe and could lead to code injection or arbitrary code execution as a result. Avoid inputting user data into code execution or use proper sandboxing if user code evaluation is necessary.",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
                    ],
                    "display-name": "Eval Injection with Spring",
                    "functional-categories": [
                        "expression-lang::sink::expression::commons-jexl",
                        "expression-lang::sink::expression::javax.el",
                        "expression-lang::sink::expression::javax.script",
                        "expression-lang::sink::expression::velocity",
                        "web::source::cookie::Spring",
                        "web::source::header::Spring",
                        "web::source::http-body::Spring",
                        "web::source::http-params::Spring",
                        "web::source::url-path-params::Spring"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://0xn3va.gitbook.io/cheat-sheets/framework/spring/spel-injection",
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "supersedes": [
                        "java.servlets.security.tainted-code-injection-from-http-request-deepsemgrep.tainted-code-injection-from-http-request-deepsemgrep"
                    ],
                    "technology": [
                        "Spring",
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Code Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution",
                    "shortlink": "https://sg.run/OjZB",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 43775,
                            "rule_id": "3qUgzv",
                            "rule_name": "java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution",
                            "rv_id": 973728,
                            "url": "https://semgrep.dev/playground/r/JdTDKg6/java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution",
                            "version_id": "JdTDKg6"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "f72f9936a64e8930819fbdf958856c66b6b102f583c5e473ecf5c71ea0bb7bcca3e08be20b406b14c7ff14a944be50777d797bd7d43df3fd14a0c25e402bc3fe_0",
                "lines": "        Velocity.evaluate(context, swOut, \"test\", template);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SSTI.java",
                                "start": {
                                    "line": 27,
                                    "col": 33,
                                    "offset": 899
                                },
                                "end": {
                                    "line": 27,
                                    "col": 41,
                                    "offset": 907
                                }
                            },
                            "template"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SSTI.java",
                                "start": {
                                    "line": 27,
                                    "col": 33,
                                    "offset": 899
                                },
                                "end": {
                                    "line": 27,
                                    "col": 41,
                                    "offset": 907
                                }
                            },
                            "content": "template"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SSTI.java",
                                "start": {
                                    "line": 37,
                                    "col": 51,
                                    "offset": 1231
                                },
                                "end": {
                                    "line": 37,
                                    "col": 59,
                                    "offset": 1239
                                }
                            },
                            "template"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.object-deserialization.object-deserialization",
            "path": "src/main/java/org/joychou/controller/Shiro.java",
            "start": {
                "line": 37,
                "col": 13,
                "offset": 1385
            },
            "end": {
                "line": 37,
                "col": 65,
                "offset": 1437
            },
            "extra": {
                "metavars": {},
                "message": "Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object.",
                "metadata": {
                    "cwe": [
                        "CWE-502: Deserialization of Untrusted Data"
                    ],
                    "owasp": [
                        "A08:2017 - Insecure Deserialization",
                        "A08:2021 - Software and Data Integrity Failures"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#OBJECT_DESERIALIZATION",
                    "references": [
                        "https://www.owasp.org/index.php/Deserialization_of_untrusted_data",
                        "https://www.oracle.com/java/technologies/javase/seccodeguide.html#8"
                    ],
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Insecure Deserialization "
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.object-deserialization.object-deserialization",
                    "shortlink": "https://sg.run/Ek0A",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9181,
                            "rule_id": "GdU7py",
                            "rule_name": "java.lang.security.audit.object-deserialization.object-deserialization",
                            "rv_id": 945687,
                            "url": "https://semgrep.dev/playground/r/bZTXw4q/java.lang.security.audit.object-deserialization.object-deserialization",
                            "version_id": "bZTXw4q"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.object-deserialization.object-deserialization",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "0d5d50056aa95acdad50d829b9144eedf168629b9d9f8b04eafee3537764ca5df7048c3bcafdea2472a430337fa04171f4b6237d8834e4a3d8ec340df97d6fcf_0",
                "lines": "            ObjectInputStream in = new ObjectInputStream(bytes);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.audit.spel-injection.spel-injection",
            "path": "src/main/java/org/joychou/controller/SpEL.java",
            "start": {
                "line": 24,
                "col": 5,
                "offset": 782
            },
            "end": {
                "line": 28,
                "col": 6,
                "offset": 993
            },
            "extra": {
                "metavars": {
                    "$X": {
                        "start": {
                            "line": 25,
                            "col": 12,
                            "offset": 824
                        },
                        "end": {
                            "line": 25,
                            "col": 18,
                            "offset": 830
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 25,
                            "col": 19,
                            "offset": 831
                        },
                        "end": {
                            "line": 25,
                            "col": 29,
                            "offset": 841
                        },
                        "abstract_content": "spel_vuln1"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 27,
                            "col": 16,
                            "offset": 935
                        },
                        "end": {
                            "line": 27,
                            "col": 22,
                            "offset": 941
                        },
                        "abstract_content": "parser",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 26,
                                "col": 35,
                                "offset": 892
                            },
                            "svalue_end": {
                                "line": 26,
                                "col": 61,
                                "offset": 918
                            },
                            "svalue_abstract_content": "new SpelExpressionParser()"
                        }
                    }
                },
                "message": "A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.",
                "metadata": {
                    "cwe": [
                        "CWE-94: Improper Control of Generation of Code ('Code Injection')"
                    ],
                    "owasp": [
                        "A03:2021 - Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPEL_INJECTION",
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "cwe2022-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Code Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.audit.spel-injection.spel-injection",
                    "shortlink": "https://sg.run/XBp4",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9220,
                            "rule_id": "x8Un7b",
                            "rule_name": "java.spring.security.audit.spel-injection.spel-injection",
                            "rv_id": 945734,
                            "url": "https://semgrep.dev/playground/r/w8TKJ42/java.spring.security.audit.spel-injection.spel-injection",
                            "version_id": "w8TKJ42"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.audit.spel-injection.spel-injection",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "d35a7d61d728fd32e93ce0332ab84e3947ba96e6cdfea826ae3effc5d6aaad1dc9fb8ff7d08cea81062924c3de096fc8c3f9d10b8758f0d61aafa924c0e3e613_0",
                "lines": "    @RequestMapping(\"/spel/vuln1\")\n    public String spel_vuln1(String value) {\n        ExpressionParser parser = new SpelExpressionParser();\n        return parser.parseExpression(value).getValue().toString();\n    }",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/SpEL.java",
            "start": {
                "line": 24,
                "col": 6,
                "offset": 783
            },
            "end": {
                "line": 24,
                "col": 20,
                "offset": 797
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 25,
                            "col": 12,
                            "offset": 824
                        },
                        "end": {
                            "line": 25,
                            "col": 18,
                            "offset": 830
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 25,
                            "col": 19,
                            "offset": 831
                        },
                        "end": {
                            "line": 25,
                            "col": 29,
                            "offset": 841
                        },
                        "abstract_content": "spel_vuln1"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "0eee11fb03b7f3242dbaf5446c24d42d419d0c795b6279c9c0d146f5f2b0f7427ef7d1742d9cecae9f1c0e6cb7beb68e5c41609b7a3e4369c2b3c27115e665d7_0",
                "lines": "    @RequestMapping(\"/spel/vuln1\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution",
            "path": "src/main/java/org/joychou/controller/SpEL.java",
            "start": {
                "line": 27,
                "col": 39,
                "offset": 958
            },
            "end": {
                "line": 27,
                "col": 44,
                "offset": 963
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 9,
                            "offset": 8
                        },
                        "abstract_content": "getValue"
                    },
                    "$MAPPING": {
                        "start": {
                            "line": 24,
                            "col": 6,
                            "offset": 783
                        },
                        "end": {
                            "line": 24,
                            "col": 20,
                            "offset": 797
                        },
                        "abstract_content": "RequestMapping"
                    },
                    "$RET": {
                        "start": {
                            "line": 25,
                            "col": 12,
                            "offset": 824
                        },
                        "end": {
                            "line": 25,
                            "col": 18,
                            "offset": 830
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 25,
                            "col": 19,
                            "offset": 831
                        },
                        "end": {
                            "line": 25,
                            "col": 29,
                            "offset": 841
                        },
                        "abstract_content": "spel_vuln1"
                    },
                    "$METHODNAME": {
                        "start": {
                            "line": 25,
                            "col": 19,
                            "offset": 831
                        },
                        "end": {
                            "line": 25,
                            "col": 29,
                            "offset": 841
                        },
                        "abstract_content": "spel_vuln1"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 25,
                            "col": 30,
                            "offset": 842
                        },
                        "end": {
                            "line": 25,
                            "col": 36,
                            "offset": 848
                        },
                        "abstract_content": "String"
                    },
                    "$SOURCE": {
                        "start": {
                            "line": 25,
                            "col": 37,
                            "offset": 849
                        },
                        "end": {
                            "line": 25,
                            "col": 42,
                            "offset": 854
                        },
                        "abstract_content": "value"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 27,
                            "col": 16,
                            "offset": 935
                        },
                        "end": {
                            "line": 27,
                            "col": 22,
                            "offset": 941
                        },
                        "abstract_content": "parser",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 26,
                                "col": 35,
                                "offset": 892
                            },
                            "svalue_end": {
                                "line": 26,
                                "col": 61,
                                "offset": 918
                            },
                            "svalue_abstract_content": "new SpelExpressionParser()"
                        }
                    },
                    "$SCRIPT": {
                        "start": {
                            "line": 27,
                            "col": 39,
                            "offset": 958
                        },
                        "end": {
                            "line": 27,
                            "col": 44,
                            "offset": 963
                        },
                        "abstract_content": "value"
                    },
                    "$FUNCS": {
                        "start": {
                            "line": 27,
                            "col": 46,
                            "offset": 965
                        },
                        "end": {
                            "line": 27,
                            "col": 54,
                            "offset": 973
                        },
                        "abstract_content": "getValue"
                    }
                },
                "message": "User data flows into a script engine or another means of dynamic code evaluation. This is unsafe and could lead to code injection or arbitrary code execution as a result. Avoid inputting user data into code execution or use proper sandboxing if user code evaluation is necessary.",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
                    ],
                    "display-name": "Eval Injection with Spring",
                    "functional-categories": [
                        "expression-lang::sink::expression::commons-jexl",
                        "expression-lang::sink::expression::javax.el",
                        "expression-lang::sink::expression::javax.script",
                        "expression-lang::sink::expression::velocity",
                        "web::source::cookie::Spring",
                        "web::source::header::Spring",
                        "web::source::http-body::Spring",
                        "web::source::http-params::Spring",
                        "web::source::url-path-params::Spring"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://0xn3va.gitbook.io/cheat-sheets/framework/spring/spel-injection",
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "supersedes": [
                        "java.servlets.security.tainted-code-injection-from-http-request-deepsemgrep.tainted-code-injection-from-http-request-deepsemgrep"
                    ],
                    "technology": [
                        "Spring",
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Code Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution",
                    "shortlink": "https://sg.run/OjZB",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 43775,
                            "rule_id": "3qUgzv",
                            "rule_name": "java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution",
                            "rv_id": 973728,
                            "url": "https://semgrep.dev/playground/r/JdTDKg6/java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution",
                            "version_id": "JdTDKg6"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "e5a8981034927fa9e6b0285bb153f9e46d8f7ff2e0b798c1aa9f915cf28603532c81e8d29ca738937213555e48b664fcf8d6496dab93560cefe7dfc091da0191_0",
                "lines": "        return parser.parseExpression(value).getValue().toString();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SpEL.java",
                                "start": {
                                    "line": 25,
                                    "col": 37,
                                    "offset": 849
                                },
                                "end": {
                                    "line": 25,
                                    "col": 42,
                                    "offset": 854
                                }
                            },
                            "value"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/SpEL.java",
                                "start": {
                                    "line": 25,
                                    "col": 37,
                                    "offset": 849
                                },
                                "end": {
                                    "line": 25,
                                    "col": 42,
                                    "offset": 854
                                }
                            },
                            "content": "value"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/SpEL.java",
                                "start": {
                                    "line": 27,
                                    "col": 39,
                                    "offset": 958
                                },
                                "end": {
                                    "line": 27,
                                    "col": 44,
                                    "offset": 963
                                }
                            },
                            "value"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.audit.spel-injection.spel-injection",
            "path": "src/main/java/org/joychou/controller/SpEL.java",
            "start": {
                "line": 35,
                "col": 5,
                "offset": 1195
            },
            "end": {
                "line": 42,
                "col": 6,
                "offset": 1636
            },
            "extra": {
                "metavars": {
                    "$X": {
                        "start": {
                            "line": 36,
                            "col": 12,
                            "offset": 1236
                        },
                        "end": {
                            "line": 36,
                            "col": 18,
                            "offset": 1242
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 36,
                            "col": 19,
                            "offset": 1243
                        },
                        "end": {
                            "line": 36,
                            "col": 29,
                            "offset": 1253
                        },
                        "abstract_content": "spel_vuln2"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 39,
                            "col": 33,
                            "offset": 1445
                        },
                        "end": {
                            "line": 39,
                            "col": 39,
                            "offset": 1451
                        },
                        "abstract_content": "parser",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 38,
                                "col": 39,
                                "offset": 1385
                            },
                            "svalue_end": {
                                "line": 38,
                                "col": 65,
                                "offset": 1411
                            },
                            "svalue_abstract_content": "new SpelExpressionParser()"
                        }
                    }
                },
                "message": "A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.",
                "metadata": {
                    "cwe": [
                        "CWE-94: Improper Control of Generation of Code ('Code Injection')"
                    ],
                    "owasp": [
                        "A03:2021 - Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPEL_INJECTION",
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "cwe2022-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Code Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.audit.spel-injection.spel-injection",
                    "shortlink": "https://sg.run/XBp4",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9220,
                            "rule_id": "x8Un7b",
                            "rule_name": "java.spring.security.audit.spel-injection.spel-injection",
                            "rv_id": 945734,
                            "url": "https://semgrep.dev/playground/r/w8TKJ42/java.spring.security.audit.spel-injection.spel-injection",
                            "version_id": "w8TKJ42"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.audit.spel-injection.spel-injection",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "29ce5bc495279bb173163d12cb09a28f9950253f44de06d91d43ccb7fc34f56d501cee9a56484217f6268d32b21148d8b8c5c877aa5da87003958f5f2dc1495a_0",
                "lines": "    @RequestMapping(\"spel/vuln2\")\n    public String spel_vuln2(String value) {\n        StandardEvaluationContext context = new StandardEvaluationContext();\n        SpelExpressionParser parser = new SpelExpressionParser();\n        Expression expression = parser.parseExpression(value, new TemplateParserContext());\n        Object x = expression.getValue(context);    // trigger vulnerability point\n        return x.toString();   // response\n    }",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/SpEL.java",
            "start": {
                "line": 35,
                "col": 6,
                "offset": 1196
            },
            "end": {
                "line": 35,
                "col": 20,
                "offset": 1210
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 36,
                            "col": 12,
                            "offset": 1236
                        },
                        "end": {
                            "line": 36,
                            "col": 18,
                            "offset": 1242
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 36,
                            "col": 19,
                            "offset": 1243
                        },
                        "end": {
                            "line": 36,
                            "col": 29,
                            "offset": 1253
                        },
                        "abstract_content": "spel_vuln2"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "9e0b69284b4ec742b6c31a6652691401e9ffe250a78188a01df730aca34fcc204b4f644afe3beb7d71920e0714e62ba35f217596f4f79b0a8f1ab13227c4395f_0",
                "lines": "    @RequestMapping(\"spel/vuln2\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.audit.spel-injection.spel-injection",
            "path": "src/main/java/org/joychou/controller/SpEL.java",
            "start": {
                "line": 47,
                "col": 5,
                "offset": 1701
            },
            "end": {
                "line": 54,
                "col": 6,
                "offset": 2113
            },
            "extra": {
                "metavars": {
                    "$X": {
                        "start": {
                            "line": 48,
                            "col": 12,
                            "offset": 1740
                        },
                        "end": {
                            "line": 48,
                            "col": 18,
                            "offset": 1746
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 48,
                            "col": 19,
                            "offset": 1747
                        },
                        "end": {
                            "line": 48,
                            "col": 27,
                            "offset": 1755
                        },
                        "abstract_content": "spel_sec"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 51,
                            "col": 33,
                            "offset": 1970
                        },
                        "end": {
                            "line": 51,
                            "col": 39,
                            "offset": 1976
                        },
                        "abstract_content": "parser",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 50,
                                "col": 39,
                                "offset": 1910
                            },
                            "svalue_end": {
                                "line": 50,
                                "col": 65,
                                "offset": 1936
                            },
                            "svalue_abstract_content": "new SpelExpressionParser()"
                        }
                    }
                },
                "message": "A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.",
                "metadata": {
                    "cwe": [
                        "CWE-94: Improper Control of Generation of Code ('Code Injection')"
                    ],
                    "owasp": [
                        "A03:2021 - Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPEL_INJECTION",
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "cwe2022-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Code Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.audit.spel-injection.spel-injection",
                    "shortlink": "https://sg.run/XBp4",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9220,
                            "rule_id": "x8Un7b",
                            "rule_name": "java.spring.security.audit.spel-injection.spel-injection",
                            "rv_id": 945734,
                            "url": "https://semgrep.dev/playground/r/w8TKJ42/java.spring.security.audit.spel-injection.spel-injection",
                            "version_id": "w8TKJ42"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.audit.spel-injection.spel-injection",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "655895ec7b70e246f91dbe0e43fbb4f96874417bb5ae07dcdef89882bc2883f841a7000739d8671c9772c8aa238c9d1c9ef8b003de2c90e06d814bf8f41b80f7_0",
                "lines": "    @RequestMapping(\"spel/sec\")\n    public String spel_sec(String value) {\n        SimpleEvaluationContext context = SimpleEvaluationContext.forReadOnlyDataBinding().build();\n        SpelExpressionParser parser = new SpelExpressionParser();\n        Expression expression = parser.parseExpression(value, new TemplateParserContext());\n        Object x = expression.getValue(context);\n        return x.toString();\n    }",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/SpEL.java",
            "start": {
                "line": 47,
                "col": 6,
                "offset": 1702
            },
            "end": {
                "line": 47,
                "col": 20,
                "offset": 1716
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 48,
                            "col": 12,
                            "offset": 1740
                        },
                        "end": {
                            "line": 48,
                            "col": 18,
                            "offset": 1746
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 48,
                            "col": 19,
                            "offset": 1747
                        },
                        "end": {
                            "line": 48,
                            "col": 27,
                            "offset": 1755
                        },
                        "abstract_content": "spel_sec"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "a63bccdbe878a35c43ed967d8c827f5900c160d8ed63d0034acd8c08e2e643191cd76dab84da061dd9e0454901ed45efa382a655c613d8fd99234de9d9e68490_0",
                "lines": "    @RequestMapping(\"spel/sec\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect",
            "path": "src/main/java/org/joychou/controller/URLRedirect.java",
            "start": {
                "line": 31,
                "col": 5,
                "offset": 902
            },
            "end": {
                "line": 34,
                "col": 6,
                "offset": 1028
            },
            "extra": {
                "metavars": {
                    "$X": {
                        "start": {
                            "line": 32,
                            "col": 12,
                            "offset": 938
                        },
                        "end": {
                            "line": 32,
                            "col": 18,
                            "offset": 944
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 32,
                            "col": 19,
                            "offset": 945
                        },
                        "end": {
                            "line": 32,
                            "col": 27,
                            "offset": 953
                        },
                        "abstract_content": "redirect"
                    },
                    "$URL": {
                        "start": {
                            "line": 32,
                            "col": 56,
                            "offset": 982
                        },
                        "end": {
                            "line": 32,
                            "col": 59,
                            "offset": 985
                        },
                        "abstract_content": "url"
                    }
                },
                "message": "Application redirects a user to a destination URL specified by a user supplied parameter that is not validated.",
                "metadata": {
                    "cwe": [
                        "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT",
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
                    ],
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Open Redirect"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect",
                    "shortlink": "https://sg.run/9oXz",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9223,
                            "rule_id": "v8Un7w",
                            "rule_name": "java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect",
                            "rv_id": 945742,
                            "url": "https://semgrep.dev/playground/r/ExTg2bQ/java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect",
                            "version_id": "ExTg2bQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "5d60c04e5dfc5f86582ef8e644ed69ca81bb00ad49923332869c41140b668f48212eb6c5aea584febe04308d266bcf74bdaccbc62b93f682ea7e65de0e69e0f3_0",
                "lines": "    @GetMapping(\"/redirect\")\n    public String redirect(@RequestParam(\"url\") String url) {\n        return \"redirect:\" + url;\n    }",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/URLRedirect.java",
            "start": {
                "line": 40,
                "col": 6,
                "offset": 1128
            },
            "end": {
                "line": 40,
                "col": 20,
                "offset": 1142
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 42,
                            "col": 19,
                            "offset": 1193
                        },
                        "end": {
                            "line": 42,
                            "col": 23,
                            "offset": 1197
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 42,
                            "col": 24,
                            "offset": 1198
                        },
                        "end": {
                            "line": 42,
                            "col": 33,
                            "offset": 1207
                        },
                        "abstract_content": "setHeader"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "95b9ec3b6dc669b6456d6ede6b12bb98878290926cf6271da1dffbb0de99c8d3ceaf82794698856dcf7b964f52a5783e8d9ff9cb2c71e898b8badcd7b2375d16_0",
                "lines": "    @RequestMapping(\"/setHeader\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
            "path": "src/main/java/org/joychou/controller/URLRedirect.java",
            "start": {
                "line": 52,
                "col": 5,
                "offset": 1556
            },
            "end": {
                "line": 57,
                "col": 6,
                "offset": 1829
            },
            "extra": {
                "metavars": {
                    "$X": {
                        "start": {
                            "line": 54,
                            "col": 19,
                            "offset": 1625
                        },
                        "end": {
                            "line": 54,
                            "col": 23,
                            "offset": 1629
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 54,
                            "col": 24,
                            "offset": 1630
                        },
                        "end": {
                            "line": 54,
                            "col": 36,
                            "offset": 1642
                        },
                        "abstract_content": "sendRedirect"
                    },
                    "$REQ": {
                        "start": {
                            "line": 54,
                            "col": 56,
                            "offset": 1662
                        },
                        "end": {
                            "line": 54,
                            "col": 63,
                            "offset": 1669
                        },
                        "abstract_content": "request"
                    },
                    "$RES": {
                        "start": {
                            "line": 54,
                            "col": 85,
                            "offset": 1691
                        },
                        "end": {
                            "line": 54,
                            "col": 93,
                            "offset": 1699
                        },
                        "abstract_content": "response"
                    },
                    "$URL": {
                        "start": {
                            "line": 55,
                            "col": 16,
                            "offset": 1737
                        },
                        "end": {
                            "line": 55,
                            "col": 19,
                            "offset": 1740
                        },
                        "abstract_content": "url"
                    }
                },
                "message": "Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs.",
                "metadata": {
                    "cwe": [
                        "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT",
                    "asvs": {
                        "control_id": "5.1.5 Open Redirect",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation-requirements",
                        "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
                    ],
                    "subcategory": [
                        "vuln"
                    ],
                    "impact": "LOW",
                    "likelihood": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Open Redirect"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
                    "shortlink": "https://sg.run/Q51P",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9186,
                            "rule_id": "WAUo0p",
                            "rule_name": "java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
                            "rv_id": 945705,
                            "url": "https://semgrep.dev/playground/r/44TZkx6/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
                            "version_id": "44TZkx6"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "25c3b7732c9f586747779b880dc3b6a12f553e255fce5cb70258e2da7396e946ea13837e253d7c61958d1faa5c9bb4405288abea57bb4dfaac058459f332a74b_0",
                "lines": "    @RequestMapping(\"/sendRedirect\")\n    @ResponseBody\n    public static void sendRedirect(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String url = request.getParameter(\"url\");\n        response.sendRedirect(url); // 302 redirect\n    }",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/URLRedirect.java",
            "start": {
                "line": 52,
                "col": 6,
                "offset": 1557
            },
            "end": {
                "line": 52,
                "col": 20,
                "offset": 1571
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 54,
                            "col": 19,
                            "offset": 1625
                        },
                        "end": {
                            "line": 54,
                            "col": 23,
                            "offset": 1629
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 54,
                            "col": 24,
                            "offset": 1630
                        },
                        "end": {
                            "line": 54,
                            "col": 36,
                            "offset": 1642
                        },
                        "abstract_content": "sendRedirect"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "203b72593a1081e7f4ff4f6cc8fd2b636ca2458d94c0502ab3d5a617cb08a22a5b31b46e42a70e4ccfe1edff02c1acdc720feada58e69582af85256c61b3d0d9_0",
                "lines": "    @RequestMapping(\"/sendRedirect\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/URLRedirect.java",
            "start": {
                "line": 64,
                "col": 6,
                "offset": 2030
            },
            "end": {
                "line": 64,
                "col": 20,
                "offset": 2044
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 66,
                            "col": 19,
                            "offset": 2093
                        },
                        "end": {
                            "line": 66,
                            "col": 23,
                            "offset": 2097
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 66,
                            "col": 24,
                            "offset": 2098
                        },
                        "end": {
                            "line": 66,
                            "col": 31,
                            "offset": 2105
                        },
                        "abstract_content": "forward"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "71a0ea1ae297d6837093173f6485cc8a855e13130dffa83bae81dafbea034ca1c2fb92dd066d466423e0d140606d557fa9c943f9f58f595f00475bb462dcd520_0",
                "lines": "    @RequestMapping(\"/forward\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "path": "src/main/java/org/joychou/controller/URLRedirect.java",
            "start": {
                "line": 72,
                "col": 13,
                "offset": 2383
            },
            "end": {
                "line": 72,
                "col": 32,
                "offset": 2402
            },
            "extra": {
                "metavars": {
                    "$EXCEPTION": {
                        "start": {
                            "line": 72,
                            "col": 13,
                            "offset": 2383
                        },
                        "end": {
                            "line": 72,
                            "col": 14,
                            "offset": 2384
                        },
                        "abstract_content": "e"
                    }
                },
                "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "cwe": [
                        "CWE-489: Active Debug Code"
                    ],
                    "functional-categories": [
                        "debug::search::active-debug-code::java.lang"
                    ],
                    "owasp": [
                        "A10:2004 - Insecure Configuration Management",
                        "A06:2017 - Security Misconfiguration",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/489.html",
                        "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/",
                        "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces",
                        "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Active Debug Code"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "shortlink": "https://sg.run/4K8z",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27144,
                            "rule_id": "v8U0rZ",
                            "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "rv_id": 947426,
                            "url": "https://semgrep.dev/playground/r/GxTP0lB/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "version_id": "GxTP0lB"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "8bdb93011016b484bda23fa54d10a420f3002250800f706d203b97ddc0268c03e1df08c50b13c1b3b151e7d4a951d05e2e6e0e69c5c70cb8a7c0ced59e7d94b2_0",
                "lines": "            e.printStackTrace();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
            "path": "src/main/java/org/joychou/controller/URLRedirect.java",
            "start": {
                "line": 81,
                "col": 5,
                "offset": 2559
            },
            "end": {
                "line": 92,
                "col": 6,
                "offset": 3036
            },
            "extra": {
                "metavars": {
                    "$X": {
                        "start": {
                            "line": 83,
                            "col": 12,
                            "offset": 2625
                        },
                        "end": {
                            "line": 83,
                            "col": 16,
                            "offset": 2629
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 83,
                            "col": 17,
                            "offset": 2630
                        },
                        "end": {
                            "line": 83,
                            "col": 37,
                            "offset": 2650
                        },
                        "abstract_content": "sendRedirect_seccode"
                    },
                    "$REQ": {
                        "start": {
                            "line": 83,
                            "col": 57,
                            "offset": 2670
                        },
                        "end": {
                            "line": 83,
                            "col": 64,
                            "offset": 2677
                        },
                        "abstract_content": "request"
                    },
                    "$RES": {
                        "start": {
                            "line": 83,
                            "col": 86,
                            "offset": 2699
                        },
                        "end": {
                            "line": 83,
                            "col": 94,
                            "offset": 2707
                        },
                        "abstract_content": "response"
                    },
                    "$URL": {
                        "start": {
                            "line": 85,
                            "col": 16,
                            "offset": 2757
                        },
                        "end": {
                            "line": 85,
                            "col": 19,
                            "offset": 2760
                        },
                        "abstract_content": "url"
                    }
                },
                "message": "Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs.",
                "metadata": {
                    "cwe": [
                        "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT",
                    "asvs": {
                        "control_id": "5.1.5 Open Redirect",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation-requirements",
                        "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
                    ],
                    "subcategory": [
                        "vuln"
                    ],
                    "impact": "LOW",
                    "likelihood": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Open Redirect"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
                    "shortlink": "https://sg.run/Q51P",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9186,
                            "rule_id": "WAUo0p",
                            "rule_name": "java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
                            "rv_id": 945705,
                            "url": "https://semgrep.dev/playground/r/44TZkx6/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
                            "version_id": "44TZkx6"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "068ca5c98dadd7987f50bf2df55a3939728b7ecb1b4bdc03daa779f19affba9166bfe33daf5ac1b02c72cd5f288b1b3e2a5d2549f2d9b79c21db4a667e01b7fb_0",
                "lines": "    @RequestMapping(\"/sendRedirect/sec\")\n    @ResponseBody\n    public void sendRedirect_seccode(HttpServletRequest request, HttpServletResponse response)\n            throws IOException {\n        String url = request.getParameter(\"url\");\n        if (SecurityUtil.checkURL(url) == null) {\n            response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n            response.getWriter().write(\"url forbidden\");\n            return;\n        }\n        response.sendRedirect(url);\n    }",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/URLRedirect.java",
            "start": {
                "line": 81,
                "col": 6,
                "offset": 2560
            },
            "end": {
                "line": 81,
                "col": 20,
                "offset": 2574
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 83,
                            "col": 12,
                            "offset": 2625
                        },
                        "end": {
                            "line": 83,
                            "col": 16,
                            "offset": 2629
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 83,
                            "col": 17,
                            "offset": 2630
                        },
                        "end": {
                            "line": 83,
                            "col": 37,
                            "offset": 2650
                        },
                        "abstract_content": "sendRedirect_seccode"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "b727f9da02aeeae38dad0207a504e2f977812dd9cd0084cc864fa69492f59c5b4c7a3f9a290e1560b78a50b05218029fec1a2ec1baf89aa3de57c2c81a4fc329_0",
                "lines": "    @RequestMapping(\"/sendRedirect/sec\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
            "path": "src/main/java/org/joychou/controller/URLWhiteList.java",
            "start": {
                "line": 98,
                "col": 5,
                "offset": 2767
            },
            "end": {
                "line": 118,
                "col": 6,
                "offset": 3286
            },
            "extra": {
                "metavars": {
                    "$X": {
                        "start": {
                            "line": 99,
                            "col": 12,
                            "offset": 2810
                        },
                        "end": {
                            "line": 99,
                            "col": 16,
                            "offset": 2814
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 99,
                            "col": 17,
                            "offset": 2815
                        },
                        "end": {
                            "line": 99,
                            "col": 27,
                            "offset": 2825
                        },
                        "abstract_content": "url_bypass"
                    },
                    "$URL": {
                        "start": {
                            "line": 99,
                            "col": 35,
                            "offset": 2833
                        },
                        "end": {
                            "line": 99,
                            "col": 38,
                            "offset": 2836
                        },
                        "abstract_content": "url"
                    },
                    "$RES": {
                        "start": {
                            "line": 99,
                            "col": 60,
                            "offset": 2858
                        },
                        "end": {
                            "line": 99,
                            "col": 63,
                            "offset": 2861
                        },
                        "abstract_content": "res"
                    }
                },
                "message": "Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs.",
                "metadata": {
                    "cwe": [
                        "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT",
                    "asvs": {
                        "control_id": "5.1.5 Open Redirect",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation-requirements",
                        "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
                    ],
                    "subcategory": [
                        "vuln"
                    ],
                    "impact": "LOW",
                    "likelihood": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Open Redirect"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
                    "shortlink": "https://sg.run/Q51P",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9186,
                            "rule_id": "WAUo0p",
                            "rule_name": "java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
                            "rv_id": 945705,
                            "url": "https://semgrep.dev/playground/r/44TZkx6/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
                            "version_id": "44TZkx6"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "95c07bc9feeacb36218b6a03c8492db7fb10d8efdc6e3a3e73587d82eab29bf77fbafb3a202ee0b0b524c469750a59a541bf31ce80b45cefcf306032a1a2085c_0",
                "lines": "    @GetMapping(\"/vuln/url_bypass\")\n    public void url_bypass(String url, HttpServletResponse res) throws IOException {\n\n        logger.info(\"url:  \" + url);\n\n        if (!SecurityUtil.isHttp(url)) {\n            return;\n        }\n\n        URL u = new URL(url);\n        String host = u.getHost();\n        logger.info(\"host:  \" + host);\n\n        // endsWith .\n        for (String domain : domainwhitelist) {\n            if (host.endsWith(\".\" + domain)) {\n                res.sendRedirect(url);\n            }\n        }\n\n    }",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/WebSockets.java",
            "start": {
                "line": 30,
                "col": 6,
                "offset": 1073
            },
            "end": {
                "line": 30,
                "col": 20,
                "offset": 1087
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 31,
                            "col": 12,
                            "offset": 1117
                        },
                        "end": {
                            "line": 31,
                            "col": 18,
                            "offset": 1123
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 31,
                            "col": 19,
                            "offset": 1124
                        },
                        "end": {
                            "line": 31,
                            "col": 28,
                            "offset": 1133
                        },
                        "abstract_content": "cmdInject"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "844739592c3e73aaeac7004957a887549cf2a182310e6c4515bb70a8bebd20401c36f0a3852e8dc96c80d4581fde516056de5f5c5b0c23eac76408bc079df829_0",
                "lines": "    @RequestMapping(\"/websocket/cmd\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/WebSockets.java",
            "start": {
                "line": 53,
                "col": 6,
                "offset": 2098
            },
            "end": {
                "line": 53,
                "col": 20,
                "offset": 2112
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 54,
                            "col": 12,
                            "offset": 2144
                        },
                        "end": {
                            "line": 54,
                            "col": 18,
                            "offset": 2150
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 54,
                            "col": 19,
                            "offset": 2151
                        },
                        "end": {
                            "line": 54,
                            "col": 30,
                            "offset": 2162
                        },
                        "abstract_content": "proxyInject"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "142eee52e2d64511bb25671881269b8bdaaab0139938824593d6efcae67ed5eadd4c8a8cb3f344f3948b1f2a0b5b9d7ac5ce3ee7f2d853cd94286432020508fe_0",
                "lines": "    @RequestMapping(\"/websocket/proxy\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/XSS.java",
            "start": {
                "line": 27,
                "col": 6,
                "offset": 659
            },
            "end": {
                "line": 27,
                "col": 20,
                "offset": 673
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 29,
                            "col": 19,
                            "offset": 722
                        },
                        "end": {
                            "line": 29,
                            "col": 25,
                            "offset": 728
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 29,
                            "col": 26,
                            "offset": 729
                        },
                        "end": {
                            "line": 29,
                            "col": 33,
                            "offset": 736
                        },
                        "abstract_content": "reflect"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "7d661836a507d9f9f436ec66be82297e715fc2936390471723fdd9726e492f07efa4ef003628d9c8866ec9db61e7f090901d1b5b1cd445f2c9da1c4e3c8130cd_0",
                "lines": "    @RequestMapping(\"/reflect\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/XSS.java",
            "start": {
                "line": 40,
                "col": 6,
                "offset": 956
            },
            "end": {
                "line": 40,
                "col": 20,
                "offset": 970
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 42,
                            "col": 12,
                            "offset": 1017
                        },
                        "end": {
                            "line": 42,
                            "col": 18,
                            "offset": 1023
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 42,
                            "col": 19,
                            "offset": 1024
                        },
                        "end": {
                            "line": 42,
                            "col": 24,
                            "offset": 1029
                        },
                        "abstract_content": "store"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "bca91ff3102df18a5d695b33a1a13827b5a187e228b153dca8809ec238ffd289d934f8c3686296fc834a6dce2d734972f61462738db8444d61a0135841356b3e_0",
                "lines": "    @RequestMapping(\"/stored/store\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.cookie-issecure-false.cookie-issecure-false",
            "path": "src/main/java/org/joychou/controller/XSS.java",
            "start": {
                "line": 43,
                "col": 9,
                "offset": 1082
            },
            "end": {
                "line": 43,
                "col": 48,
                "offset": 1121
            },
            "extra": {
                "metavars": {
                    "$COOKIE": {
                        "start": {
                            "line": 43,
                            "col": 16,
                            "offset": 1089
                        },
                        "end": {
                            "line": 43,
                            "col": 22,
                            "offset": 1095
                        },
                        "abstract_content": "cookie"
                    },
                    "$...ARGS": {
                        "start": {
                            "line": 43,
                            "col": 36,
                            "offset": 1109
                        },
                        "end": {
                            "line": 43,
                            "col": 46,
                            "offset": 1119
                        },
                        "abstract_content": "\"xss\"xss"
                    }
                },
                "message": "Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks.",
                "fix": "cookie = new Cookie(\"xss\", xss);\n        cookie.setSecure(true);",
                "metadata": {
                    "vulnerability": "Insecure Transport",
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure",
                        "A02:2021 - Cryptographic Failures"
                    ],
                    "cwe": [
                        "CWE-319: Cleartext Transmission of Sensitive Information"
                    ],
                    "references": [
                        "https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setSecure(boolean)",
                        "https://owasp.org/www-community/controls/SecureCookieAttribute"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "cookie"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Mishandled Sensitive Information"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                    "shortlink": "https://sg.run/pxn0",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9218,
                            "rule_id": "kxUkn9",
                            "rule_name": "java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                            "rv_id": 945732,
                            "url": "https://semgrep.dev/playground/r/NdTqk5x/java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                            "version_id": "NdTqk5x"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "194aaa940d808b7820e772f41fb7fd6c40627264ed066b241d2a53402e7b48a7f2839a04e29ed738406bf7489dce19d7db99b1d60a87e99ba772c2f5f7a184a3_0",
                "lines": "        Cookie cookie = new Cookie(\"xss\", xss);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
            "path": "src/main/java/org/joychou/controller/XSS.java",
            "start": {
                "line": 44,
                "col": 9,
                "offset": 1130
            },
            "end": {
                "line": 44,
                "col": 36,
                "offset": 1157
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 44,
                            "col": 9,
                            "offset": 1130
                        },
                        "end": {
                            "line": 44,
                            "col": 17,
                            "offset": 1138
                        },
                        "abstract_content": "response"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 44,
                            "col": 28,
                            "offset": 1149
                        },
                        "end": {
                            "line": 44,
                            "col": 34,
                            "offset": 1155
                        },
                        "abstract_content": "cookie",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 43,
                                "col": 25,
                                "offset": 1098
                            },
                            "svalue_end": {
                                "line": 43,
                                "col": 47,
                                "offset": 1120
                            },
                            "svalue_abstract_content": "new Cookie(\"xss\"xss)"
                        }
                    }
                },
                "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
                "metadata": {
                    "cwe": [
                        "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE",
                    "asvs": {
                        "control_id": "3.4.2 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "shortlink": "https://sg.run/b7Be",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9170,
                            "rule_id": "EwU2z6",
                            "rule_name": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "rv_id": 945651,
                            "url": "https://semgrep.dev/playground/r/5PT9OYP/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "version_id": "5PT9OYP"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "13f9b864d7f7d8b0ae0f83b51f9adc08190ae4b024aedc1077f85142948ba6dc927875f97bb09b3606a508a5e783a605ef42d38da9e55ff2e64717b6ef635c86_0",
                "lines": "        response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
            "path": "src/main/java/org/joychou/controller/XSS.java",
            "start": {
                "line": 44,
                "col": 9,
                "offset": 1130
            },
            "end": {
                "line": 44,
                "col": 36,
                "offset": 1157
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 44,
                            "col": 9,
                            "offset": 1130
                        },
                        "end": {
                            "line": 44,
                            "col": 17,
                            "offset": 1138
                        },
                        "abstract_content": "response"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 44,
                            "col": 28,
                            "offset": 1149
                        },
                        "end": {
                            "line": 44,
                            "col": 34,
                            "offset": 1155
                        },
                        "abstract_content": "cookie",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 43,
                                "col": 25,
                                "offset": 1098
                            },
                            "svalue_end": {
                                "line": 43,
                                "col": 47,
                                "offset": 1120
                            },
                            "svalue_abstract_content": "new Cookie(\"xss\"xss)"
                        }
                    }
                },
                "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
                "metadata": {
                    "cwe": [
                        "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE",
                    "asvs": {
                        "control_id": "3.4.1 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "shortlink": "https://sg.run/kXoK",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9172,
                            "rule_id": "L1Uyvp",
                            "rule_name": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "rv_id": 945652,
                            "url": "https://semgrep.dev/playground/r/GxTP7W7/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "version_id": "GxTP7W7"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "b62d89f0a25561016fc2adcc3006160370fa9f09a472f1b351896541c25160a449ecedd1f1c1a5ce83983dcdb75f18b29cf6bd0f5c0719398f9a3bddaaae94e8_0",
                "lines": "        response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
            "path": "src/main/java/org/joychou/controller/XSS.java",
            "start": {
                "line": 44,
                "col": 9,
                "offset": 1130
            },
            "end": {
                "line": 44,
                "col": 36,
                "offset": 1157
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 44,
                            "col": 9,
                            "offset": 1130
                        },
                        "end": {
                            "line": 44,
                            "col": 17,
                            "offset": 1138
                        },
                        "abstract_content": "response"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 44,
                            "col": 28,
                            "offset": 1149
                        },
                        "end": {
                            "line": 44,
                            "col": 34,
                            "offset": 1155
                        },
                        "abstract_content": "cookie",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 43,
                                "col": 25,
                                "offset": 1098
                            },
                            "svalue_end": {
                                "line": 43,
                                "col": 47,
                                "offset": 1120
                            },
                            "svalue_abstract_content": "new Cookie(\"xss\"xss)"
                        }
                    }
                },
                "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.2 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
                    ],
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://owasp.org/www-community/HttpOnly"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "shortlink": "https://sg.run/2WZD",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27163,
                            "rule_id": "DbUR6k",
                            "rule_name": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "rv_id": 947502,
                            "url": "https://semgrep.dev/playground/r/9lTyO6k/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "version_id": "9lTyO6k"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "84e73cc74b6cba58f7f5c9f2c6634525b33c9a9f84b35b81b8f0cd18eaf38875cead8580b9ba2deca8e04207f95567ae5447e924346c41cee85070364c64da5d_0",
                "lines": "        response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
            "path": "src/main/java/org/joychou/controller/XSS.java",
            "start": {
                "line": 44,
                "col": 9,
                "offset": 1130
            },
            "end": {
                "line": 44,
                "col": 36,
                "offset": 1157
            },
            "extra": {
                "metavars": {
                    "$RESP": {
                        "start": {
                            "line": 44,
                            "col": 9,
                            "offset": 1130
                        },
                        "end": {
                            "line": 44,
                            "col": 17,
                            "offset": 1138
                        },
                        "abstract_content": "response"
                    }
                },
                "message": "The application does not appear to verify inbound requests which can lead to a Cross-site request forgery (CSRF) vulnerability. If the application uses cookie-based authentication, an attacker can trick users into sending authenticated HTTP requests without their knowledge from any arbitrary domain they visit. To prevent this vulnerability start by identifying if the framework or library leveraged has built-in features or offers plugins for CSRF protection. CSRF tokens should be unique and securely random. The `Synchronizer Token` or `Double Submit Cookie` patterns with defense-in-depth mechanisms such as the `sameSite` cookie flag can help prevent CSRF. For more information, see: [Cross-site request forgery prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.3 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "references": [
                        "https://stackoverflow.com/questions/42717210/samesite-cookie-in-java-application"
                    ],
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                    "shortlink": "https://sg.run/XR5b",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27164,
                            "rule_id": "WAUqW7",
                            "rule_name": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                            "rv_id": 947503,
                            "url": "https://semgrep.dev/playground/r/yeT0veP/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                            "version_id": "yeT0veP"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "70757989a270f4d580f0cc789208c76c25bde2f542ba2ac25095d008fd5e6168fc5c2735476f484f8100f9aa1c9036ca022f42cacccba1a1a6ae07149e97705d_0",
                "lines": "        response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
            "path": "src/main/java/org/joychou/controller/XSS.java",
            "start": {
                "line": 44,
                "col": 9,
                "offset": 1130
            },
            "end": {
                "line": 44,
                "col": 36,
                "offset": 1157
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 44,
                            "col": 9,
                            "offset": 1130
                        },
                        "end": {
                            "line": 44,
                            "col": 17,
                            "offset": 1138
                        },
                        "abstract_content": "response"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 44,
                            "col": 28,
                            "offset": 1149
                        },
                        "end": {
                            "line": 44,
                            "col": 34,
                            "offset": 1155
                        },
                        "abstract_content": "cookie",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 43,
                                "col": 25,
                                "offset": 1098
                            },
                            "svalue_end": {
                                "line": 43,
                                "col": 47,
                                "offset": 1120
                            },
                            "svalue_abstract_content": "new Cookie(\"xss\"xss)"
                        }
                    }
                },
                "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.1 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
                    ],
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://owasp.org/www-community/controls/SecureCookieAttribute"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "shortlink": "https://sg.run/jW2J",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27165,
                            "rule_id": "0oUKLg",
                            "rule_name": "java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "rv_id": 947504,
                            "url": "https://semgrep.dev/playground/r/rxT6kN2/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "version_id": "rxT6kN2"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "013ab5b52660f53a086e2d724476474357b9baa0bb367e8522ae887bc0c86994f6ae2aa0ce7dc38ba2b71d3f78d5e84eaed93a2417410cfd8236d14b4d3c9ac6_0",
                "lines": "        response.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/XSS.java",
            "start": {
                "line": 55,
                "col": 6,
                "offset": 1352
            },
            "end": {
                "line": 55,
                "col": 20,
                "offset": 1366
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 57,
                            "col": 12,
                            "offset": 1412
                        },
                        "end": {
                            "line": 57,
                            "col": 18,
                            "offset": 1418
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 57,
                            "col": 19,
                            "offset": 1419
                        },
                        "end": {
                            "line": 57,
                            "col": 23,
                            "offset": 1423
                        },
                        "abstract_content": "show"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "d96b354d8396d0ba4255f1177adf98d02a5013d3f9ced8ef0ec22703d5412f9bd35d834521713835304692842de7af9c8529aa1af13ee8596fb88eb3b8537497_0",
                "lines": "    @RequestMapping(\"/stored/show\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "path": "src/main/java/org/joychou/controller/XSS.java",
            "start": {
                "line": 65,
                "col": 6,
                "offset": 1562
            },
            "end": {
                "line": 65,
                "col": 20,
                "offset": 1576
            },
            "extra": {
                "metavars": {
                    "$RETURNTYPE": {
                        "start": {
                            "line": 67,
                            "col": 19,
                            "offset": 1622
                        },
                        "end": {
                            "line": 67,
                            "col": 25,
                            "offset": 1628
                        },
                        "abstract_content": "String"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 67,
                            "col": 26,
                            "offset": 1629
                        },
                        "end": {
                            "line": 67,
                            "col": 30,
                            "offset": 1633
                        },
                        "abstract_content": "safe"
                    }
                },
                "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
                "metadata": {
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING",
                    "references": [
                        "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"
                    ],
                    "category": "security",
                    "technology": [
                        "spring"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "shortlink": "https://sg.run/2xlq",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9219,
                            "rule_id": "wdUJ7q",
                            "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "rv_id": 945748,
                            "url": "https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                            "version_id": "3ZTOPgQ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "0bd56155a468a52bdd5f7858c8cd89954f5a552be861947adad7741d25ea443f12138591c3a4a2110348d587bcf8cffd519e79e310f647c2a0803f8826fff76e_0",
                "lines": "    @RequestMapping(\"/safe\")",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 53,
                "col": 13,
                "offset": 1464
            },
            "end": {
                "line": 53,
                "col": 70,
                "offset": 1521
            },
            "extra": {
                "metavars": {
                    "$PARSER": {
                        "start": {
                            "line": 53,
                            "col": 23,
                            "offset": 1474
                        },
                        "end": {
                            "line": 53,
                            "col": 32,
                            "offset": 1483
                        },
                        "abstract_content": "xmlReader"
                    },
                    "$S": {
                        "start": {
                            "line": 53,
                            "col": 35,
                            "offset": 1486
                        },
                        "end": {
                            "line": 53,
                            "col": 51,
                            "offset": 1502
                        },
                        "abstract_content": "XMLReaderFactory XMLReaderFactory XMLReaderFactory XMLReaderFactory XMLReaderFactory"
                    },
                    "$CREATE": {
                        "start": {
                            "line": 53,
                            "col": 52,
                            "offset": 1503
                        },
                        "end": {
                            "line": 53,
                            "col": 67,
                            "offset": 1518
                        },
                        "abstract_content": "createXMLReader"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. It is our recommendation to secure this parser against XXE attacks through parameter entities by configuring $FACTORY with `xmlReader.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `xmlReader.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `xmlReader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml",
                        "xml::sink::xml-parser::xml.sax"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities",
                    "shortlink": "https://sg.run/oLqR",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27160,
                            "rule_id": "ReU0Dk",
                            "rule_name": "java.lang.security.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities",
                            "rv_id": 947452,
                            "url": "https://semgrep.dev/playground/r/xyTqW0L/java.lang.security.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities",
                            "version_id": "xyTqW0L"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "1dd4fea6e6c6f180c545f48d957a5dfe5ceb082bfc9773cbb1892f510ce6de57018f37a874083e39a08ea0b630e8d99aa240ecd0632145f4da60302cb1fbe938_0",
                "lines": "            XMLReader xmlReader = XMLReaderFactory.createXMLReader();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.xmlreader-xxe.xmlreader-xxe",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 53,
                "col": 13,
                "offset": 1464
            },
            "end": {
                "line": 53,
                "col": 70,
                "offset": 1521
            },
            "extra": {
                "metavars": {
                    "$PARSER": {
                        "start": {
                            "line": 53,
                            "col": 23,
                            "offset": 1474
                        },
                        "end": {
                            "line": 53,
                            "col": 32,
                            "offset": 1483
                        },
                        "abstract_content": "xmlReader"
                    },
                    "$S": {
                        "start": {
                            "line": 53,
                            "col": 35,
                            "offset": 1486
                        },
                        "end": {
                            "line": 53,
                            "col": 51,
                            "offset": 1502
                        },
                        "abstract_content": "XMLReaderFactory"
                    },
                    "$CREATE": {
                        "start": {
                            "line": 53,
                            "col": 52,
                            "offset": 1503
                        },
                        "end": {
                            "line": 53,
                            "col": 67,
                            "offset": 1518
                        },
                        "abstract_content": "createXMLReader"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. It is our recommendation to secure this parser against XXE attacks by configuring $FACTORY with `xmlReader.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `xmlReader.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `xmlReader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml",
                        "xml::sink::xml-parser::xml.sax"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.xmlreader-xxe.xmlreader-xxe",
                    "shortlink": "https://sg.run/zLdW",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27161,
                            "rule_id": "AbUg9X",
                            "rule_name": "java.lang.security.xxe.xmlreader-xxe.xmlreader-xxe",
                            "rv_id": 947453,
                            "url": "https://semgrep.dev/playground/r/O9TXGEN/java.lang.security.xxe.xmlreader-xxe.xmlreader-xxe",
                            "version_id": "O9TXGEN"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.xmlreader-xxe.xmlreader-xxe",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "98bc2082283ef9cbc9a159f21fe3d93840c38eb1e265820fba1bfad36944c13c2a8092c62677be3ed2a34b0863e78556384b2835ee70f50bca5f57fa85a51a87_0",
                "lines": "            XMLReader xmlReader = XMLReaderFactory.createXMLReader();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.saxbuilder-xxe-parameter-entities.saxbuilder-xxe-parameter-entities",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 92,
                "col": 13,
                "offset": 2939
            },
            "end": {
                "line": 92,
                "col": 51,
                "offset": 2977
            },
            "extra": {
                "metavars": {
                    "$PARSER": {
                        "start": {
                            "line": 92,
                            "col": 24,
                            "offset": 2950
                        },
                        "end": {
                            "line": 92,
                            "col": 31,
                            "offset": 2957
                        },
                        "abstract_content": "builder"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. The current configuration allows for XXE attacks through parameter entities. It is our recommendation to secure this parser against XXE attacks by configuring builder with `builder.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks with parameter entities. `builder.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `builder.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::jdom2"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/611.html",
                        "https://cwe.mitre.org/data/definitions/827.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.saxbuilder-xxe-parameter-entities.saxbuilder-xxe-parameter-entities",
                    "shortlink": "https://sg.run/Rlee",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27149,
                            "rule_id": "7KUEgg",
                            "rule_name": "java.lang.security.xxe.saxbuilder-xxe-parameter-entities.saxbuilder-xxe-parameter-entities",
                            "rv_id": 947441,
                            "url": "https://semgrep.dev/playground/r/2KTY4RJ/java.lang.security.xxe.saxbuilder-xxe-parameter-entities.saxbuilder-xxe-parameter-entities",
                            "version_id": "2KTY4RJ"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.saxbuilder-xxe-parameter-entities.saxbuilder-xxe-parameter-entities",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "52adfbac3ec4773c8d3d4fd9300c7c69019c36e2f825a8780876536d95fd6ce6577344fc92f35c52b7392498222c676194ff6c43dbc27c99c540d61a0d8437be_0",
                "lines": "            SAXBuilder builder = new SAXBuilder();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.saxbuilder-xxe.saxbuilder-xxe",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 92,
                "col": 13,
                "offset": 2939
            },
            "end": {
                "line": 92,
                "col": 51,
                "offset": 2977
            },
            "extra": {
                "metavars": {
                    "$PARSER": {
                        "start": {
                            "line": 92,
                            "col": 24,
                            "offset": 2950
                        },
                        "end": {
                            "line": 92,
                            "col": 31,
                            "offset": 2957
                        },
                        "abstract_content": "builder"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. The XML parser builder is not securely configured. The current configuration allows for XXE attacks. It is our recommendation to secure this parser against XXE attacks by configuring builder with `builder.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `builder.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `builder.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)` `builder.setExpandEntities(false)` It is also possible to use one of the constructor parameters that will result in a more secure parser by default: `new SAXBuilder(XMLReaders.DTDVALIDATING)` or `new SAXBuilder(XMLReaders.XSDVALIDATING)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::jdom2"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/611.html",
                        "https://cwe.mitre.org/data/definitions/827.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.saxbuilder-xxe.saxbuilder-xxe",
                    "shortlink": "https://sg.run/Apb8",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27150,
                            "rule_id": "L1Ukq7",
                            "rule_name": "java.lang.security.xxe.saxbuilder-xxe.saxbuilder-xxe",
                            "rv_id": 947442,
                            "url": "https://semgrep.dev/playground/r/X0TLZYN/java.lang.security.xxe.saxbuilder-xxe.saxbuilder-xxe",
                            "version_id": "X0TLZYN"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.saxbuilder-xxe.saxbuilder-xxe",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "6b30b5bc546bef1bc4070e908d3bc42d6bb31092d893542bfd8be09489225a40a887106e65c33a12e31b2b534477f26adf034761837c331fff7e714179a34494_0",
                "lines": "            SAXBuilder builder = new SAXBuilder();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.saxreader-xxe-parameter-entities.saxreader-xxe-parameter-entities",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 129,
                "col": 13,
                "offset": 4381
            },
            "end": {
                "line": 129,
                "col": 48,
                "offset": 4416
            },
            "extra": {
                "metavars": {
                    "$PARSER": {
                        "start": {
                            "line": 129,
                            "col": 23,
                            "offset": 4391
                        },
                        "end": {
                            "line": 129,
                            "col": 29,
                            "offset": 4397
                        },
                        "abstract_content": "reader"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. The current configuration allows for XXE attacks through parameter entities. It is our recommendation to secure this parser against XXE attacks by configuring reader with `reader.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks with parameter entities. `reader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::dom4j"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/611.html",
                        "https://cwe.mitre.org/data/definitions/827.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.saxreader-xxe-parameter-entities.saxreader-xxe-parameter-entities",
                    "shortlink": "https://sg.run/WGAg",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27153,
                            "rule_id": "QrUGW6",
                            "rule_name": "java.lang.security.xxe.saxreader-xxe-parameter-entities.saxreader-xxe-parameter-entities",
                            "rv_id": 947445,
                            "url": "https://semgrep.dev/playground/r/9lTyO3w/java.lang.security.xxe.saxreader-xxe-parameter-entities.saxreader-xxe-parameter-entities",
                            "version_id": "9lTyO3w"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.saxreader-xxe-parameter-entities.saxreader-xxe-parameter-entities",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "8ae1300733b6ffd65a098302d4991a66eca7300d35cdeb3017314589b2746f3f3b0fa5d1ca03ef3a494abd047f3c9ab57324a8dbbd0aa4ea4cc5eb2304b97436_0",
                "lines": "            SAXReader reader = new SAXReader();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.saxreader-xxe.saxreader-xxe",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 129,
                "col": 13,
                "offset": 4381
            },
            "end": {
                "line": 129,
                "col": 48,
                "offset": 4416
            },
            "extra": {
                "metavars": {
                    "$PARSER": {
                        "start": {
                            "line": 129,
                            "col": 23,
                            "offset": 4391
                        },
                        "end": {
                            "line": 129,
                            "col": 29,
                            "offset": 4397
                        },
                        "abstract_content": "reader"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. It is our recommendation to secure this parser against XXE attacks by configuring reader with `reader.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `reader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::dom4j"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/611.html",
                        "https://cwe.mitre.org/data/definitions/827.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.saxreader-xxe.saxreader-xxe",
                    "shortlink": "https://sg.run/0Bo5",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27154,
                            "rule_id": "3qU4kE",
                            "rule_name": "java.lang.security.xxe.saxreader-xxe.saxreader-xxe",
                            "rv_id": 947446,
                            "url": "https://semgrep.dev/playground/r/yeT0vqj/java.lang.security.xxe.saxreader-xxe.saxreader-xxe",
                            "version_id": "yeT0vqj"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.saxreader-xxe.saxreader-xxe",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "b779afe8af99d90dcfb4c60407ac110dbcf53b73930373a2b3565db90744a430e1ad2d2ffc4f9fcb1a67fb089c1bf312df439cdf96e22686f5c21bc135804558_0",
                "lines": "            SAXReader reader = new SAXReader();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 167,
                "col": 13,
                "offset": 5868
            },
            "end": {
                "line": 167,
                "col": 51,
                "offset": 5906
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 166,
                            "col": 30,
                            "offset": 5818
                        },
                        "end": {
                            "line": 166,
                            "col": 33,
                            "offset": 5821
                        },
                        "abstract_content": "spf"
                    }
                },
                "message": "DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory.",
                "fix": "spf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            spf.newSAXParser();",
                "metadata": {
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "asvs": {
                        "control_id": "5.5.2 Insecue XML Deserialization",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention",
                        "section": "V5 Validation, Sanitization and Encoding",
                        "version": "4"
                    },
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://blog.sonarsource.com/secure-xml-processor",
                        "https://xerces.apache.org/xerces2-j/features.html"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "xml"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
                    "shortlink": "https://sg.run/Gj32",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 59048,
                            "rule_id": "j2Udpk",
                            "rule_name": "java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
                            "rv_id": 945719,
                            "url": "https://semgrep.dev/playground/r/YDTvRz1/java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
                            "version_id": "YDTvRz1"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "95ca4ee0f2263a2f6b4249542c176ff900187e3883267b60ef6b3f801120454e16ebfbbb3dd60e47adfb437bf58922528cc593ffaa3c705f757d67f6e4781ef5_0",
                "lines": "            SAXParser parser = spf.newSAXParser();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 166,
                                    "col": 13,
                                    "offset": 5801
                                },
                                "end": {
                                    "line": 166,
                                    "col": 67,
                                    "offset": 5855
                                }
                            },
                            "SAXParserFactory spf = SAXParserFactory.newInstance();"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 166,
                                    "col": 30,
                                    "offset": 5818
                                },
                                "end": {
                                    "line": 166,
                                    "col": 33,
                                    "offset": 5821
                                }
                            },
                            "content": "spf"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 167,
                                    "col": 13,
                                    "offset": 5868
                                },
                                "end": {
                                    "line": 167,
                                    "col": 51,
                                    "offset": 5906
                                }
                            },
                            "SAXParser parser = spf.newSAXParser();"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 167,
                "col": 13,
                "offset": 5868
            },
            "end": {
                "line": 167,
                "col": 51,
                "offset": 5906
            },
            "extra": {
                "metavars": {
                    "$PARSER": {
                        "start": {
                            "line": 167,
                            "col": 23,
                            "offset": 5878
                        },
                        "end": {
                            "line": 167,
                            "col": 29,
                            "offset": 5884
                        },
                        "abstract_content": "parser"
                    },
                    "$FACTORY": {
                        "start": {
                            "line": 167,
                            "col": 32,
                            "offset": 5887
                        },
                        "end": {
                            "line": 167,
                            "col": 35,
                            "offset": 5890
                        },
                        "abstract_content": "spf",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 166,
                                "col": 36,
                                "offset": 5824
                            },
                            "svalue_end": {
                                "line": 166,
                                "col": 66,
                                "offset": 5854
                            },
                            "svalue_abstract_content": "SAXParserFactory.newInstance()"
                        }
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. The current configuration allows for XXE attacks through parameter entities. It is our recommendation to secure this parser against all types of XXE attacks by configuring spf with `spf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks with parameter entities. `spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `spf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false)` `parser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity",
                    "shortlink": "https://sg.run/BpY2",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27151,
                            "rule_id": "8GU5Qq",
                            "rule_name": "java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity",
                            "rv_id": 947443,
                            "url": "https://semgrep.dev/playground/r/jQTzq1j/java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity",
                            "version_id": "jQTzq1j"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "9dd5d6cbffafb6d6befb8374e3189f7c9400a3caaabc64db34572ed0b3175ebd4fbc1f72762500fa8124b0b151ae1779418884d56d6e0c5ed1013b4f7e8465a1_0",
                "lines": "            SAXParser parser = spf.newSAXParser();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 167,
                "col": 13,
                "offset": 5868
            },
            "end": {
                "line": 167,
                "col": 51,
                "offset": 5906
            },
            "extra": {
                "metavars": {
                    "$PARSER": {
                        "start": {
                            "line": 167,
                            "col": 23,
                            "offset": 5878
                        },
                        "end": {
                            "line": 167,
                            "col": 29,
                            "offset": 5884
                        },
                        "abstract_content": "parser"
                    },
                    "$FACTORY": {
                        "start": {
                            "line": 167,
                            "col": 32,
                            "offset": 5887
                        },
                        "end": {
                            "line": 167,
                            "col": 35,
                            "offset": 5890
                        },
                        "abstract_content": "spf",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 166,
                                "col": 36,
                                "offset": 5824
                            },
                            "svalue_end": {
                                "line": 166,
                                "col": 66,
                                "offset": 5854
                            },
                            "svalue_abstract_content": "SAXParserFactory.newInstance()"
                        }
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. It is our recommendation to secure this parser against XXE attacks by configuring spf with `spf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `spf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)` `parser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe",
                    "shortlink": "https://sg.run/Dxbo",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27152,
                            "rule_id": "gxUB31",
                            "rule_name": "java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe",
                            "rv_id": 947444,
                            "url": "https://semgrep.dev/playground/r/1QToZEp/java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe",
                            "version_id": "1QToZEp"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "5fed39a6f75b7fb9f36eb087cc9b261bdd4405d8d82f62cf99a75fb9e18a3e952b5c23562a72bac2b3b35669ba1bc308d8463574b6b1ce9f88e7ec8cac7fbe2e_0",
                "lines": "            SAXParser parser = spf.newSAXParser();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 239,
                "col": 36,
                "offset": 8677
            },
            "end": {
                "line": 239,
                "col": 78,
                "offset": 8719
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 239,
                            "col": 36,
                            "offset": 8677
                        },
                        "end": {
                            "line": 239,
                            "col": 39,
                            "offset": 8680
                        },
                        "abstract_content": "dbf"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 240,
                            "col": 29,
                            "offset": 8749
                        },
                        "end": {
                            "line": 240,
                            "col": 31,
                            "offset": 8751
                        },
                        "abstract_content": "db"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. The current configuration allows for XXE attacks through parameter entities. It is our recommendation to secure this parser against XXE attacks by configuring dbf with `dbf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks with parameter entities. `dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false)` Beware, using a custom EntityResolver will render these settings useless and you will be responsible for handeling security in the implementation of you EntityResolver. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                    "shortlink": "https://sg.run/5qYX",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27147,
                            "rule_id": "nJU2Wq",
                            "rule_name": "java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                            "rv_id": 947438,
                            "url": "https://semgrep.dev/playground/r/o5TZzLq/java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                            "version_id": "o5TZzLq"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "68c15844717dc6c663638e11827e518a748d18d62f4b1aa56d32d92d6699a4e3ff61981d0845082c6e6d094e135e876be0af1dcfc5874a78fccc827d5044bfc2_0",
                "lines": "            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 239,
                "col": 36,
                "offset": 8677
            },
            "end": {
                "line": 239,
                "col": 78,
                "offset": 8719
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 239,
                            "col": 36,
                            "offset": 8677
                        },
                        "end": {
                            "line": 239,
                            "col": 39,
                            "offset": 8680
                        },
                        "abstract_content": "dbf"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 240,
                            "col": 29,
                            "offset": 8749
                        },
                        "end": {
                            "line": 240,
                            "col": 31,
                            "offset": 8751
                        },
                        "abstract_content": "db"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) or XIncludes which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. It is our recommendation to secure this parser against XXE attacks by configuring dbf with `dbf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `dbf.setExpandEntityReferences(false)` `dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "XML External Entity (XXE) in DocumentBuilderFactory",
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://cwe.mitre.org/data/definitions/611.html",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755"
                    ],
                    "supersedes": [
                        "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false",
                        "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                        "java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true",
                        "java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true",
                        "java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe"
                    ],
                    "technology": [
                        "xml"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                    "shortlink": "https://sg.run/Kxqxn",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 141399,
                            "rule_id": "lBU4b4K",
                            "rule_name": "java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                            "rv_id": 947439,
                            "url": "https://semgrep.dev/playground/r/zyTlyBz/java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                            "version_id": "zyTlyBz"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "70b10c3995af3db89888973e8e9ee0b4968ce202cb016af353040b107cbacaf009e3ba79d4a974e90acc29dc4cff9325f9635168e0160c76379f02dd518a84a4_0",
                "lines": "            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 239,
                                    "col": 36,
                                    "offset": 8677
                                },
                                "end": {
                                    "line": 239,
                                    "col": 78,
                                    "offset": 8719
                                }
                            },
                            "dbf = DocumentBuilderFactory.newInstance()"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 239,
                                    "col": 36,
                                    "offset": 8677
                                },
                                "end": {
                                    "line": 239,
                                    "col": 39,
                                    "offset": 8680
                                }
                            },
                            "content": "dbf"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 240,
                                    "col": 29,
                                    "offset": 8749
                                },
                                "end": {
                                    "line": 240,
                                    "col": 31,
                                    "offset": 8751
                                }
                            },
                            "content": "db"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 242,
                                    "col": 33,
                                    "offset": 8884
                                },
                                "end": {
                                    "line": 242,
                                    "col": 45,
                                    "offset": 8896
                                }
                            },
                            "db.parse(is)"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 239,
                "col": 36,
                "offset": 8677
            },
            "end": {
                "line": 239,
                "col": 78,
                "offset": 8719
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 239,
                            "col": 36,
                            "offset": 8677
                        },
                        "end": {
                            "line": 239,
                            "col": 39,
                            "offset": 8680
                        },
                        "abstract_content": "dbf"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 240,
                            "col": 29,
                            "offset": 8749
                        },
                        "end": {
                            "line": 240,
                            "col": 31,
                            "offset": 8751
                        },
                        "abstract_content": "db"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. It is our recommendation to secure this parser against XXE attacks by configuring dbf with `dbf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `dbf.setExpandEntityReferences(false)` `dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                    "shortlink": "https://sg.run/GJd2",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27148,
                            "rule_id": "EwUEj8",
                            "rule_name": "java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                            "rv_id": 947440,
                            "url": "https://semgrep.dev/playground/r/pZTNG25/java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                            "version_id": "pZTNG25"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "2a31aece5012756c172117a1e461d8b1a209c16a29f7de06a042e8b8796e00e6c4388caaa643ed6df2084d245a3563cbb122b4bfa772ff9d3069ebb0c9b679a4_0",
                "lines": "            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 240,
                "col": 13,
                "offset": 8733
            },
            "end": {
                "line": 240,
                "col": 59,
                "offset": 8779
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 239,
                            "col": 36,
                            "offset": 8677
                        },
                        "end": {
                            "line": 239,
                            "col": 39,
                            "offset": 8680
                        },
                        "abstract_content": "dbf"
                    }
                },
                "message": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.",
                "fix": "dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            dbf.newDocumentBuilder();",
                "metadata": {
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "asvs": {
                        "control_id": "5.5.2 Insecue XML Deserialization",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention",
                        "section": "V5 Validation, Sanitization and Encoding",
                        "version": "4"
                    },
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://blog.sonarsource.com/secure-xml-processor",
                        "https://xerces.apache.org/xerces2-j/features.html"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "xml"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                    "shortlink": "https://sg.run/PYBz",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 18245,
                            "rule_id": "10UPQB",
                            "rule_name": "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                            "rv_id": 945716,
                            "url": "https://semgrep.dev/playground/r/K3TJbP9/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                            "version_id": "K3TJbP9"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "e097bd84baab3542210385d1d1cdc2bbf62bb4bbd1e0ddecc24217c030924a08ecdf6833adce22941201157861419bdcdce755db7f9b1873b11adf39fb6132d6_0",
                "lines": "            DocumentBuilder db = dbf.newDocumentBuilder();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 239,
                                    "col": 13,
                                    "offset": 8654
                                },
                                "end": {
                                    "line": 239,
                                    "col": 79,
                                    "offset": 8720
                                }
                            },
                            "DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 239,
                                    "col": 36,
                                    "offset": 8677
                                },
                                "end": {
                                    "line": 239,
                                    "col": 39,
                                    "offset": 8680
                                }
                            },
                            "content": "dbf"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 240,
                                    "col": 13,
                                    "offset": 8733
                                },
                                "end": {
                                    "line": 240,
                                    "col": 59,
                                    "offset": 8779
                                }
                            },
                            "DocumentBuilder db = dbf.newDocumentBuilder();"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.xxe.tainted-documentbuilderfactory-xxe-servlet.tainted-documentbuilderfactory-xxe-servlet",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 242,
                "col": 33,
                "offset": 8884
            },
            "end": {
                "line": 242,
                "col": 45,
                "offset": 8896
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 15,
                            "offset": 14
                        },
                        "abstract_content": "getInputStream"
                    },
                    "$REQ": {
                        "start": {
                            "line": 241,
                            "col": 46,
                            "offset": 8825
                        },
                        "end": {
                            "line": 241,
                            "col": 53,
                            "offset": 8832
                        },
                        "abstract_content": "request"
                    },
                    "$REQFUNC": {
                        "start": {
                            "line": 241,
                            "col": 54,
                            "offset": 8833
                        },
                        "end": {
                            "line": 241,
                            "col": 68,
                            "offset": 8847
                        },
                        "abstract_content": "getInputStream"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 242,
                            "col": 33,
                            "offset": 8884
                        },
                        "end": {
                            "line": 242,
                            "col": 35,
                            "offset": 8886
                        },
                        "abstract_content": "db",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 240,
                                "col": 34,
                                "offset": 8754
                            },
                            "svalue_end": {
                                "line": 240,
                                "col": 58,
                                "offset": 8778
                            },
                            "svalue_abstract_content": "dbf.newDocumentBuilder()"
                        }
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. It is our recommendation to secure this parser against XXE attacks by configuring the DocumentBuilder parser with `factory.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `factory.setExpandEntityReferences(false)`, `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)`, `factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")`, or enabling both `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)` and `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "web::source::cookie::Servlet",
                        "web::source::http-params::Servlet",
                        "web::source::http-body::Servlet",
                        "web::source::header::Servlet",
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.xxe.tainted-documentbuilderfactory-xxe-servlet.tainted-documentbuilderfactory-xxe-servlet",
                    "shortlink": "https://sg.run/9jwY",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 43767,
                            "rule_id": "ZqUJvb",
                            "rule_name": "java.servlets.security.xxe.tainted-documentbuilderfactory-xxe-servlet.tainted-documentbuilderfactory-xxe-servlet",
                            "rv_id": 947542,
                            "url": "https://semgrep.dev/playground/r/2KTY4wG/java.servlets.security.xxe.tainted-documentbuilderfactory-xxe-servlet.tainted-documentbuilderfactory-xxe-servlet",
                            "version_id": "2KTY4wG"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.xxe.tainted-documentbuilderfactory-xxe-servlet.tainted-documentbuilderfactory-xxe-servlet",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "a11935ffd769d97afaa94d26b7797ef4e189c07b07ea4c8522f3064fe4d887c4641c56fde4c920e77e8db2f9caadd91f10ac601f50a3ffd8608ae101b721698a_0",
                "lines": "            Document document = db.parse(is);  // parse xml",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 239,
                                    "col": 42,
                                    "offset": 8683
                                },
                                "end": {
                                    "line": 239,
                                    "col": 78,
                                    "offset": 8719
                                }
                            },
                            "DocumentBuilderFactory.newInstance()"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 239,
                                    "col": 36,
                                    "offset": 8677
                                },
                                "end": {
                                    "line": 239,
                                    "col": 39,
                                    "offset": 8680
                                }
                            },
                            "content": "dbf"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 240,
                                    "col": 29,
                                    "offset": 8749
                                },
                                "end": {
                                    "line": 240,
                                    "col": 31,
                                    "offset": 8751
                                }
                            },
                            "content": "db"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 242,
                                    "col": 33,
                                    "offset": 8884
                                },
                                "end": {
                                    "line": 242,
                                    "col": 45,
                                    "offset": 8896
                                }
                            },
                            "db.parse(is)"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 257,
                "col": 13,
                "offset": 9571
            },
            "end": {
                "line": 257,
                "col": 32,
                "offset": 9590
            },
            "extra": {
                "metavars": {
                    "$EXCEPTION": {
                        "start": {
                            "line": 257,
                            "col": 13,
                            "offset": 9571
                        },
                        "end": {
                            "line": 257,
                            "col": 14,
                            "offset": 9572
                        },
                        "abstract_content": "e"
                    }
                },
                "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "cwe": [
                        "CWE-489: Active Debug Code"
                    ],
                    "functional-categories": [
                        "debug::search::active-debug-code::java.lang"
                    ],
                    "owasp": [
                        "A10:2004 - Insecure Configuration Management",
                        "A06:2017 - Security Misconfiguration",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/489.html",
                        "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/",
                        "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces",
                        "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Active Debug Code"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "shortlink": "https://sg.run/4K8z",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27144,
                            "rule_id": "v8U0rZ",
                            "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "rv_id": 947426,
                            "url": "https://semgrep.dev/playground/r/GxTP0lB/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "version_id": "GxTP0lB"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "ab3b8ad7a41996312e8edcb2f346483e21253984d56f8cc2805f358bd6828087283ad16a3312e2013a212a16fbdae3ef27ab87ed7ab973736af7ebdbb89b2425_0",
                "lines": "            e.printStackTrace();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 292,
                "col": 36,
                "offset": 10995
            },
            "end": {
                "line": 292,
                "col": 78,
                "offset": 11037
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 292,
                            "col": 36,
                            "offset": 10995
                        },
                        "end": {
                            "line": 292,
                            "col": 39,
                            "offset": 10998
                        },
                        "abstract_content": "dbf"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 295,
                            "col": 29,
                            "offset": 11187
                        },
                        "end": {
                            "line": 295,
                            "col": 31,
                            "offset": 11189
                        },
                        "abstract_content": "db"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. The current configuration allows for XXE attacks through parameter entities. It is our recommendation to secure this parser against XXE attacks by configuring dbf with `dbf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks with parameter entities. `dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false)` Beware, using a custom EntityResolver will render these settings useless and you will be responsible for handeling security in the implementation of you EntityResolver. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                    "shortlink": "https://sg.run/5qYX",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27147,
                            "rule_id": "nJU2Wq",
                            "rule_name": "java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                            "rv_id": 947438,
                            "url": "https://semgrep.dev/playground/r/o5TZzLq/java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                            "version_id": "o5TZzLq"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "68c15844717dc6c663638e11827e518a748d18d62f4b1aa56d32d92d6699a4e3ff61981d0845082c6e6d094e135e876be0af1dcfc5874a78fccc827d5044bfc2_1",
                "lines": "            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 292,
                "col": 36,
                "offset": 10995
            },
            "end": {
                "line": 292,
                "col": 78,
                "offset": 11037
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 292,
                            "col": 36,
                            "offset": 10995
                        },
                        "end": {
                            "line": 292,
                            "col": 39,
                            "offset": 10998
                        },
                        "abstract_content": "dbf"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 295,
                            "col": 29,
                            "offset": 11187
                        },
                        "end": {
                            "line": 295,
                            "col": 31,
                            "offset": 11189
                        },
                        "abstract_content": "db"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) or XIncludes which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. It is our recommendation to secure this parser against XXE attacks by configuring dbf with `dbf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `dbf.setExpandEntityReferences(false)` `dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference"
                    ],
                    "cwe2020-top25": true,
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "display-name": "XML External Entity (XXE) in DocumentBuilderFactory",
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://cwe.mitre.org/data/definitions/611.html",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755"
                    ],
                    "supersedes": [
                        "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false",
                        "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                        "java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true",
                        "java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true",
                        "java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe"
                    ],
                    "technology": [
                        "xml"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                    "shortlink": "https://sg.run/Kxqxn",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 141399,
                            "rule_id": "lBU4b4K",
                            "rule_name": "java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                            "rv_id": 947439,
                            "url": "https://semgrep.dev/playground/r/zyTlyBz/java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                            "version_id": "zyTlyBz"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parse.documentbuilderfactory-xxe-parse",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "70b10c3995af3db89888973e8e9ee0b4968ce202cb016af353040b107cbacaf009e3ba79d4a974e90acc29dc4cff9325f9635168e0160c76379f02dd518a84a4_1",
                "lines": "            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 292,
                                    "col": 36,
                                    "offset": 10995
                                },
                                "end": {
                                    "line": 292,
                                    "col": 78,
                                    "offset": 11037
                                }
                            },
                            "dbf = DocumentBuilderFactory.newInstance()"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 292,
                                    "col": 36,
                                    "offset": 10995
                                },
                                "end": {
                                    "line": 292,
                                    "col": 39,
                                    "offset": 10998
                                }
                            },
                            "content": "dbf"
                        },
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 295,
                                    "col": 29,
                                    "offset": 11187
                                },
                                "end": {
                                    "line": 295,
                                    "col": 31,
                                    "offset": 11189
                                }
                            },
                            "content": "db"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 298,
                                    "col": 33,
                                    "offset": 11354
                                },
                                "end": {
                                    "line": 298,
                                    "col": 45,
                                    "offset": 11366
                                }
                            },
                            "db.parse(is)"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 292,
                "col": 36,
                "offset": 10995
            },
            "end": {
                "line": 292,
                "col": 78,
                "offset": 11037
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 292,
                            "col": 36,
                            "offset": 10995
                        },
                        "end": {
                            "line": 292,
                            "col": 39,
                            "offset": 10998
                        },
                        "abstract_content": "dbf"
                    },
                    "$PARSER": {
                        "start": {
                            "line": 295,
                            "col": 29,
                            "offset": 11187
                        },
                        "end": {
                            "line": 295,
                            "col": 31,
                            "offset": 11189
                        },
                        "abstract_content": "db"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. It is our recommendation to secure this parser against XXE attacks by configuring dbf with `dbf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `dbf.setExpandEntityReferences(false)` `dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                    "shortlink": "https://sg.run/GJd2",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27148,
                            "rule_id": "EwUEj8",
                            "rule_name": "java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                            "rv_id": 947440,
                            "url": "https://semgrep.dev/playground/r/pZTNG25/java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                            "version_id": "pZTNG25"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "2a31aece5012756c172117a1e461d8b1a209c16a29f7de06a042e8b8796e00e6c4388caaa643ed6df2084d245a3563cbb122b4bfa772ff9d3069ebb0c9b679a4_1",
                "lines": "            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 295,
                "col": 13,
                "offset": 11171
            },
            "end": {
                "line": 295,
                "col": 59,
                "offset": 11217
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 292,
                            "col": 36,
                            "offset": 10995
                        },
                        "end": {
                            "line": 292,
                            "col": 39,
                            "offset": 10998
                        },
                        "abstract_content": "dbf"
                    }
                },
                "message": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.",
                "fix": "dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            dbf.newDocumentBuilder();",
                "metadata": {
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "asvs": {
                        "control_id": "5.5.2 Insecue XML Deserialization",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention",
                        "section": "V5 Validation, Sanitization and Encoding",
                        "version": "4"
                    },
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://blog.sonarsource.com/secure-xml-processor",
                        "https://xerces.apache.org/xerces2-j/features.html"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "xml"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                    "shortlink": "https://sg.run/PYBz",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 18245,
                            "rule_id": "10UPQB",
                            "rule_name": "java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                            "rv_id": 945716,
                            "url": "https://semgrep.dev/playground/r/K3TJbP9/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                            "version_id": "K3TJbP9"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "e097bd84baab3542210385d1d1cdc2bbf62bb4bbd1e0ddecc24217c030924a08ecdf6833adce22941201157861419bdcdce755db7f9b1873b11adf39fb6132d6_1",
                "lines": "            DocumentBuilder db = dbf.newDocumentBuilder();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 292,
                                    "col": 13,
                                    "offset": 10972
                                },
                                "end": {
                                    "line": 292,
                                    "col": 79,
                                    "offset": 11038
                                }
                            },
                            "DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 292,
                                    "col": 36,
                                    "offset": 10995
                                },
                                "end": {
                                    "line": 292,
                                    "col": 39,
                                    "offset": 10998
                                }
                            },
                            "content": "dbf"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 295,
                                    "col": 13,
                                    "offset": 11171
                                },
                                "end": {
                                    "line": 295,
                                    "col": 59,
                                    "offset": 11217
                                }
                            },
                            "DocumentBuilder db = dbf.newDocumentBuilder();"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 349,
                "col": 13,
                "offset": 13235
            },
            "end": {
                "line": 349,
                "col": 54,
                "offset": 13276
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 348,
                            "col": 30,
                            "offset": 13185
                        },
                        "end": {
                            "line": 348,
                            "col": 33,
                            "offset": 13188
                        },
                        "abstract_content": "spf"
                    }
                },
                "message": "DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory.",
                "fix": "spf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            spf.newSAXParser();",
                "metadata": {
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "asvs": {
                        "control_id": "5.5.2 Insecue XML Deserialization",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention",
                        "section": "V5 Validation, Sanitization and Encoding",
                        "version": "4"
                    },
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://blog.sonarsource.com/secure-xml-processor",
                        "https://xerces.apache.org/xerces2-j/features.html"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "xml"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
                    "shortlink": "https://sg.run/Gj32",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 59048,
                            "rule_id": "j2Udpk",
                            "rule_name": "java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
                            "rv_id": 945719,
                            "url": "https://semgrep.dev/playground/r/YDTvRz1/java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
                            "version_id": "YDTvRz1"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "95ca4ee0f2263a2f6b4249542c176ff900187e3883267b60ef6b3f801120454e16ebfbbb3dd60e47adfb437bf58922528cc593ffaa3c705f757d67f6e4781ef5_1",
                "lines": "            SAXParser saxParser = spf.newSAXParser();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 348,
                                    "col": 13,
                                    "offset": 13168
                                },
                                "end": {
                                    "line": 348,
                                    "col": 67,
                                    "offset": 13222
                                }
                            },
                            "SAXParserFactory spf = SAXParserFactory.newInstance();"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 348,
                                    "col": 30,
                                    "offset": 13185
                                },
                                "end": {
                                    "line": 348,
                                    "col": 33,
                                    "offset": 13188
                                }
                            },
                            "content": "spf"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 349,
                                    "col": 13,
                                    "offset": 13235
                                },
                                "end": {
                                    "line": 349,
                                    "col": 54,
                                    "offset": 13276
                                }
                            },
                            "SAXParser saxParser = spf.newSAXParser();"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 349,
                "col": 13,
                "offset": 13235
            },
            "end": {
                "line": 349,
                "col": 54,
                "offset": 13276
            },
            "extra": {
                "metavars": {
                    "$PARSER": {
                        "start": {
                            "line": 349,
                            "col": 23,
                            "offset": 13245
                        },
                        "end": {
                            "line": 349,
                            "col": 32,
                            "offset": 13254
                        },
                        "abstract_content": "saxParser"
                    },
                    "$FACTORY": {
                        "start": {
                            "line": 349,
                            "col": 35,
                            "offset": 13257
                        },
                        "end": {
                            "line": 349,
                            "col": 38,
                            "offset": 13260
                        },
                        "abstract_content": "spf",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 348,
                                "col": 36,
                                "offset": 13191
                            },
                            "svalue_end": {
                                "line": 348,
                                "col": 66,
                                "offset": 13221
                            },
                            "svalue_abstract_content": "SAXParserFactory.newInstance()"
                        }
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. The current configuration allows for XXE attacks through parameter entities. It is our recommendation to secure this parser against all types of XXE attacks by configuring spf with `spf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks with parameter entities. `spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `spf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false)` `saxParser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity",
                    "shortlink": "https://sg.run/BpY2",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27151,
                            "rule_id": "8GU5Qq",
                            "rule_name": "java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity",
                            "rv_id": 947443,
                            "url": "https://semgrep.dev/playground/r/jQTzq1j/java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity",
                            "version_id": "jQTzq1j"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "2a7f77997fdc77847b2c67cdcf27d4055b9652c3d4600ec74e1d61c69e2fc44fa8cf9fbafa78a65e5a315f746c18bb7f308d98b2d5cd3a202716f7431b865246_0",
                "lines": "            SAXParser saxParser = spf.newSAXParser();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 349,
                "col": 13,
                "offset": 13235
            },
            "end": {
                "line": 349,
                "col": 54,
                "offset": 13276
            },
            "extra": {
                "metavars": {
                    "$PARSER": {
                        "start": {
                            "line": 349,
                            "col": 23,
                            "offset": 13245
                        },
                        "end": {
                            "line": 349,
                            "col": 32,
                            "offset": 13254
                        },
                        "abstract_content": "saxParser"
                    },
                    "$FACTORY": {
                        "start": {
                            "line": 349,
                            "col": 35,
                            "offset": 13257
                        },
                        "end": {
                            "line": 349,
                            "col": 38,
                            "offset": 13260
                        },
                        "abstract_content": "spf",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 348,
                                "col": 36,
                                "offset": 13191
                            },
                            "svalue_end": {
                                "line": 348,
                                "col": 66,
                                "offset": 13221
                            },
                            "svalue_abstract_content": "SAXParserFactory.newInstance()"
                        }
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. It is our recommendation to secure this parser against XXE attacks by configuring spf with `spf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `spf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)` `saxParser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe",
                    "shortlink": "https://sg.run/Dxbo",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27152,
                            "rule_id": "gxUB31",
                            "rule_name": "java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe",
                            "rv_id": 947444,
                            "url": "https://semgrep.dev/playground/r/1QToZEp/java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe",
                            "version_id": "1QToZEp"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "63394396f1a5e20338b7cec5fbed6d15f1aaad6dd1b1078038376b8255f4b2882701afb2fa35608a45b959dd4a987956520bdfc0b66a9769b563e08736cfac69_0",
                "lines": "            SAXParser saxParser = spf.newSAXParser();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 350,
                "col": 13,
                "offset": 13289
            },
            "end": {
                "line": 350,
                "col": 60,
                "offset": 13336
            },
            "extra": {
                "metavars": {
                    "$PARSER": {
                        "start": {
                            "line": 350,
                            "col": 23,
                            "offset": 13299
                        },
                        "end": {
                            "line": 350,
                            "col": 32,
                            "offset": 13308
                        },
                        "abstract_content": "xmlReader"
                    },
                    "$S": {
                        "start": {
                            "line": 350,
                            "col": 35,
                            "offset": 13311
                        },
                        "end": {
                            "line": 350,
                            "col": 44,
                            "offset": 13320
                        },
                        "abstract_content": "saxParser",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 349,
                                "col": 35,
                                "offset": 13257
                            },
                            "svalue_end": {
                                "line": 349,
                                "col": 53,
                                "offset": 13275
                            },
                            "svalue_abstract_content": "spf.newSAXParser()"
                        }
                    },
                    "$X": {
                        "start": {
                            "line": 350,
                            "col": 35,
                            "offset": 13311
                        },
                        "end": {
                            "line": 350,
                            "col": 44,
                            "offset": 13320
                        },
                        "abstract_content": "saxParser",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 349,
                                "col": 35,
                                "offset": 13257
                            },
                            "svalue_end": {
                                "line": 349,
                                "col": 53,
                                "offset": 13275
                            },
                            "svalue_abstract_content": "spf.newSAXParser()"
                        }
                    },
                    "$CREATE": {
                        "start": {
                            "line": 350,
                            "col": 45,
                            "offset": 13321
                        },
                        "end": {
                            "line": 350,
                            "col": 57,
                            "offset": 13333
                        },
                        "abstract_content": "getXMLReader"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. It is our recommendation to secure this parser against XXE attacks through parameter entities by configuring $FACTORY with `xmlReader.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `xmlReader.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `xmlReader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml",
                        "xml::sink::xml-parser::xml.sax"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities",
                    "shortlink": "https://sg.run/oLqR",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27160,
                            "rule_id": "ReU0Dk",
                            "rule_name": "java.lang.security.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities",
                            "rv_id": 947452,
                            "url": "https://semgrep.dev/playground/r/xyTqW0L/java.lang.security.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities",
                            "version_id": "xyTqW0L"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "214e08d0b8d3caf35e1623218a2699cee2d4de575a92a08ac34a31ecde4602309d7c770118bb65e728db0e88b613ccd5b8175d7ab08f0ed076ecb914bc8249a9_0",
                "lines": "            XMLReader xmlReader = saxParser.getXMLReader();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.xmlreader-xxe.xmlreader-xxe",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 350,
                "col": 13,
                "offset": 13289
            },
            "end": {
                "line": 350,
                "col": 60,
                "offset": 13336
            },
            "extra": {
                "metavars": {
                    "$PARSER": {
                        "start": {
                            "line": 350,
                            "col": 23,
                            "offset": 13299
                        },
                        "end": {
                            "line": 350,
                            "col": 32,
                            "offset": 13308
                        },
                        "abstract_content": "xmlReader"
                    },
                    "$S": {
                        "start": {
                            "line": 350,
                            "col": 35,
                            "offset": 13311
                        },
                        "end": {
                            "line": 350,
                            "col": 44,
                            "offset": 13320
                        },
                        "abstract_content": "saxParser",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 349,
                                "col": 35,
                                "offset": 13257
                            },
                            "svalue_end": {
                                "line": 349,
                                "col": 53,
                                "offset": 13275
                            },
                            "svalue_abstract_content": "spf.newSAXParser()"
                        }
                    },
                    "$X": {
                        "start": {
                            "line": 350,
                            "col": 35,
                            "offset": 13311
                        },
                        "end": {
                            "line": 350,
                            "col": 44,
                            "offset": 13320
                        },
                        "abstract_content": "saxParser",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 349,
                                "col": 35,
                                "offset": 13257
                            },
                            "svalue_end": {
                                "line": 349,
                                "col": 53,
                                "offset": 13275
                            },
                            "svalue_abstract_content": "spf.newSAXParser()"
                        }
                    },
                    "$CREATE": {
                        "start": {
                            "line": 350,
                            "col": 45,
                            "offset": 13321
                        },
                        "end": {
                            "line": 350,
                            "col": 57,
                            "offset": 13333
                        },
                        "abstract_content": "getXMLReader"
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. It is our recommendation to secure this parser against XXE attacks by configuring $FACTORY with `xmlReader.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `xmlReader.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")` `xmlReader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml",
                        "xml::sink::xml-parser::xml.sax"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.xmlreader-xxe.xmlreader-xxe",
                    "shortlink": "https://sg.run/zLdW",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27161,
                            "rule_id": "AbUg9X",
                            "rule_name": "java.lang.security.xxe.xmlreader-xxe.xmlreader-xxe",
                            "rv_id": 947453,
                            "url": "https://semgrep.dev/playground/r/O9TXGEN/java.lang.security.xxe.xmlreader-xxe.xmlreader-xxe",
                            "version_id": "O9TXGEN"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.xmlreader-xxe.xmlreader-xxe",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "849ebc5a95ee202ea6e5eea7b079feb8943aeb8a975562cf7a58093c447904f07674ece4a6eb980078c47063724bbfa8867c8234a1c729af54bcf093a39b6b31_0",
                "lines": "            XMLReader xmlReader = saxParser.getXMLReader();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 369,
                "col": 13,
                "offset": 13849
            },
            "end": {
                "line": 369,
                "col": 54,
                "offset": 13890
            },
            "extra": {
                "metavars": {
                    "$FACTORY": {
                        "start": {
                            "line": 368,
                            "col": 30,
                            "offset": 13799
                        },
                        "end": {
                            "line": 368,
                            "col": 33,
                            "offset": 13802
                        },
                        "abstract_content": "spf"
                    }
                },
                "message": "DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory.",
                "fix": "spf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            spf.newSAXParser();",
                "metadata": {
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "asvs": {
                        "control_id": "5.5.2 Insecue XML Deserialization",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention",
                        "section": "V5 Validation, Sanitization and Encoding",
                        "version": "4"
                    },
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://blog.sonarsource.com/secure-xml-processor",
                        "https://xerces.apache.org/xerces2-j/features.html"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "xml"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "LOW",
                    "impact": "HIGH",
                    "confidence": "HIGH",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
                    "shortlink": "https://sg.run/Gj32",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 59048,
                            "rule_id": "j2Udpk",
                            "rule_name": "java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
                            "rv_id": 945719,
                            "url": "https://semgrep.dev/playground/r/YDTvRz1/java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
                            "version_id": "YDTvRz1"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "95ca4ee0f2263a2f6b4249542c176ff900187e3883267b60ef6b3f801120454e16ebfbbb3dd60e47adfb437bf58922528cc593ffaa3c705f757d67f6e4781ef5_2",
                "lines": "            SAXParser saxParser = spf.newSAXParser();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 368,
                                    "col": 13,
                                    "offset": 13782
                                },
                                "end": {
                                    "line": 368,
                                    "col": 67,
                                    "offset": 13836
                                }
                            },
                            "SAXParserFactory spf = SAXParserFactory.newInstance();"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 368,
                                    "col": 30,
                                    "offset": 13799
                                },
                                "end": {
                                    "line": 368,
                                    "col": 33,
                                    "offset": 13802
                                }
                            },
                            "content": "spf"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/controller/XXE.java",
                                "start": {
                                    "line": 369,
                                    "col": 13,
                                    "offset": 13849
                                },
                                "end": {
                                    "line": 369,
                                    "col": 54,
                                    "offset": 13890
                                }
                            },
                            "SAXParser saxParser = spf.newSAXParser();"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 369,
                "col": 13,
                "offset": 13849
            },
            "end": {
                "line": 369,
                "col": 54,
                "offset": 13890
            },
            "extra": {
                "metavars": {
                    "$PARSER": {
                        "start": {
                            "line": 369,
                            "col": 23,
                            "offset": 13859
                        },
                        "end": {
                            "line": 369,
                            "col": 32,
                            "offset": 13868
                        },
                        "abstract_content": "saxParser"
                    },
                    "$FACTORY": {
                        "start": {
                            "line": 369,
                            "col": 35,
                            "offset": 13871
                        },
                        "end": {
                            "line": 369,
                            "col": 38,
                            "offset": 13874
                        },
                        "abstract_content": "spf",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 368,
                                "col": 36,
                                "offset": 13805
                            },
                            "svalue_end": {
                                "line": 368,
                                "col": 66,
                                "offset": 13835
                            },
                            "svalue_abstract_content": "SAXParserFactory.newInstance()"
                        }
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. The current configuration allows for XXE attacks through parameter entities. It is our recommendation to secure this parser against all types of XXE attacks by configuring spf with `spf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks with parameter entities. `spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `spf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false)` `saxParser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity",
                    "shortlink": "https://sg.run/BpY2",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27151,
                            "rule_id": "8GU5Qq",
                            "rule_name": "java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity",
                            "rv_id": 947443,
                            "url": "https://semgrep.dev/playground/r/jQTzq1j/java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity",
                            "version_id": "jQTzq1j"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "2a7f77997fdc77847b2c67cdcf27d4055b9652c3d4600ec74e1d61c69e2fc44fa8cf9fbafa78a65e5a315f746c18bb7f308d98b2d5cd3a202716f7431b865246_1",
                "lines": "            SAXParser saxParser = spf.newSAXParser();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 369,
                "col": 13,
                "offset": 13849
            },
            "end": {
                "line": 369,
                "col": 54,
                "offset": 13890
            },
            "extra": {
                "metavars": {
                    "$PARSER": {
                        "start": {
                            "line": 369,
                            "col": 23,
                            "offset": 13859
                        },
                        "end": {
                            "line": 369,
                            "col": 32,
                            "offset": 13868
                        },
                        "abstract_content": "saxParser"
                    },
                    "$FACTORY": {
                        "start": {
                            "line": 369,
                            "col": 35,
                            "offset": 13871
                        },
                        "end": {
                            "line": 369,
                            "col": 38,
                            "offset": 13874
                        },
                        "abstract_content": "spf",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 368,
                                "col": 36,
                                "offset": 13805
                            },
                            "svalue_end": {
                                "line": 368,
                                "col": 66,
                                "offset": 13835
                            },
                            "svalue_abstract_content": "SAXParserFactory.newInstance()"
                        }
                    }
                },
                "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a Billion Laughs Attack. It is our recommendation to secure this parser against XXE attacks by configuring spf with `spf.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)` `spf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)` `saxParser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "HIGH",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-611: Improper Restriction of XML External Entity Reference",
                        "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
                    ],
                    "functional-categories": [
                        "xml::sink::xml-parser::javax.xml"
                    ],
                    "owasp": [
                        "A04:2017 - XML External Entities (XXE)",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://semgrep.dev/blog/2022/xml-security-in-java",
                        "https://semgrep.dev/docs/cheat-sheets/java-xxe/",
                        "https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E",
                        "https://github.com/semgrep/java-xxe-research",
                        "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
                        "https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755",
                        "https://blog.sonarsource.com/secure-xml-processor/",
                        "https://blog.sonarsource.com/understanding-xxe-vulnerabilities/",
                        "https://cwe.mitre.org/data/definitions/776.html",
                        "https://cwe.mitre.org/data/definitions/776.html"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "XML Injection"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe",
                    "shortlink": "https://sg.run/Dxbo",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27152,
                            "rule_id": "gxUB31",
                            "rule_name": "java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe",
                            "rv_id": 947444,
                            "url": "https://semgrep.dev/playground/r/1QToZEp/java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe",
                            "version_id": "1QToZEp"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "63394396f1a5e20338b7cec5fbed6d15f1aaad6dd1b1078038376b8255f4b2882701afb2fa35608a45b959dd4a987956520bdfc0b66a9769b563e08736cfac69_1",
                "lines": "            SAXParser saxParser = spf.newSAXParser();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "path": "src/main/java/org/joychou/controller/XXE.java",
            "start": {
                "line": 425,
                "col": 17,
                "offset": 15987
            },
            "end": {
                "line": 425,
                "col": 36,
                "offset": 16006
            },
            "extra": {
                "metavars": {
                    "$EXCEPTION": {
                        "start": {
                            "line": 425,
                            "col": 17,
                            "offset": 15987
                        },
                        "end": {
                            "line": 425,
                            "col": 18,
                            "offset": 15988
                        },
                        "abstract_content": "e"
                    }
                },
                "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "MEDIUM",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "cwe": [
                        "CWE-489: Active Debug Code"
                    ],
                    "functional-categories": [
                        "debug::search::active-debug-code::java.lang"
                    ],
                    "owasp": [
                        "A10:2004 - Insecure Configuration Management",
                        "A06:2017 - Security Misconfiguration",
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/489.html",
                        "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/",
                        "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces",
                        "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"
                    ],
                    "technology": [
                        "java"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Active Debug Code"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "shortlink": "https://sg.run/4K8z",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27144,
                            "rule_id": "v8U0rZ",
                            "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "rv_id": 947426,
                            "url": "https://semgrep.dev/playground/r/GxTP0lB/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                            "version_id": "GxTP0lB"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "ab3b8ad7a41996312e8edcb2f346483e21253984d56f8cc2805f358bd6828087283ad16a3312e2013a212a16fbdae3ef27ab87ed7ab973736af7ebdbb89b2425_1",
                "lines": "                e.printStackTrace();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
            "path": "src/main/java/org/joychou/filter/OriginFilter.java",
            "start": {
                "line": 37,
                "col": 9,
                "offset": 1099
            },
            "end": {
                "line": 37,
                "col": 91,
                "offset": 1181
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 5,
                            "offset": 4
                        },
                        "abstract_content": "info"
                    },
                    "$REQ": {
                        "start": {
                            "line": 36,
                            "col": 25,
                            "offset": 1062
                        },
                        "end": {
                            "line": 36,
                            "col": 32,
                            "offset": 1069
                        },
                        "abstract_content": "request",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 33,
                                "col": 38,
                                "offset": 945
                            },
                            "svalue_end": {
                                "line": 33,
                                "col": 62,
                                "offset": 969
                            },
                            "svalue_abstract_content": "(HttpServletRequest req"
                        }
                    },
                    "$REQFUNC": {
                        "start": {
                            "line": 36,
                            "col": 33,
                            "offset": 1070
                        },
                        "end": {
                            "line": 36,
                            "col": 42,
                            "offset": 1079
                        },
                        "abstract_content": "getHeader"
                    },
                    "$LOG": {
                        "start": {
                            "line": 37,
                            "col": 9,
                            "offset": 1099
                        },
                        "end": {
                            "line": 37,
                            "col": 15,
                            "offset": 1105
                        },
                        "abstract_content": "logger",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 27,
                                "col": 35,
                                "offset": 708
                            },
                            "svalue_end": {
                                "line": 27,
                                "col": 75,
                                "offset": 748
                            },
                            "svalue_abstract_content": "LoggerFactory.getLogger(this.getClass())"
                        }
                    },
                    "$LEVEL": {
                        "start": {
                            "line": 37,
                            "col": 16,
                            "offset": 1106
                        },
                        "end": {
                            "line": 37,
                            "col": 20,
                            "offset": 1110
                        },
                        "abstract_content": "info"
                    }
                },
                "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "interfile": true,
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
                    ],
                    "functional-categories": [
                        "web::source::cookie::Servlet",
                        "web::source::http-params::Servlet",
                        "web::source::http-body::Servlet",
                        "web::source::header::Servlet",
                        "log::sink::log::log4j",
                        "log::sink::log::java.util"
                    ],
                    "owasp": [
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/117.html",
                        "https://cwe.mitre.org/data/definitions/93.html",
                        "https://owasp.org/www-community/attacks/Log_Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Improper Validation"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                    "shortlink": "https://sg.run/xGwy",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 40130,
                            "rule_id": "d8UbJq",
                            "rule_name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                            "rv_id": 947512,
                            "url": "https://semgrep.dev/playground/r/vdTG5dL/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                            "version_id": "vdTG5dL"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "47ac227efe2525ab67e0eb072889404c90fdcd39f95774c4b245a5ca0853bcc70fa5dcd6c5cc55c21dbb88c79bf4cc12757941602004456239134f173678545a_0",
                "lines": "        logger.info(\"[+] Origin: \" + origin + \"\\tCurrent url:\" + request.getRequestURL());",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/filter/OriginFilter.java",
                                "start": {
                                    "line": 36,
                                    "col": 25,
                                    "offset": 1062
                                },
                                "end": {
                                    "line": 36,
                                    "col": 52,
                                    "offset": 1089
                                }
                            },
                            "request.getHeader(\"Origin\")"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/filter/OriginFilter.java",
                                "start": {
                                    "line": 36,
                                    "col": 16,
                                    "offset": 1053
                                },
                                "end": {
                                    "line": 36,
                                    "col": 22,
                                    "offset": 1059
                                }
                            },
                            "content": "origin"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/filter/OriginFilter.java",
                                "start": {
                                    "line": 37,
                                    "col": 9,
                                    "offset": 1099
                                },
                                "end": {
                                    "line": 37,
                                    "col": 91,
                                    "offset": 1181
                                }
                            },
                            "logger.info(\"[+] Origin: \" + origin + \"\\tCurrent url:\" + request.getRequestURL());"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
            "path": "src/main/java/org/joychou/filter/OriginFilter.java",
            "start": {
                "line": 41,
                "col": 13,
                "offset": 1367
            },
            "end": {
                "line": 42,
                "col": 65,
                "offset": 1495
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 6,
                            "offset": 5
                        },
                        "abstract_content": "error"
                    },
                    "$REQ": {
                        "start": {
                            "line": 36,
                            "col": 25,
                            "offset": 1062
                        },
                        "end": {
                            "line": 36,
                            "col": 32,
                            "offset": 1069
                        },
                        "abstract_content": "request",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 33,
                                "col": 38,
                                "offset": 945
                            },
                            "svalue_end": {
                                "line": 33,
                                "col": 62,
                                "offset": 969
                            },
                            "svalue_abstract_content": "(HttpServletRequest req"
                        }
                    },
                    "$REQFUNC": {
                        "start": {
                            "line": 36,
                            "col": 33,
                            "offset": 1070
                        },
                        "end": {
                            "line": 36,
                            "col": 42,
                            "offset": 1079
                        },
                        "abstract_content": "getHeader"
                    },
                    "$LOG": {
                        "start": {
                            "line": 41,
                            "col": 13,
                            "offset": 1367
                        },
                        "end": {
                            "line": 41,
                            "col": 19,
                            "offset": 1373
                        },
                        "abstract_content": "logger",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 27,
                                "col": 35,
                                "offset": 708
                            },
                            "svalue_end": {
                                "line": 27,
                                "col": 75,
                                "offset": 748
                            },
                            "svalue_abstract_content": "LoggerFactory.getLogger(this.getClass())"
                        }
                    },
                    "$LEVEL": {
                        "start": {
                            "line": 41,
                            "col": 20,
                            "offset": 1374
                        },
                        "end": {
                            "line": 41,
                            "col": 25,
                            "offset": 1379
                        },
                        "abstract_content": "error"
                    }
                },
                "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "interfile": true,
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
                    ],
                    "functional-categories": [
                        "web::source::cookie::Servlet",
                        "web::source::http-params::Servlet",
                        "web::source::http-body::Servlet",
                        "web::source::header::Servlet",
                        "log::sink::log::log4j",
                        "log::sink::log::java.util"
                    ],
                    "owasp": [
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/117.html",
                        "https://cwe.mitre.org/data/definitions/93.html",
                        "https://owasp.org/www-community/attacks/Log_Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Improper Validation"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                    "shortlink": "https://sg.run/xGwy",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 40130,
                            "rule_id": "d8UbJq",
                            "rule_name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                            "rv_id": 947512,
                            "url": "https://semgrep.dev/playground/r/vdTG5dL/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                            "version_id": "vdTG5dL"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "12f691336e948e0ccdda5ab294d15eee357f8d11822278912cd956df89abf7a9fbc7929946748b6760f9ecd4d708db1e08788ed57c5848b681a9fa9492cdedae_0",
                "lines": "            logger.error(\"[-] Origin check error. \" + \"Origin: \" + origin +\n                    \"\\tCurrent url:\" + request.getRequestURL());",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/filter/OriginFilter.java",
                                "start": {
                                    "line": 36,
                                    "col": 25,
                                    "offset": 1062
                                },
                                "end": {
                                    "line": 36,
                                    "col": 52,
                                    "offset": 1089
                                }
                            },
                            "request.getHeader(\"Origin\")"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/filter/OriginFilter.java",
                                "start": {
                                    "line": 36,
                                    "col": 16,
                                    "offset": 1053
                                },
                                "end": {
                                    "line": 36,
                                    "col": 22,
                                    "offset": 1059
                                }
                            },
                            "content": "origin"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/filter/OriginFilter.java",
                                "start": {
                                    "line": 41,
                                    "col": 13,
                                    "offset": 1367
                                },
                                "end": {
                                    "line": 42,
                                    "col": 65,
                                    "offset": 1495
                                }
                            },
                            "logger.error(\"[-] Origin check error. \" + \"Origin: \" + origin +\n                    \"\\tCurrent url:\" + request.getRequestURL());"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
            "path": "src/main/java/org/joychou/filter/ReferFilter.java",
            "start": {
                "line": 68,
                "col": 17,
                "offset": 2295
            },
            "end": {
                "line": 69,
                "col": 48,
                "offset": 2432
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 5,
                            "offset": 4
                        },
                        "abstract_content": "info"
                    },
                    "$REQ": {
                        "start": {
                            "line": 40,
                            "col": 24,
                            "offset": 1313
                        },
                        "end": {
                            "line": 40,
                            "col": 31,
                            "offset": 1320
                        },
                        "abstract_content": "request",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 38,
                                "col": 38,
                                "offset": 1198
                            },
                            "svalue_end": {
                                "line": 38,
                                "col": 62,
                                "offset": 1222
                            },
                            "svalue_abstract_content": "(HttpServletRequest req"
                        }
                    },
                    "$REQFUNC": {
                        "start": {
                            "line": 40,
                            "col": 32,
                            "offset": 1321
                        },
                        "end": {
                            "line": 40,
                            "col": 41,
                            "offset": 1330
                        },
                        "abstract_content": "getHeader"
                    },
                    "$LOG": {
                        "start": {
                            "line": 68,
                            "col": 17,
                            "offset": 2295
                        },
                        "end": {
                            "line": 68,
                            "col": 23,
                            "offset": 2301
                        },
                        "abstract_content": "logger",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 32,
                                "col": 35,
                                "offset": 961
                            },
                            "svalue_end": {
                                "line": 32,
                                "col": 75,
                                "offset": 1001
                            },
                            "svalue_abstract_content": "LoggerFactory.getLogger(this.getClass())"
                        }
                    },
                    "$LEVEL": {
                        "start": {
                            "line": 68,
                            "col": 24,
                            "offset": 2302
                        },
                        "end": {
                            "line": 68,
                            "col": 28,
                            "offset": 2306
                        },
                        "abstract_content": "info"
                    }
                },
                "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "interfile": true,
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
                    ],
                    "functional-categories": [
                        "web::source::cookie::Servlet",
                        "web::source::http-params::Servlet",
                        "web::source::http-body::Servlet",
                        "web::source::header::Servlet",
                        "log::sink::log::log4j",
                        "log::sink::log::java.util"
                    ],
                    "owasp": [
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/117.html",
                        "https://cwe.mitre.org/data/definitions/93.html",
                        "https://owasp.org/www-community/attacks/Log_Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Improper Validation"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                    "shortlink": "https://sg.run/xGwy",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 40130,
                            "rule_id": "d8UbJq",
                            "rule_name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                            "rv_id": 947512,
                            "url": "https://semgrep.dev/playground/r/vdTG5dL/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                            "version_id": "vdTG5dL"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "e0d834331c90d191b56ea4b817bfd22f189b6f31f17545216bd0672dc5e1a49baeb021d4a397ee7dd08d9be0609ea9fa823312c5893e4570a5ba4eec781ac213_0",
                "lines": "                logger.info(\"[-] URL: \" + request.getRequestURL() + \"?\" + request.getQueryString() + \"\\t\"\n                        + \"Referer: \" + refer);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/filter/ReferFilter.java",
                                "start": {
                                    "line": 40,
                                    "col": 24,
                                    "offset": 1313
                                },
                                "end": {
                                    "line": 40,
                                    "col": 52,
                                    "offset": 1341
                                }
                            },
                            "request.getHeader(\"referer\")"
                        ]
                    ],
                    "intermediate_vars": [
                        {
                            "location": {
                                "path": "src/main/java/org/joychou/filter/ReferFilter.java",
                                "start": {
                                    "line": 40,
                                    "col": 16,
                                    "offset": 1305
                                },
                                "end": {
                                    "line": 40,
                                    "col": 21,
                                    "offset": 1310
                                }
                            },
                            "content": "refer"
                        }
                    ],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/filter/ReferFilter.java",
                                "start": {
                                    "line": 68,
                                    "col": 17,
                                    "offset": 2295
                                },
                                "end": {
                                    "line": 69,
                                    "col": 48,
                                    "offset": 2432
                                }
                            },
                            "logger.info(\"[-] URL: \" + request.getRequestURL() + \"?\" + request.getQueryString() + \"\\t\"\n                        + \"Referer: \" + refer);"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
            "path": "src/main/java/org/joychou/security/CsrfAccessDeniedHandler.java",
            "start": {
                "line": 27,
                "col": 9,
                "offset": 789
            },
            "end": {
                "line": 28,
                "col": 61,
                "offset": 941
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 5,
                            "offset": 4
                        },
                        "abstract_content": "info"
                    },
                    "$LOG": {
                        "start": {
                            "line": 27,
                            "col": 9,
                            "offset": 789
                        },
                        "end": {
                            "line": 27,
                            "col": 15,
                            "offset": 795
                        },
                        "abstract_content": "logger",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 21,
                                "col": 36,
                                "offset": 553
                            },
                            "svalue_end": {
                                "line": 21,
                                "col": 76,
                                "offset": 593
                            },
                            "svalue_abstract_content": "LoggerFactory.getLogger(this.getClass())"
                        }
                    },
                    "$LEVEL": {
                        "start": {
                            "line": 27,
                            "col": 16,
                            "offset": 796
                        },
                        "end": {
                            "line": 27,
                            "col": 20,
                            "offset": 800
                        },
                        "abstract_content": "info"
                    },
                    "$REQ": {
                        "start": {
                            "line": 27,
                            "col": 67,
                            "offset": 847
                        },
                        "end": {
                            "line": 27,
                            "col": 74,
                            "offset": 854
                        },
                        "abstract_content": "request"
                    },
                    "$REQFUNC": {
                        "start": {
                            "line": 27,
                            "col": 75,
                            "offset": 855
                        },
                        "end": {
                            "line": 27,
                            "col": 89,
                            "offset": 869
                        },
                        "abstract_content": "getQueryString"
                    }
                },
                "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "interfile": true,
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
                    ],
                    "functional-categories": [
                        "web::source::cookie::Servlet",
                        "web::source::http-params::Servlet",
                        "web::source::http-body::Servlet",
                        "web::source::header::Servlet",
                        "log::sink::log::log4j",
                        "log::sink::log::java.util"
                    ],
                    "owasp": [
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/117.html",
                        "https://cwe.mitre.org/data/definitions/93.html",
                        "https://owasp.org/www-community/attacks/Log_Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Improper Validation"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                    "shortlink": "https://sg.run/xGwy",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 40130,
                            "rule_id": "d8UbJq",
                            "rule_name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                            "rv_id": 947512,
                            "url": "https://semgrep.dev/playground/r/vdTG5dL/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                            "version_id": "vdTG5dL"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "a825e626394a2479ad485be1f4f07696f5d30ab694a76fe7adb79abe2686f57d00ca0860d38cd727abb9894b83583998e2529ca57466ea7c8e0c658da9cf7fa1_0",
                "lines": "        logger.info(\"[-] URL: \" + request.getRequestURL() + \"?\" + request.getQueryString() + \"\\t\" +\n                \"Referer: \" + request.getHeader(\"referer\"));",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/security/CsrfAccessDeniedHandler.java",
                                "start": {
                                    "line": 27,
                                    "col": 67,
                                    "offset": 847
                                },
                                "end": {
                                    "line": 27,
                                    "col": 91,
                                    "offset": 871
                                }
                            },
                            "request.getQueryString()"
                        ]
                    ],
                    "intermediate_vars": [],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/security/CsrfAccessDeniedHandler.java",
                                "start": {
                                    "line": 27,
                                    "col": 9,
                                    "offset": 789
                                },
                                "end": {
                                    "line": 28,
                                    "col": 61,
                                    "offset": 941
                                }
                            },
                            "logger.info(\"[-] URL: \" + request.getRequestURL() + \"?\" + request.getQueryString() + \"\\t\" +\n                \"Referer: \" + request.getHeader(\"referer\"));"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.crlf-injection-logs.crlf-injection-logs",
            "path": "src/main/java/org/joychou/security/LoginFailureHandler.java",
            "start": {
                "line": 24,
                "col": 9,
                "offset": 875
            },
            "end": {
                "line": 26,
                "col": 68,
                "offset": 1066
            },
            "extra": {
                "metavars": {
                    "$CLASS": {
                        "start": {
                            "line": 15,
                            "col": 14,
                            "offset": 458
                        },
                        "end": {
                            "line": 15,
                            "col": 33,
                            "offset": 477
                        },
                        "abstract_content": "LoginFailureHandler"
                    },
                    "$X": {
                        "start": {
                            "line": 20,
                            "col": 12,
                            "offset": 625
                        },
                        "end": {
                            "line": 20,
                            "col": 16,
                            "offset": 629
                        },
                        "abstract_content": "void"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 20,
                            "col": 17,
                            "offset": 630
                        },
                        "end": {
                            "line": 20,
                            "col": 40,
                            "offset": 653
                        },
                        "abstract_content": "onAuthenticationFailure"
                    },
                    "$LOG": {
                        "start": {
                            "line": 24,
                            "col": 9,
                            "offset": 875
                        },
                        "end": {
                            "line": 24,
                            "col": 15,
                            "offset": 881
                        },
                        "abstract_content": "logger",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 17,
                                "col": 37,
                                "offset": 557
                            },
                            "svalue_end": {
                                "line": 17,
                                "col": 77,
                                "offset": 597
                            },
                            "svalue_abstract_content": "LoggerFactory.getLogger(this.getClass())"
                        }
                    },
                    "$LEVEL": {
                        "start": {
                            "line": 24,
                            "col": 16,
                            "offset": 882
                        },
                        "end": {
                            "line": 24,
                            "col": 20,
                            "offset": 886
                        },
                        "abstract_content": "info"
                    },
                    "$REQ": {
                        "start": {
                            "line": 25,
                            "col": 33,
                            "offset": 964
                        },
                        "end": {
                            "line": 25,
                            "col": 40,
                            "offset": 971
                        },
                        "abstract_content": "request"
                    }
                },
                "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
                "metadata": {
                    "cwe": [
                        "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
                    ],
                    "owasp": [
                        "A03:2021 - Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS",
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A03_2021-Injection"
                    ],
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Improper Validation"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.crlf-injection-logs.crlf-injection-logs",
                    "shortlink": "https://sg.run/wek0",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9173,
                            "rule_id": "8GUjwW",
                            "rule_name": "java.lang.security.audit.crlf-injection-logs.crlf-injection-logs",
                            "rv_id": 945653,
                            "url": "https://semgrep.dev/playground/r/RGTAgwP/java.lang.security.audit.crlf-injection-logs.crlf-injection-logs",
                            "version_id": "RGTAgwP"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.crlf-injection-logs.crlf-injection-logs",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "f706feaf983b863d8a9660b5c9956353f4193b45fc5d9cca6e623dfd42ce14ce3dfdff45fbf2376bb774fe0081f3f8b1bd79432332eadb4e653260584bf0eba5_0",
                "lines": "        logger.info(\"Login failed. \" + request.getRequestURL() +\n                \" username: \" + request.getParameter(\"username\") +\n                \" password: \" + request.getParameter(\"password\") );",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
            "path": "src/main/java/org/joychou/security/LoginFailureHandler.java",
            "start": {
                "line": 24,
                "col": 9,
                "offset": 875
            },
            "end": {
                "line": 26,
                "col": 68,
                "offset": 1066
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 5,
                            "offset": 4
                        },
                        "abstract_content": "info"
                    },
                    "$LOG": {
                        "start": {
                            "line": 24,
                            "col": 9,
                            "offset": 875
                        },
                        "end": {
                            "line": 24,
                            "col": 15,
                            "offset": 881
                        },
                        "abstract_content": "logger",
                        "propagated_value": {
                            "svalue_start": {
                                "line": 17,
                                "col": 37,
                                "offset": 557
                            },
                            "svalue_end": {
                                "line": 17,
                                "col": 77,
                                "offset": 597
                            },
                            "svalue_abstract_content": "LoggerFactory.getLogger(this.getClass())"
                        }
                    },
                    "$LEVEL": {
                        "start": {
                            "line": 24,
                            "col": 16,
                            "offset": 882
                        },
                        "end": {
                            "line": 24,
                            "col": 20,
                            "offset": 886
                        },
                        "abstract_content": "info"
                    },
                    "$REQ": {
                        "start": {
                            "line": 25,
                            "col": 33,
                            "offset": 964
                        },
                        "end": {
                            "line": 25,
                            "col": 40,
                            "offset": 971
                        },
                        "abstract_content": "request"
                    },
                    "$REQFUNC": {
                        "start": {
                            "line": 25,
                            "col": 41,
                            "offset": 972
                        },
                        "end": {
                            "line": 25,
                            "col": 53,
                            "offset": 984
                        },
                        "abstract_content": "getParameter"
                    }
                },
                "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
                "metadata": {
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "interfile": true,
                    "category": "security",
                    "subcategory": [
                        "vuln"
                    ],
                    "cwe": [
                        "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
                    ],
                    "functional-categories": [
                        "web::source::cookie::Servlet",
                        "web::source::http-params::Servlet",
                        "web::source::http-body::Servlet",
                        "web::source::header::Servlet",
                        "log::sink::log::log4j",
                        "log::sink::log::java.util"
                    ],
                    "owasp": [
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/117.html",
                        "https://cwe.mitre.org/data/definitions/93.html",
                        "https://owasp.org/www-community/attacks/Log_Injection"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Improper Validation"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                    "shortlink": "https://sg.run/xGwy",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 40130,
                            "rule_id": "d8UbJq",
                            "rule_name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                            "rv_id": 947512,
                            "url": "https://semgrep.dev/playground/r/vdTG5dL/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                            "version_id": "vdTG5dL"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "ERROR",
                "fingerprint": "1c25cdd714cb6a9de902d55b86701f008b3a83c23a14b0c2f17f59cc17e373e89ed85cb280e76436b3423eddea045cca85512899a60309747bd6a877df9f93c5_0",
                "lines": "        logger.info(\"Login failed. \" + request.getRequestURL() +\n                \" username: \" + request.getParameter(\"username\") +\n                \" password: \" + request.getParameter(\"password\") );",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "dataflow_trace": {
                    "taint_source": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/security/LoginFailureHandler.java",
                                "start": {
                                    "line": 25,
                                    "col": 33,
                                    "offset": 964
                                },
                                "end": {
                                    "line": 25,
                                    "col": 65,
                                    "offset": 996
                                }
                            },
                            "request.getParameter(\"username\")"
                        ]
                    ],
                    "intermediate_vars": [],
                    "taint_sink": [
                        "CliLoc",
                        [
                            {
                                "path": "src/main/java/org/joychou/security/LoginFailureHandler.java",
                                "start": {
                                    "line": 24,
                                    "col": 9,
                                    "offset": 875
                                },
                                "end": {
                                    "line": 26,
                                    "col": 68,
                                    "offset": 1066
                                }
                            },
                            "logger.info(\"Login failed. \" + request.getRequestURL() +\n                \" username: \" + request.getParameter(\"username\") +\n                \" password: \" + request.getParameter(\"password\") );"
                        ]
                    ]
                },
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket",
            "path": "src/main/java/org/joychou/security/ssrf/SocketHookFactory.java",
            "start": {
                "line": 42,
                "col": 25,
                "offset": 890
            },
            "end": {
                "line": 42,
                "col": 37,
                "offset": 902
            },
            "extra": {
                "metavars": {},
                "message": "Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.",
                "metadata": {
                    "functional-categories": [
                        "net::search::crypto-config::java.net"
                    ],
                    "cwe": [
                        "CWE-319: Cleartext Transmission of Sensitive Information"
                    ],
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure",
                        "A02:2021 - Cryptographic Failures"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#UNENCRYPTED_SOCKET",
                    "asvs": {
                        "control_id": "6.2.5 Insecure Algorithm",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms",
                        "section": "V6 Stored Cryptography Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
                    ],
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "confidence": "HIGH",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Mishandled Sensitive Information"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket",
                    "shortlink": "https://sg.run/W8zA",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9197,
                            "rule_id": "BYUN3X",
                            "rule_name": "java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket",
                            "rv_id": 945666,
                            "url": "https://semgrep.dev/playground/r/RGTAgw9/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket",
                            "version_id": "RGTAgw9"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "7340e68d7fef4b8e407641963b0c1e31008c28e6f015903f135bf82554c64dfb82b2d65e86d7ea26d8efd2b7670e74335fecd6463292abd29cf0d81a3bcd0c3c_0",
                "lines": "        Socket socket = new Socket();",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.cookie-issecure-false.cookie-issecure-false",
            "path": "src/main/java/org/joychou/util/CookieUtils.java",
            "start": {
                "line": 14,
                "col": 13,
                "offset": 291
            },
            "end": {
                "line": 14,
                "col": 58,
                "offset": 336
            },
            "extra": {
                "metavars": {
                    "$COOKIE": {
                        "start": {
                            "line": 14,
                            "col": 20,
                            "offset": 298
                        },
                        "end": {
                            "line": 14,
                            "col": 26,
                            "offset": 304
                        },
                        "abstract_content": "cookie"
                    },
                    "$...ARGS": {
                        "start": {
                            "line": 14,
                            "col": 40,
                            "offset": 318
                        },
                        "end": {
                            "line": 14,
                            "col": 56,
                            "offset": 334
                        },
                        "abstract_content": "cookieName null"
                    }
                },
                "message": "Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks.",
                "fix": "cookie = new Cookie(cookieName, null);\n            cookie.setSecure(true);",
                "metadata": {
                    "vulnerability": "Insecure Transport",
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure",
                        "A02:2021 - Cryptographic Failures"
                    ],
                    "cwe": [
                        "CWE-319: Cleartext Transmission of Sensitive Information"
                    ],
                    "references": [
                        "https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setSecure(boolean)",
                        "https://owasp.org/www-community/controls/SecureCookieAttribute"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "cookie"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Mishandled Sensitive Information"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                    "shortlink": "https://sg.run/pxn0",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9218,
                            "rule_id": "kxUkn9",
                            "rule_name": "java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                            "rv_id": 945732,
                            "url": "https://semgrep.dev/playground/r/NdTqk5x/java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                            "version_id": "NdTqk5x"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "f91097c5d5569a521921ffda678f5c2d98f244fa46f670be91d5db04ae636bfdb19db632cc1d7b90471fbdcdfe13e6c7962d1b7f1411ff337a1e4f6bad2f3156_0",
                "lines": "            Cookie cookie = new Cookie(cookieName, null);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
            "path": "src/main/java/org/joychou/util/CookieUtils.java",
            "start": {
                "line": 17,
                "col": 13,
                "offset": 415
            },
            "end": {
                "line": 17,
                "col": 35,
                "offset": 437
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 17,
                            "col": 13,
                            "offset": 415
                        },
                        "end": {
                            "line": 17,
                            "col": 16,
                            "offset": 418
                        },
                        "abstract_content": "res"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 17,
                            "col": 27,
                            "offset": 429
                        },
                        "end": {
                            "line": 17,
                            "col": 33,
                            "offset": 435
                        },
                        "abstract_content": "cookie"
                    }
                },
                "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
                "metadata": {
                    "cwe": [
                        "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE",
                    "asvs": {
                        "control_id": "3.4.2 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "shortlink": "https://sg.run/b7Be",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9170,
                            "rule_id": "EwU2z6",
                            "rule_name": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "rv_id": 945651,
                            "url": "https://semgrep.dev/playground/r/5PT9OYP/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "version_id": "5PT9OYP"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "8a2f88e436dad0f3923909b5b9e6921c60adf0333ce5d5b73817f65cff69bfdb953d3766774f7054c14d690ffc154d54ec643bfb21d282485f15ea06182d203b_0",
                "lines": "            res.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
            "path": "src/main/java/org/joychou/util/CookieUtils.java",
            "start": {
                "line": 17,
                "col": 13,
                "offset": 415
            },
            "end": {
                "line": 17,
                "col": 35,
                "offset": 437
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 17,
                            "col": 13,
                            "offset": 415
                        },
                        "end": {
                            "line": 17,
                            "col": 16,
                            "offset": 418
                        },
                        "abstract_content": "res"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 17,
                            "col": 27,
                            "offset": 429
                        },
                        "end": {
                            "line": 17,
                            "col": 33,
                            "offset": 435
                        },
                        "abstract_content": "cookie"
                    }
                },
                "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
                "metadata": {
                    "cwe": [
                        "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE",
                    "asvs": {
                        "control_id": "3.4.1 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "shortlink": "https://sg.run/kXoK",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9172,
                            "rule_id": "L1Uyvp",
                            "rule_name": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "rv_id": 945652,
                            "url": "https://semgrep.dev/playground/r/GxTP7W7/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "version_id": "GxTP7W7"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "04cbfef870ae487a7fae051fc60bdd77ece83eff79708a6b8334f71391e0c3eceda34a84e6b84fde9bcccda85c359e0d7a672544ae4873ecdb0271e695fd3776_0",
                "lines": "            res.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
            "path": "src/main/java/org/joychou/util/CookieUtils.java",
            "start": {
                "line": 17,
                "col": 13,
                "offset": 415
            },
            "end": {
                "line": 17,
                "col": 35,
                "offset": 437
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 17,
                            "col": 13,
                            "offset": 415
                        },
                        "end": {
                            "line": 17,
                            "col": 16,
                            "offset": 418
                        },
                        "abstract_content": "res"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 17,
                            "col": 27,
                            "offset": 429
                        },
                        "end": {
                            "line": 17,
                            "col": 33,
                            "offset": 435
                        },
                        "abstract_content": "cookie"
                    }
                },
                "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.2 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
                    ],
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://owasp.org/www-community/HttpOnly"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "shortlink": "https://sg.run/2WZD",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27163,
                            "rule_id": "DbUR6k",
                            "rule_name": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "rv_id": 947502,
                            "url": "https://semgrep.dev/playground/r/9lTyO6k/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "version_id": "9lTyO6k"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "67d2612dd6825480d0e04233a5c4be3cad659a72482166188c72d928c6d99b5e03a98eb96a820693cee0a3553076ca50ab12585a102a5f7f97a2e2b284abdd21_0",
                "lines": "            res.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
            "path": "src/main/java/org/joychou/util/CookieUtils.java",
            "start": {
                "line": 17,
                "col": 13,
                "offset": 415
            },
            "end": {
                "line": 17,
                "col": 35,
                "offset": 437
            },
            "extra": {
                "metavars": {
                    "$RESP": {
                        "start": {
                            "line": 17,
                            "col": 13,
                            "offset": 415
                        },
                        "end": {
                            "line": 17,
                            "col": 16,
                            "offset": 418
                        },
                        "abstract_content": "res"
                    }
                },
                "message": "The application does not appear to verify inbound requests which can lead to a Cross-site request forgery (CSRF) vulnerability. If the application uses cookie-based authentication, an attacker can trick users into sending authenticated HTTP requests without their knowledge from any arbitrary domain they visit. To prevent this vulnerability start by identifying if the framework or library leveraged has built-in features or offers plugins for CSRF protection. CSRF tokens should be unique and securely random. The `Synchronizer Token` or `Double Submit Cookie` patterns with defense-in-depth mechanisms such as the `sameSite` cookie flag can help prevent CSRF. For more information, see: [Cross-site request forgery prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.3 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "references": [
                        "https://stackoverflow.com/questions/42717210/samesite-cookie-in-java-application"
                    ],
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                    "shortlink": "https://sg.run/XR5b",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27164,
                            "rule_id": "WAUqW7",
                            "rule_name": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                            "rv_id": 947503,
                            "url": "https://semgrep.dev/playground/r/yeT0veP/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                            "version_id": "yeT0veP"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "8946a5901c568c714106312d22d48f3a54a0c44b7b07c1e45036942e55ffb135b778363fac6308591834fc5baeef6c84f1e2dd9a2d3101c5e1cafc49ec302cfe_0",
                "lines": "            res.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
            "path": "src/main/java/org/joychou/util/CookieUtils.java",
            "start": {
                "line": 17,
                "col": 13,
                "offset": 415
            },
            "end": {
                "line": 17,
                "col": 35,
                "offset": 437
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 17,
                            "col": 13,
                            "offset": 415
                        },
                        "end": {
                            "line": 17,
                            "col": 16,
                            "offset": 418
                        },
                        "abstract_content": "res"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 17,
                            "col": 27,
                            "offset": 429
                        },
                        "end": {
                            "line": 17,
                            "col": 33,
                            "offset": 435
                        },
                        "abstract_content": "cookie"
                    }
                },
                "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.1 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
                    ],
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://owasp.org/www-community/controls/SecureCookieAttribute"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "shortlink": "https://sg.run/jW2J",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27165,
                            "rule_id": "0oUKLg",
                            "rule_name": "java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "rv_id": 947504,
                            "url": "https://semgrep.dev/playground/r/rxT6kN2/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "version_id": "rxT6kN2"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "5547fc8655454bb81f121238dab9362205ee37dddd2eb32ae1226d0555085dfc8d665da731c9320943fac0665ba43cc91abed91846e26cfafdce5df1f90422c5_0",
                "lines": "            res.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.cookie-issecure-false.cookie-issecure-false",
            "path": "src/main/java/org/joychou/util/CookieUtils.java",
            "start": {
                "line": 27,
                "col": 13,
                "offset": 703
            },
            "end": {
                "line": 27,
                "col": 65,
                "offset": 755
            },
            "extra": {
                "metavars": {
                    "$COOKIE": {
                        "start": {
                            "line": 27,
                            "col": 20,
                            "offset": 710
                        },
                        "end": {
                            "line": 27,
                            "col": 26,
                            "offset": 716
                        },
                        "abstract_content": "cookie"
                    },
                    "$...ARGS": {
                        "start": {
                            "line": 27,
                            "col": 40,
                            "offset": 730
                        },
                        "end": {
                            "line": 27,
                            "col": 63,
                            "offset": 753
                        },
                        "abstract_content": "cookieName cookieValue"
                    }
                },
                "message": "Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks.",
                "fix": "cookie = new Cookie(cookieName, cookieValue);\n            cookie.setSecure(true);",
                "metadata": {
                    "vulnerability": "Insecure Transport",
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure",
                        "A02:2021 - Cryptographic Failures"
                    ],
                    "cwe": [
                        "CWE-319: Cleartext Transmission of Sensitive Information"
                    ],
                    "references": [
                        "https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setSecure(boolean)",
                        "https://owasp.org/www-community/controls/SecureCookieAttribute"
                    ],
                    "category": "security",
                    "technology": [
                        "java",
                        "cookie"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Mishandled Sensitive Information"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                    "shortlink": "https://sg.run/pxn0",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9218,
                            "rule_id": "kxUkn9",
                            "rule_name": "java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                            "rv_id": 945732,
                            "url": "https://semgrep.dev/playground/r/NdTqk5x/java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                            "version_id": "NdTqk5x"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.cookie-issecure-false.cookie-issecure-false",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "10f6f8e60fe7227ec4996bbb870dc727e97717cf8f84a3cdd39631e08f2c3b5b367d987f07fcffd964e14c84b2a9c7bc1149513a2c74ea5aead0204ac629db10_0",
                "lines": "            Cookie cookie = new Cookie(cookieName, cookieValue);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
            "path": "src/main/java/org/joychou/util/CookieUtils.java",
            "start": {
                "line": 30,
                "col": 13,
                "offset": 837
            },
            "end": {
                "line": 30,
                "col": 35,
                "offset": 859
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 30,
                            "col": 13,
                            "offset": 837
                        },
                        "end": {
                            "line": 30,
                            "col": 16,
                            "offset": 840
                        },
                        "abstract_content": "res"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 30,
                            "col": 27,
                            "offset": 851
                        },
                        "end": {
                            "line": 30,
                            "col": 33,
                            "offset": 857
                        },
                        "abstract_content": "cookie"
                    }
                },
                "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
                "metadata": {
                    "cwe": [
                        "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE",
                    "asvs": {
                        "control_id": "3.4.2 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "shortlink": "https://sg.run/b7Be",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9170,
                            "rule_id": "EwU2z6",
                            "rule_name": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "rv_id": 945651,
                            "url": "https://semgrep.dev/playground/r/5PT9OYP/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "version_id": "5PT9OYP"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "8a2f88e436dad0f3923909b5b9e6921c60adf0333ce5d5b73817f65cff69bfdb953d3766774f7054c14d690ffc154d54ec643bfb21d282485f15ea06182d203b_1",
                "lines": "            res.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
            "path": "src/main/java/org/joychou/util/CookieUtils.java",
            "start": {
                "line": 30,
                "col": 13,
                "offset": 837
            },
            "end": {
                "line": 30,
                "col": 35,
                "offset": 859
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 30,
                            "col": 13,
                            "offset": 837
                        },
                        "end": {
                            "line": 30,
                            "col": 16,
                            "offset": 840
                        },
                        "abstract_content": "res"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 30,
                            "col": 27,
                            "offset": 851
                        },
                        "end": {
                            "line": 30,
                            "col": 33,
                            "offset": 857
                        },
                        "abstract_content": "cookie"
                    }
                },
                "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
                "metadata": {
                    "cwe": [
                        "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE",
                    "asvs": {
                        "control_id": "3.4.1 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "category": "security",
                    "technology": [
                        "java"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "shortlink": "https://sg.run/kXoK",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9172,
                            "rule_id": "L1Uyvp",
                            "rule_name": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "rv_id": 945652,
                            "url": "https://semgrep.dev/playground/r/GxTP7W7/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "version_id": "GxTP7W7"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "04cbfef870ae487a7fae051fc60bdd77ece83eff79708a6b8334f71391e0c3eceda34a84e6b84fde9bcccda85c359e0d7a672544ae4873ecdb0271e695fd3776_1",
                "lines": "            res.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
            "path": "src/main/java/org/joychou/util/CookieUtils.java",
            "start": {
                "line": 30,
                "col": 13,
                "offset": 837
            },
            "end": {
                "line": 30,
                "col": 35,
                "offset": 859
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 30,
                            "col": 13,
                            "offset": 837
                        },
                        "end": {
                            "line": 30,
                            "col": 16,
                            "offset": 840
                        },
                        "abstract_content": "res"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 30,
                            "col": 27,
                            "offset": 851
                        },
                        "end": {
                            "line": 30,
                            "col": 33,
                            "offset": 857
                        },
                        "abstract_content": "cookie"
                    }
                },
                "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.2 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
                    ],
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://owasp.org/www-community/HttpOnly"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "shortlink": "https://sg.run/2WZD",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27163,
                            "rule_id": "DbUR6k",
                            "rule_name": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "rv_id": 947502,
                            "url": "https://semgrep.dev/playground/r/9lTyO6k/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                            "version_id": "9lTyO6k"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "67d2612dd6825480d0e04233a5c4be3cad659a72482166188c72d928c6d99b5e03a98eb96a820693cee0a3553076ca50ab12585a102a5f7f97a2e2b284abdd21_1",
                "lines": "            res.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
            "path": "src/main/java/org/joychou/util/CookieUtils.java",
            "start": {
                "line": 30,
                "col": 13,
                "offset": 837
            },
            "end": {
                "line": 30,
                "col": 35,
                "offset": 859
            },
            "extra": {
                "metavars": {
                    "$RESP": {
                        "start": {
                            "line": 30,
                            "col": 13,
                            "offset": 837
                        },
                        "end": {
                            "line": 30,
                            "col": 16,
                            "offset": 840
                        },
                        "abstract_content": "res"
                    }
                },
                "message": "The application does not appear to verify inbound requests which can lead to a Cross-site request forgery (CSRF) vulnerability. If the application uses cookie-based authentication, an attacker can trick users into sending authenticated HTTP requests without their knowledge from any arbitrary domain they visit. To prevent this vulnerability start by identifying if the framework or library leveraged has built-in features or offers plugins for CSRF protection. CSRF tokens should be unique and securely random. The `Synchronizer Token` or `Double Submit Cookie` patterns with defense-in-depth mechanisms such as the `sameSite` cookie flag can help prevent CSRF. For more information, see: [Cross-site request forgery prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.3 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-352: Cross-Site Request Forgery (CSRF)"
                    ],
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "references": [
                        "https://stackoverflow.com/questions/42717210/samesite-cookie-in-java-application"
                    ],
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                    "shortlink": "https://sg.run/XR5b",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27164,
                            "rule_id": "WAUqW7",
                            "rule_name": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                            "rv_id": 947503,
                            "url": "https://semgrep.dev/playground/r/yeT0veP/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                            "version_id": "yeT0veP"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "8946a5901c568c714106312d22d48f3a54a0c44b7b07c1e45036942e55ffb135b778363fac6308591834fc5baeef6c84f1e2dd9a2d3101c5e1cafc49ec302cfe_1",
                "lines": "            res.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
            "path": "src/main/java/org/joychou/util/CookieUtils.java",
            "start": {
                "line": 30,
                "col": 13,
                "offset": 837
            },
            "end": {
                "line": 30,
                "col": 35,
                "offset": 859
            },
            "extra": {
                "metavars": {
                    "$RESPONSE": {
                        "start": {
                            "line": 30,
                            "col": 13,
                            "offset": 837
                        },
                        "end": {
                            "line": 30,
                            "col": 16,
                            "offset": 840
                        },
                        "abstract_content": "res"
                    },
                    "$COOKIE": {
                        "start": {
                            "line": 30,
                            "col": 27,
                            "offset": 851
                        },
                        "end": {
                            "line": 30,
                            "col": 33,
                            "offset": 857
                        },
                        "abstract_content": "cookie"
                    }
                },
                "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
                "metadata": {
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "HIGH",
                    "category": "security",
                    "subcategory": [
                        "audit"
                    ],
                    "asvs": {
                        "control_id": "3.4.1 Missing Cookie Attribute",
                        "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management",
                        "section": "V3: Session Management Verification Requirements",
                        "version": "4"
                    },
                    "cwe": [
                        "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
                    ],
                    "functional-categories": [
                        "web::search::cookie-config::Servlet"
                    ],
                    "owasp": [
                        "A05:2021 - Security Misconfiguration"
                    ],
                    "references": [
                        "https://owasp.org/www-community/controls/SecureCookieAttribute"
                    ],
                    "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE",
                    "technology": [
                        "java",
                        "servlets"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cookie Security"
                    ],
                    "source": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "shortlink": "https://sg.run/jW2J",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "pro_rules",
                            "r_id": 27165,
                            "rule_id": "0oUKLg",
                            "rule_name": "java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "rv_id": 947504,
                            "url": "https://semgrep.dev/playground/r/rxT6kN2/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                            "version_id": "rxT6kN2"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "5547fc8655454bb81f121238dab9362205ee37dddd2eb32ae1226d0555085dfc8d665da731c9320943fac0665ba43cc91abed91846e26cfafdce5df1f90422c5_1",
                "lines": "            res.addCookie(cookie);",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret",
            "path": "src/main/java/org/joychou/util/JwtUtils.java",
            "start": {
                "line": 20,
                "col": 43,
                "offset": 572
            },
            "end": {
                "line": 20,
                "col": 49,
                "offset": 578
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 8,
                            "offset": 7
                        },
                        "abstract_content": "HMAC256"
                    },
                    "$CLASS": {
                        "start": {
                            "line": 17,
                            "col": 14,
                            "offset": 437
                        },
                        "end": {
                            "line": 17,
                            "col": 22,
                            "offset": 445
                        },
                        "abstract_content": "JwtUtils"
                    },
                    "$TYPE": {
                        "start": {
                            "line": 20,
                            "col": 26,
                            "offset": 555
                        },
                        "end": {
                            "line": 20,
                            "col": 32,
                            "offset": 561
                        },
                        "abstract_content": "String"
                    },
                    "$SECRET": {
                        "start": {
                            "line": 20,
                            "col": 33,
                            "offset": 562
                        },
                        "end": {
                            "line": 20,
                            "col": 39,
                            "offset": 568
                        },
                        "abstract_content": "SECRET"
                    },
                    "$Y": {
                        "start": {
                            "line": 20,
                            "col": 43,
                            "offset": 572
                        },
                        "end": {
                            "line": 20,
                            "col": 49,
                            "offset": 578
                        },
                        "abstract_content": "123456"
                    },
                    "$RETURNTYPE": {
                        "start": {
                            "line": 72,
                            "col": 19,
                            "offset": 2494
                        },
                        "end": {
                            "line": 72,
                            "col": 26,
                            "offset": 2501
                        },
                        "abstract_content": "Boolean"
                    },
                    "$FUNC": {
                        "start": {
                            "line": 72,
                            "col": 27,
                            "offset": 2502
                        },
                        "end": {
                            "line": 72,
                            "col": 47,
                            "offset": 2522
                        },
                        "abstract_content": "verifyTokenByJavaJwt"
                    },
                    "$ALG": {
                        "start": {
                            "line": 74,
                            "col": 23,
                            "offset": 2575
                        },
                        "end": {
                            "line": 74,
                            "col": 32,
                            "offset": 2584
                        },
                        "abstract_content": "algorithm"
                    },
                    "$ALGO": {
                        "start": {
                            "line": 74,
                            "col": 35,
                            "offset": 2587
                        },
                        "end": {
                            "line": 74,
                            "col": 44,
                            "offset": 2596
                        },
                        "abstract_content": "Algorithm"
                    },
                    "$HMAC": {
                        "start": {
                            "line": 74,
                            "col": 45,
                            "offset": 2597
                        },
                        "end": {
                            "line": 74,
                            "col": 52,
                            "offset": 2604
                        },
                        "abstract_content": "HMAC256"
                    }
                },
                "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
                "metadata": {
                    "cwe": [
                        "CWE-798: Use of Hard-coded Credentials"
                    ],
                    "references": [
                        "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
                    ],
                    "owasp": [
                        "A07:2021 - Identification and Authentication Failures"
                    ],
                    "technology": [
                        "java",
                        "secrets",
                        "jwt"
                    ],
                    "category": "security",
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "LOW",
                    "impact": "MEDIUM",
                    "confidence": "HIGH",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Hard-coded Secrets"
                    ],
                    "source": "https://semgrep.dev/r/java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret",
                    "shortlink": "https://sg.run/RoDK",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 9149,
                            "rule_id": "oqUeAn",
                            "rule_name": "java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret",
                            "rv_id": 945633,
                            "url": "https://semgrep.dev/playground/r/w8TKJyr/java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret",
                            "version_id": "w8TKJyr"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "78c5e8fe4db48f8b8b8d97cf22d1e4b735e806f7e8e4bd2da0f38d0685f61e06c7c6a32c9c71ab899dd49204bc21ab322c8b1bd71d9af43dd67ee01a612b7180_0",
                "lines": "    private static final String SECRET = \"123456\";",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "html.security.audit.missing-integrity.missing-integrity",
            "path": "src/main/resources/templates/form.html",
            "start": {
                "line": 4,
                "col": 5,
                "offset": 65
            },
            "end": {
                "line": 4,
                "col": 78,
                "offset": 138
            },
            "extra": {
                "metavars": {
                    "$...A": {
                        "start": {
                            "line": 4,
                            "col": 12,
                            "offset": 72
                        },
                        "end": {
                            "line": 4,
                            "col": 68,
                            "offset": 128
                        },
                        "abstract_content": " th:src=\"@{https://code.jquery.com/jquery-3.4.1.min.js}\""
                    }
                },
                "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
                "metadata": {
                    "category": "security",
                    "technology": [
                        "html"
                    ],
                    "cwe": [
                        "CWE-353: Missing Support for Integrity Check"
                    ],
                    "owasp": [
                        "A08:2021 - Software and Data Integrity Failures"
                    ],
                    "confidence": "LOW",
                    "references": [
                        "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cryptographic Issues"
                    ],
                    "source": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity",
                    "shortlink": "https://sg.run/krXA",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 13728,
                            "rule_id": "AbUQzj",
                            "rule_name": "html.security.audit.missing-integrity.missing-integrity",
                            "rv_id": 945620,
                            "url": "https://semgrep.dev/playground/r/o5TZeRL/html.security.audit.missing-integrity.missing-integrity",
                            "version_id": "o5TZeRL"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "56f65070c330298f7e2cccf98973d95a62e0c72e9f0e6af5835de48302e09cb5d3a685cf53351a0247e6bf64a26c3617e754b6bb6ec4575916a92da51438c018_0",
                "lines": "    <script th:src=\"@{https://code.jquery.com/jquery-3.4.1.min.js}\"></script>",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
            "path": "src/main/resources/templates/form.html",
            "start": {
                "line": 15,
                "col": 5,
                "offset": 375
            },
            "end": {
                "line": 19,
                "col": 12,
                "offset": 617
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 5,
                            "offset": 4
                        },
                        "abstract_content": "post"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 15,
                            "col": 48,
                            "offset": 418
                        },
                        "end": {
                            "line": 15,
                            "col": 52,
                            "offset": 422
                        },
                        "abstract_content": "post"
                    }
                },
                "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
                "metadata": {
                    "category": "security",
                    "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                    "references": [
                        "https://docs.djangoproject.com/en/4.2/howto/csrf/"
                    ],
                    "confidence": "MEDIUM",
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "subcategory": [
                        "audit"
                    ],
                    "technology": [
                        "django"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
                    "shortlink": "https://sg.run/N0Bp",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 73471,
                            "rule_id": "PeUyYG",
                            "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token",
                            "rv_id": 946160,
                            "url": "https://semgrep.dev/playground/r/BjT1NRl/python.django.security.django-no-csrf-token.django-no-csrf-token",
                            "version_id": "BjT1NRl"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "e18375dbf285f170c92ad10f3fa99225a5e53bd7416ee3c24cd1e49ec6e34921b03b047ad51c35f086e9b9e28a1cbea7bbde8cfc7031efb8da4b059b1edf1128_0",
                "lines": "    <form name=\"f\" action=\"/csrf/post\" method=\"post\">\n        <input type=\"text\" name=\"input\" />\n        <input type=\"submit\" value=\"Submit\" />\n        <input type=\"hidden\" th:name=\"${_csrf.parameterName}\" th:value=\"${_csrf.token}\" />\n    </form>",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "html.security.audit.missing-integrity.missing-integrity",
            "path": "src/main/resources/templates/login.html",
            "start": {
                "line": 11,
                "col": 5,
                "offset": 399
            },
            "end": {
                "line": 11,
                "col": 95,
                "offset": 489
            },
            "extra": {
                "metavars": {
                    "$...A": {
                        "start": {
                            "line": 11,
                            "col": 12,
                            "offset": 406
                        },
                        "end": {
                            "line": 11,
                            "col": 85,
                            "offset": 479
                        },
                        "abstract_content": " th:src=\"@{https://cdn.jsdelivr.net/npm/jquery@3.4.1/dist/jquery.min.js}\""
                    }
                },
                "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
                "metadata": {
                    "category": "security",
                    "technology": [
                        "html"
                    ],
                    "cwe": [
                        "CWE-353: Missing Support for Integrity Check"
                    ],
                    "owasp": [
                        "A08:2021 - Software and Data Integrity Failures"
                    ],
                    "confidence": "LOW",
                    "references": [
                        "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cryptographic Issues"
                    ],
                    "source": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity",
                    "shortlink": "https://sg.run/krXA",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 13728,
                            "rule_id": "AbUQzj",
                            "rule_name": "html.security.audit.missing-integrity.missing-integrity",
                            "rv_id": 945620,
                            "url": "https://semgrep.dev/playground/r/o5TZeRL/html.security.audit.missing-integrity.missing-integrity",
                            "version_id": "o5TZeRL"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "d8a9f5b92ae463b6b6442d5ab0c0d2653d8f630534d0ff82e3218fcc6302d0698074f4ceda4c571b3bf50a2d16af553c87077aa34243e11a61c37bb907cc2a0f_0",
                "lines": "    <script th:src=\"@{https://cdn.jsdelivr.net/npm/jquery@3.4.1/dist/jquery.min.js}\"></script>",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
            "path": "src/main/resources/templates/upload.html",
            "start": {
                "line": 7,
                "col": 1,
                "offset": 89
            },
            "end": {
                "line": 10,
                "col": 8,
                "offset": 257
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 5,
                            "offset": 4
                        },
                        "abstract_content": "POST"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 7,
                            "col": 15,
                            "offset": 103
                        },
                        "end": {
                            "line": 7,
                            "col": 19,
                            "offset": 107
                        },
                        "abstract_content": "POST"
                    }
                },
                "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
                "metadata": {
                    "category": "security",
                    "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                    "references": [
                        "https://docs.djangoproject.com/en/4.2/howto/csrf/"
                    ],
                    "confidence": "MEDIUM",
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "subcategory": [
                        "audit"
                    ],
                    "technology": [
                        "django"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
                    "shortlink": "https://sg.run/N0Bp",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 73471,
                            "rule_id": "PeUyYG",
                            "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token",
                            "rv_id": 946160,
                            "url": "https://semgrep.dev/playground/r/BjT1NRl/python.django.security.django-no-csrf-token.django-no-csrf-token",
                            "version_id": "BjT1NRl"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "d2ecc1822714c1e7936b78ccce16c2cd49a446debb5b1542ecd67ee152cb0d2bd9eebe1c64146e88046f6834c98c8257944fed7846b40159934a08509b97e353_0",
                "lines": "<form method=\"POST\" th:action=\"upload\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"file\" /><br/><br/>\n    <input type=\"submit\" value=\"Submit\" />\n</form>",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
            "path": "src/main/resources/templates/uploadPic.html",
            "start": {
                "line": 7,
                "col": 1,
                "offset": 102
            },
            "end": {
                "line": 10,
                "col": 8,
                "offset": 281
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 5,
                            "offset": 4
                        },
                        "abstract_content": "POST"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 7,
                            "col": 15,
                            "offset": 116
                        },
                        "end": {
                            "line": 7,
                            "col": 19,
                            "offset": 120
                        },
                        "abstract_content": "POST"
                    }
                },
                "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
                "metadata": {
                    "category": "security",
                    "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                    "references": [
                        "https://docs.djangoproject.com/en/4.2/howto/csrf/"
                    ],
                    "confidence": "MEDIUM",
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "subcategory": [
                        "audit"
                    ],
                    "technology": [
                        "django"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
                    "shortlink": "https://sg.run/N0Bp",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 73471,
                            "rule_id": "PeUyYG",
                            "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token",
                            "rv_id": 946160,
                            "url": "https://semgrep.dev/playground/r/BjT1NRl/python.django.security.django-no-csrf-token.django-no-csrf-token",
                            "version_id": "BjT1NRl"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "234e609a63298da627e604fd9e0f9ec84a9ccbc2818c800fedf74e864c6d704091ac99beeaf6f0fb90e932dd5a7969f09810731ec7cebba1de9dc75e7742abcc_0",
                "lines": "<form method=\"POST\" th:action=\"@{upload/picture}\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"file\" /><br/><br/>\n    <input type=\"submit\" value=\"Submit\" />\n</form>",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        },
        {
            "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
            "path": "src/main/resources/templates/xxe_upload.html",
            "start": {
                "line": 7,
                "col": 1,
                "offset": 96
            },
            "end": {
                "line": 11,
                "col": 8,
                "offset": 350
            },
            "extra": {
                "metavars": {
                    "$1": {
                        "start": {
                            "line": 1,
                            "col": 1,
                            "offset": 0
                        },
                        "end": {
                            "line": 1,
                            "col": 5,
                            "offset": 4
                        },
                        "abstract_content": "POST"
                    },
                    "$METHOD": {
                        "start": {
                            "line": 7,
                            "col": 15,
                            "offset": 110
                        },
                        "end": {
                            "line": 7,
                            "col": 19,
                            "offset": 114
                        },
                        "abstract_content": "POST"
                    }
                },
                "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
                "metadata": {
                    "category": "security",
                    "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                    "references": [
                        "https://docs.djangoproject.com/en/4.2/howto/csrf/"
                    ],
                    "confidence": "MEDIUM",
                    "likelihood": "MEDIUM",
                    "impact": "MEDIUM",
                    "subcategory": [
                        "audit"
                    ],
                    "technology": [
                        "django"
                    ],
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Cross-Site Request Forgery (CSRF)"
                    ],
                    "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
                    "shortlink": "https://sg.run/N0Bp",
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "r_id": 73471,
                            "rule_id": "PeUyYG",
                            "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token",
                            "rv_id": 946160,
                            "url": "https://semgrep.dev/playground/r/BjT1NRl/python.django.security.django-no-csrf-token.django-no-csrf-token",
                            "version_id": "BjT1NRl"
                        },
                        "src": "unchanged"
                    },
                    "dev.semgrep.actions": [
                        "monitor"
                    ],
                    "semgrep.policy": {
                        "id": 164708,
                        "name": "Rule Board - Audit column",
                        "slug": "rule-board-audit"
                    },
                    "semgrep.url": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
                    "semgrep.ruleset": "default",
                    "semgrep.ruleset_id": 3471
                },
                "severity": "WARNING",
                "fingerprint": "ab8c8c4f882e1280a550e113b02ba8288f60e99164a6a2d797cbce8b6755fe4a6b5414047d9be3f48b12ab702f80301565998bad7534b66ef8f04d29bd388fe3_0",
                "lines": "<form method=\"POST\" action=\"readxlsx\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"file\" /><br/><br/>\n    <input type=\"hidden\" th:name=\"${_csrf.parameterName}\" th:value=\"${_csrf.token}\" />\n    <input type=\"submit\" value=\"Submit\" />\n</form>",
                "is_ignored": false,
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "PRO"
            }
        }
    ],
    "errors": [],
    "paths": {
        "scanned": [
            ".gitattributes",
            ".gitignore",
            "README.md",
            "README_zh.md",
            "docker-compose.yml",
            "java-sec-code.git.txt",
            "java-sec-code.iml",
            "pom.xml",
            "src/main/java/org/joychou/Application.java",
            "src/main/java/org/joychou/RMI/Client.java",
            "src/main/java/org/joychou/RMI/Hello.java",
            "src/main/java/org/joychou/RMI/Server.java",
            "src/main/java/org/joychou/config/Constants.java",
            "src/main/java/org/joychou/config/CorsConfig2.java",
            "src/main/java/org/joychou/config/CsrfTokenBean.java",
            "src/main/java/org/joychou/config/CustomCorsConfig.java",
            "src/main/java/org/joychou/config/HttpServiceConfig.java",
            "src/main/java/org/joychou/config/Object2Jsonp.java",
            "src/main/java/org/joychou/config/SafeDomainConfig.java",
            "src/main/java/org/joychou/config/SafeDomainParser.java",
            "src/main/java/org/joychou/config/SwaggerConfig.java",
            "src/main/java/org/joychou/config/TomcatFilterMemShell.java",
            "src/main/java/org/joychou/config/WebConfig.java",
            "src/main/java/org/joychou/config/WebSocketsCmdEndpoint.java",
            "src/main/java/org/joychou/config/WebSocketsProxyEndpoint.java",
            "src/main/java/org/joychou/controller/CRLFInjection.java",
            "src/main/java/org/joychou/controller/CSRF.java",
            "src/main/java/org/joychou/controller/ClassDataLoader.java",
            "src/main/java/org/joychou/controller/CommandInject.java",
            "src/main/java/org/joychou/controller/Cookies.java",
            "src/main/java/org/joychou/controller/Cors.java",
            "src/main/java/org/joychou/controller/Deserialize.java",
            "src/main/java/org/joychou/controller/Dotall.java",
            "src/main/java/org/joychou/controller/Fastjson.java",
            "src/main/java/org/joychou/controller/FileUpload.java",
            "src/main/java/org/joychou/controller/GetRequestURI.java",
            "src/main/java/org/joychou/controller/IPForge.java",
            "src/main/java/org/joychou/controller/Index.java",
            "src/main/java/org/joychou/controller/Jdbc.java",
            "src/main/java/org/joychou/controller/Jsonp.java",
            "src/main/java/org/joychou/controller/Jwt.java",
            "src/main/java/org/joychou/controller/Log4j.java",
            "src/main/java/org/joychou/controller/Login.java",
            "src/main/java/org/joychou/controller/PathTraversal.java",
            "src/main/java/org/joychou/controller/QLExpress.java",
            "src/main/java/org/joychou/controller/Rce.java",
            "src/main/java/org/joychou/controller/SQLI.java",
            "src/main/java/org/joychou/controller/SSRF.java",
            "src/main/java/org/joychou/controller/SSTI.java",
            "src/main/java/org/joychou/controller/Shiro.java",
            "src/main/java/org/joychou/controller/SpEL.java",
            "src/main/java/org/joychou/controller/URLRedirect.java",
            "src/main/java/org/joychou/controller/URLWhiteList.java",
            "src/main/java/org/joychou/controller/WebSockets.java",
            "src/main/java/org/joychou/controller/XSS.java",
            "src/main/java/org/joychou/controller/XStreamRce.java",
            "src/main/java/org/joychou/controller/XXE.java",
            "src/main/java/org/joychou/controller/othervulns/ooxmlXXE.java",
            "src/main/java/org/joychou/controller/othervulns/xlsxStreamerXXE.java",
            "src/main/java/org/joychou/dao/User.java",
            "src/main/java/org/joychou/filter/BaseCorsFilter.java",
            "src/main/java/org/joychou/filter/OriginFilter.java",
            "src/main/java/org/joychou/filter/ReferFilter.java",
            "src/main/java/org/joychou/imageConfig.java",
            "src/main/java/org/joychou/impl/HttpServiceImpl.java",
            "src/main/java/org/joychou/mapper/UserMapper.java",
            "src/main/java/org/joychou/security/AntObjectInputStream.java",
            "src/main/java/org/joychou/security/CsrfAccessDeniedHandler.java",
            "src/main/java/org/joychou/security/CustomCorsProcessor.java",
            "src/main/java/org/joychou/security/DisableSpringSecurityFirewall.java",
            "src/main/java/org/joychou/security/LoginFailureHandler.java",
            "src/main/java/org/joychou/security/LoginSuccessHandler.java",
            "src/main/java/org/joychou/security/SecurityUtil.java",
            "src/main/java/org/joychou/security/WebSecurityConfig.java",
            "src/main/java/org/joychou/security/ssrf/SSRFChecker.java",
            "src/main/java/org/joychou/security/ssrf/SSRFException.java",
            "src/main/java/org/joychou/security/ssrf/SocketHook.java",
            "src/main/java/org/joychou/security/ssrf/SocketHookFactory.java",
            "src/main/java/org/joychou/security/ssrf/SocketHookImpl.java",
            "src/main/java/org/joychou/security/ssrf/SocketHookUtils.java",
            "src/main/java/org/joychou/service/HttpService.java",
            "src/main/java/org/joychou/util/CookieUtils.java",
            "src/main/java/org/joychou/util/HttpUtils.java",
            "src/main/java/org/joychou/util/JwtUtils.java",
            "src/main/java/org/joychou/util/LoginUtils.java",
            "src/main/java/org/joychou/util/WebUtils.java",
            "src/main/resources/application.properties",
            "src/main/resources/banner.txt",
            "src/main/resources/create_db.sql",
            "src/main/resources/logback-online.xml",
            "src/main/resources/mapper/UserMapper.xml",
            "src/main/resources/static/css/login.css",
            "src/main/resources/templates/form.html",
            "src/main/resources/templates/index.html",
            "src/main/resources/templates/login.html",
            "src/main/resources/templates/upload.html",
            "src/main/resources/templates/uploadPic.html",
            "src/main/resources/templates/uploadStatus.html",
            "src/main/resources/templates/xxe_upload.html",
            "src/main/resources/url/ssrf_safe_domain.xml",
            "src/main/resources/url/url_safe_domain.xml"
        ]
    },
    "interfile_languages_used": [],
    "skipped_rules": []
}